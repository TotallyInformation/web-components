var i=class o extends HTMLElement{static componentName="uib-wrap";static className="UibWrap";static observedAttributes=["new","selector","lib-name","config-var"];static template=document.createElement("template");new=!1;libName;config;selector="div";constructor(){super(),o.template.innerHTML=`
        <style>
            :host {
                /* display: block;   default is inline */
                contain: content; /* performance boost */
            }
        </style>
        <slot></slot>
        `,this.attachShadow({mode:"open",delegatesFocus:!0}).append(o.template.content.cloneNode(!0)),this.$=this.shadowRoot.querySelector.bind(this.shadowRoot)}attributeChangedCallback(t,s,e){if(s!==e)switch(console.log("attributeChangedCallback",t,s,e),t){case"new":{console.log("new",e);try{e=e.toLowerCase()}catch{}e==="true"||e===""||e===!0?e=!0:e=!1,this.new=e,console.log("new",this.new,e);break}case"config-var":{this.config=e;break}case"lib-name":{this.libName=e;break}default:{this[t]=e;break}}}connectedCallback(){setTimeout(()=>{console.log(this.config,window.tbConfig,window.uibuilder.tbConfig);let t=uibuilder.get(this.config);Array.isArray(t)||(t=[t]),console.log(t),this.initialiseLib(t),console.log("connected")},100)}initialiseLib(t){if(!window[this.libName])throw new Error(`[UibWrap] Library '${this.libName}' not available`);this.new===!1?this.fn=window[this.libName](...t):this.fn=new window[this.libName](...t)}};customElements.get(i.componentName)||customElements.define(i.componentName,i);export{i as default};
//# sourceMappingURL=uib-wrap.esm.min.js.map
