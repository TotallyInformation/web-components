{
  "version": 3,
  "sources": ["../../libs/ti-base-component.js", "../../src/experiments/chart-statetrail.js"],
  "sourcesContent": ["// @ts-nocheck\n/** Define the base component extensions for other components in this package.\n * Used to ensure that standard properties and methods are available in every component.\n *\n * Version: See the class code\n *\n */\n/** Copyright (c) 2024-2025 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Namespace\n * @namespace Library\n */\n\n/**\n * @class\n * @augments HTMLElement\n * @description Define the base component extensions for other components in this package.\n *\n * @element ti-base-component\n * @memberOf Library\n\n * STANDARD METHODS:\n  * @function config Update runtime configuration, return complete config\n  * @function createShadowSelectors Creates the jQuery-like $ and $$ methods\n  * @function deepAssign Object deep merger\n  * @function doInheritStyles If requested, add link to an external style sheet\n  * @function ensureId Adds a unique ID to the tag if no ID defined.\n  * @function uibSend Send a message to the Node-RED server via uibuilder if available.\n  * @function _uibMsgHandler Not yet in use\n  * @function _event (name,data) Standardised custom event dispatcher\n  * @function _ready Call from end of connectedCallback. Sets connected prop and outputs events\n\n * Standard watched attributes (common across all my components):\n  * @property {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n\n * Standard props (common across all my components):\n  * @property {string} baseVersion Static. The component version string (date updated). Also has a getter.\n  * @property {number} _iCount Static. The count of instances of this component that weren't given an id. Creates a unique id as needed.\n  * @property {boolean} uib True if UIBUILDER for Node-RED is loaded\n  * @property {object} uibuilder Reference to loaded UIBUILDER for Node-RED client library if loaded (else undefined)\n  * @property {function(string): Element} $ jQuery-like shadow dom selector\n  * @property {function(string): NodeList} $$  jQuery-like shadow dom multi-selector\n  * @property {boolean} connected False until connectedCallback finishes\n  * @property {string} name Placeholder for the optional name attribute\n  * @property {object} opts This components controllable options - get/set using the `config()` method\n  *\n  * @property {string} version Getter that returns the class version & baseVersion static strings.\n\n * Other props:\n  * By default, all attributes are also created as properties\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass TiBaseComponent extends HTMLElement {\n    /** Component version */\n    static baseVersion = '2025-09-19'\n\n    /** Holds a count of how many instances of this component are on the page that don't have their own id\n     * Used to ensure a unique id if needing to add one dynamically\n     */\n    static _iCount = 0\n\n    /** Is UIBUILDER for Node-RED loaded? */\n    uib = !!window['uibuilder']\n    uibuilder = window['uibuilder']\n\n    /** Mini jQuery-like shadow dom selector (see constructor)\n     * @type {function(string): Element}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {Element} The first element that matches the specified selector.\n     */\n    $\n    /** Mini jQuery-like shadow dom multi-selector (see constructor)\n     * @type {function(string): NodeList}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {NodeList} A STATIC list of all shadow dom elements that match the selector.\n     */\n    $$\n\n    /** True when instance finishes connecting.\n     * Allows initial calls of attributeChangedCallback to be\n     * ignored if needed.\n     */\n    connected = false\n\n    /** Placeholder for the optional name attribute @type {string} */\n    name\n\n    /** Runtime configuration settings @type {object} */\n    opts = {}\n\n    /** Report the current component version string\n     * @returns {string} The component version & base version as a string\n     */\n    static get version() {\n        // @ts-ignore\n        return `${this.componentVersion} (Base: ${this.baseVersion})`\n    }\n\n    // get id() {\n    //     return this.id\n    // }\n\n    // set id(value) {\n    //     // this.id = value\n    //     console.log('>> SETTING ID:', value, this.id, this.getAttribute('id'))\n    // }\n\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n    }\n\n    /** OPTIONAL. Update runtime configuration, return complete config\n     * @param {object|undefined} config If present, partial or full set of options. If undefined, fn returns the current full option settings\n     * @returns {object} The full set of options\n     */\n    config(config) {\n        // Merge config but ensure that default states always present\n        // if (config) this.opts = { ...this.opts, ...config }\n        if (config) this.opts = TiBaseComponent.deepAssign(this.opts, config)\n        return this.opts\n    }\n\n    /** Creates the $ and $$ fns that do css selections against the shadow dom */\n    createShadowSelectors() {\n        this.$ = this.shadowRoot?.querySelector.bind(this.shadowRoot)\n        this.$$ = this.shadowRoot?.querySelectorAll.bind(this.shadowRoot)\n    }\n\n    /** Utility object deep merge fn\n     * @param {object} target Merge target object\n     * @param  {...object} sources 1 or more source objects to merge\n     * @returns {object} Deep merged object\n     */\n    static deepAssign(target, ...sources) {\n        for (let source of sources) { // eslint-disable-line prefer-const\n            for (let k in source) { // eslint-disable-line prefer-const\n                const vs = source[k]\n                const vt = target[k]\n                if (Object(vs) == vs && Object(vt) === vt) {\n                    target[k] = TiBaseComponent.deepAssign(vt, vs)\n                    continue\n                }\n                target[k] = source[k]\n            }\n        }\n        return target\n    }\n\n    /** Optionally apply an external linked style sheet for Shadow DOM (called from connectedCallback)\n     * param {*} url The URL for the linked style sheet\n     */\n    async doInheritStyles() {\n        if (!this.shadowRoot) return\n        if (!this.hasAttribute('inherit-style')) return\n\n        let url = this.getAttribute('inherit-style')\n        if (!url) url = './index.css'\n\n        const linkEl = document.createElement('link')\n        linkEl.setAttribute('type', 'text/css')\n        linkEl.setAttribute('rel', 'stylesheet')\n        linkEl.setAttribute('href', url)\n        this.shadowRoot.appendChild(linkEl)\n\n        console.info(`[${this.localName}] Inherit-style requested. Loading: \"${url}\"`)\n    }\n\n    /** Ensure that the component instance has a unique ID & check again if uib loaded */\n    ensureId() {\n        // Check again if UIBUILDER for Node-RED is loaded\n        this.uib = !!window['uibuilder']\n\n        if (!this.id) {\n            // if (!this.name) this.name = this.getAttribute('name')\n            // if (this.name) this.id = this.name.toLowerCase().replace(/\\s/g, '_')\n            // else this.id = `${this.localName}-${++this.constructor._iCount}`\n            // @ts-ignore\n            this.id = `${this.localName}-${++this.constructor._iCount}`\n        }\n    }\n\n    /** Check if slot has meaningful content (not just whitespace)\n     * @returns {boolean} True if slot has non-empty content\n     */\n    hasSlotContent() {\n        const slot = this.shadowRoot.querySelector('slot')\n        const assignedNodes = slot.assignedNodes()\n\n        return assignedNodes.some(node => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                return true\n            }\n            if (node.nodeType === Node.TEXT_NODE) {\n                return node.textContent.trim().length > 0\n            }\n            return false\n        })\n    }\n\n    /** Attaches a new stylesheet before all other stylesheets in the light DOM\n     * @param {string} cssText - CSS text to inject directly\n     * @param {number} order - Optional order/priority for stylesheet placement. Lower numbers = higher priority (inserted first). Defaults to 0.\n     * @returns {Element} The created or existing style element\n     * @throws {Error} If cssText is not provided\n     * @example\n     * // Inject CSS text directly with default order\n     * dataList.prependStylesheet('.custom { color: hsl(0, 100%, 50%); }')\n     *\n     * // Inject CSS with specific order (lower number = higher priority)\n     * dataList.prependStylesheet('.base { font-size: 1rem; }', 1)\n     * dataList.prependStylesheet('.critical { color: hsl(0, 100%, 50%); }', 0)\n     */\n    prependStylesheet(cssText, order = 0) {\n        if (!cssText) {\n            throw new Error(`[${this.localName}] cssText must be provided`)\n        }\n\n        // TODO: - Add ability to append after other stylesheets (including those in the HTML head)\n\n        // Check if same stylesheet already exists\n        const existingStylesheet = this._findExistingStylesheet()\n        // If so, return existing element instead of creating duplicate\n        if (existingStylesheet) return existingStylesheet\n\n        // Create style element with direct CSS text\n        const styleElement = document.createElement('style')\n        styleElement.textContent = cssText\n        styleElement.setAttribute('data-component', this.localName)\n        styleElement.setAttribute('data-order', order.toString())\n\n        // Prepend to light DOM (document head) with order consideration\n        this._prependToDocumentHead(styleElement, order)\n        return styleElement\n    }\n\n    /** Send a message to the Node-RED server via uibuilder if available\n     * NB: These web components are NEVER dependent on Node-RED or uibuilder.\n     * @param {string} evtName The event name to send\n     * @param {*} data The data to send\n     */\n    uibSend(evtName, data){\n        if (this.uib) {\n            if (this.uibuilder.ioConnected) {\n                this.uibuilder.send({\n                    topic: `${this.localName}:${evtName}`,\n                    payload: data,\n                    id: this.id,\n                    name: this.name,\n                })\n            } else {\n                console.warn(`[${this.localName}] uibuilder not connected to server, cannot send:`, evtName, data)\n            }\n        }\n    }\n\n    // #region ---- Methods private to extended classes ----\n    // These are called from a class that extends this base class but should not be called directly by the user.\n\n    /** Standardised connection. Call from the start of connectedCallback fn */\n    _connect() {\n        // Make sure instance has an ID. Create an id from name or calculation if needed\n        this.ensureId()  // in base class\n        // Apply parent styles from a stylesheet if required - only required if using an applied template\n        this.doInheritStyles()  // in base class\n\n        // Listen for a uibuilder msg that is targetted at this instance of the component\n        if (this.uib) this.uibuilder.onTopic(`${this.localName}::${this.id}`, this._uibMsgHandler.bind(this) )\n    }\n\n    /** Standardised constructor. Keep after call to super()\n     * @param {Node|string} template Nodes/string content that will be cloned into the shadow dom\n     * @param {{mode:'open'|'closed',delegatesFocus:boolean}=} shadowOpts Options passed to attachShadow\n     */\n    _construct(template, shadowOpts) {\n        if (!template) return\n        if (!shadowOpts) shadowOpts = { mode: 'open', delegatesFocus: true, }\n        // Only attach the shadow dom if code and style isolation is needed\n        this.attachShadow(shadowOpts)\n            .append(template)\n\n        // jQuery-like selectors but for the shadow. NB: Returns are STATIC not dynamic lists\n        this.createShadowSelectors()  // in base class\n    }\n\n    /** Standardised disconnection. Call from the END of disconnectedCallback fn */\n    _disconnect() {\n        // @ts-ignore Remove optional uibuilder event listener\n        document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler )\n\n        // Keep at end. Let everyone know that an instance of the component has been disconnected\n        this._event('disconnected')\n    }\n\n    /** Custom event dispacher `component-name:name` with detail data\n     * @example\n     *   this._event('ready')\n     * @example\n     *   this._event('ready', {age: 42, type: 'android'})\n     *\n     * @param {string} evtName A name to give the event, added to the component-name separated with a :\n     * @param {*=} data Optional data object to pass to event listeners via the evt.detail property\n     */\n    _event(evtName, data) {\n        this.dispatchEvent(new CustomEvent(`${this.localName}:${evtName}`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name,\n                data: data,\n            },\n        } ) )\n    }\n\n    /** Call from end of connectedCallback */\n    _ready() {\n        this.connected = true\n        this._event('connected')\n        this._event('ready')\n    }\n\n    /** Handle a `${this.localName}::${this.id}` custom event\n     * Each prop in the msg.payload is set as a prop on the component instance.\n     * @param {object} msg A uibuilder message object\n     */\n    _uibMsgHandler(msg) {\n        // if msg.payload is not an object, ignore\n        if (typeof msg.payload !== 'object') {\n            console.warn(`[${this.localName}] Ignoring msg, payload is not an object:`, msg)\n            return\n        }\n\n        // set properties from the msg\n        Object.keys(msg.payload).forEach(key => {\n            if (key.startsWith('_')) return\n            this[key] = msg.payload[key]\n        })\n    }\n\n    // #endregion ---- Methods private to the extended classes ----\n\n    // #region ---- Methods private to the base class only ----\n\n    /** Find existing component stylesheet with the same data-component attribute value\n     * Assumes that the style element has a `data-component` attribute set to the component's local name\n     * @returns {Element|null} Existing element or null if not found\n     * @private\n     */\n    _findExistingStylesheet() {\n        const existing = document.head.querySelector(\n            `style[data-component=\"${this.localName}\"]`\n        )\n        return existing\n    }\n\n    /** Helper method to prepend a style element to the document head with order consideration\n     * @param {HTMLElement} styleElement - The style element to prepend\n     * @param {number} order - The order/priority for placement (lower numbers = higher priority)\n     * @private\n     */\n    _prependToDocumentHead(styleElement, order) {\n        const head = document.head\n\n        // Find existing injected stylesheets to determine proper insertion point\n        const existingComponentStyles = Array.from(head.querySelectorAll('style[data-component]'))\n\n        if (existingComponentStyles.length === 0) {\n            // No existing injected styles, insert at the very beginning\n            const firstChild = head.firstChild\n            if (firstChild) {\n                head.insertBefore(styleElement, firstChild)\n            } else {\n                head.appendChild(styleElement)\n            }\n            return\n        }\n\n        // Find the correct position based on order\n        let insertBefore = null\n        for (const existing of existingComponentStyles) {\n            const existingOrder = parseInt(existing.getAttribute('data-order') ?? '0', 10)\n            if (order < existingOrder) {\n                insertBefore = existing\n                break\n            }\n        }\n\n        if (insertBefore) {\n            // Insert before the found element\n            head.insertBefore(styleElement, insertBefore)\n        } else {\n            // Insert after all existing component styles but before non-component styles\n            const lastInjected = existingComponentStyles[existingComponentStyles.length - 1]\n            const nextSibling = lastInjected.nextSibling\n            if (nextSibling) {\n                head.insertBefore(styleElement, nextSibling)\n            } else {\n                head.appendChild(styleElement)\n            }\n        }\n    }\n\n    // #endregion ---- Methods private to the base class only ----\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default TiBaseComponent\n\n// This is a library class so don't self-register, it is only for inclusion in actual components\n", "/** A horizontal state trail (AKA timeline) chart web component with zero dependencies.\n *\n * For better formatting of HTML in template strings, use VSCode's \"ES6 String HTML\" extension\n *\n * Version: See the class code\n *\n */\n/** Copyright (c) 2022-2025 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport TiBaseComponent from '../../libs/ti-base-component'\n\n/**\n * @typedef {string} CSSColor - A CSS color value (e.g., \"red\", \"#ff0000\", \"rgb(255, 0, 0)\").\n * @typedef {string} CSSLength - A CSS length value (e.g., \"10px\", \"2em\", \"50%\").\n */\n\n/** Only use a template if you want to isolate the code and CSS */\nconst template = document.createElement('template')\ntemplate.innerHTML = /*html*/`\n    <style>\n        :host {\n            display: block;   /* default is inline */\n            contain: content; /* performance boost */\n        }\n    </style>\n    <slot></slot>\n`\n\n/** Namespace\n * @namespace Alpha\n */\n\n/**\n * @class\n * @augments TiBaseComponent\n * @description Define a new zero dependency custom web component ECMA module that can be used as an HTML tag\n *\n * @element chart-statetrail\n * @memberOf Alpha\n\n * METHODS FROM BASE:\n * @function config Update runtime configuration, return complete config\n * @function createShadowSelectors Creates the jQuery-like $ and $$ methods\n * @function deepAssign Object deep merger\n * @function doInheritStyles If requested, add link to an external style sheet\n * @function ensureId Adds a unique ID to the tag if no ID defined.\n * @function _uibMsgHandler Not yet in use\n * @function _event (name,data) Standardised custom event dispatcher\n * @function _ready Call from end of connectedCallback. Sets connected prop and outputs events\n\n * OTHER METHODS:\n * None\n\n * fires chart-statetrail:connected - When an instance of the component is attached to the DOM. `evt.details` contains the details of the element.\n * fires chart-statetrail:ready - Alias for connected. The instance can handle property & attribute changes\n * fires chart-statetrail:disconnected - When an instance of the component is removed from the DOM. `evt.details` contains the details of the element.\n * fires chart-statetrail:attribChanged - When a watched attribute changes. `evt.details.data` contains the details of the change.\n * NOTE that listeners can be attached either to the `document` or to the specific element instance.\n\n * Standard watched attributes (common across all my components):\n * @property {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n * @property {string} name - Optional. HTML name attribute. Included in output _meta prop.\n\n * Other watched attributes:\n * None\n\n * Standard props (common across all my components):\n * @property {number} _iCount Static. The component version string (date updated)\n * @property {boolean} uib True if UIBUILDER for Node-RED is loaded\n * @property {function(string): Element} $ jQuery-like shadow dom selector\n * @property {function(string): NodeList} $$  jQuery-like shadow dom multi-selector\n * @property {boolean} connected False until connectedCallback finishes\n * @property {object} opts This components controllable options - get/set using the `config()` method\n *\n * @property {string} version Static. The component version string (date updated). Also has a getter that returns component and base version strings.\n\n * Other props:\n * By default, all attributes are also created as properties\n\n * @slot Container contents\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass ChartStatetrail extends TiBaseComponent {\n    /** Component version */\n    static componentVersion = '2024-12-14'\n\n    /** Default component options */\n    opts = {\n        /** Placeholder for the chart data */\n        data: {},\n        /** An array of category objects that map input value ranges to titles and colors.\n         * Each category object contains:\n         * - `range`: An array with two numbers representing the start and end of the range.\n         * - `title`: A string representing the title of the category.\n         * - `color`: A string representing the color associated with the category.\n         * @type {Array<{range: [number, number], title: string, color: CSSColor}>}\n         */\n        categoryMap: [\n            { range: [0, 0.3], title: 'Off', color: 'var(--failure, red)', },\n            { range: [0.3, 0.6], title: 'Partial', color: 'var(--warning, #c8b421)', },\n            { range: [0.6, 1], title: 'On', color: 'var(--success, green)', }\n        ],\n        /** Allows a nice title to be displayed for each item */\n        itemMap: {},\n    }\n\n    /** The minimum timestamp for the time axis */\n    minTime = 0\n    /** The maximum timestamp for the time axis */\n    maxTime = 0\n    /** The total duration of the time axis */\n    totalDuration = 0\n\n    /** Makes HTML attribute change watched\n     * @returns {Array<string>} List of all of the html attribs (props) listened to\n     */\n    static get observedAttributes() {\n        return [\n            // Standard watched attributes:\n            'inherit-style', 'name',\n            // Other watched attributes:\n        ]\n    }\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n        // Only attach the shadow dom if code and style isolation is needed - comment out if shadow dom not required\n        this._construct(template.content.cloneNode(true))\n    }\n\n    /** Runs when an instance is added to the DOM */\n    connectedCallback() {\n        this._connect() // Keep at start.\n\n        this._ready() // Keep at end. Let everyone know that a new instance of the component has been connected & is ready\n    }\n\n    /** Runs when an instance is removed from the DOM */\n    disconnectedCallback() {\n        this._disconnect() // Keep at end.\n    }\n\n    /** Runs when an observed attribute changes - Note: values are always strings\n     * @param {string} attrib Name of watched attribute that has changed\n     * @param {string} oldVal The previous attribute value\n     * @param {string} newVal The new attribute value\n     */\n    attributeChangedCallback(attrib, oldVal, newVal) {\n        /** Optionally ignore attrib changes until instance is fully connected\n         * Otherwise this can fire BEFORE everthing is fully connected.\n         */\n        // if (!this.connected) return\n\n        // Don't bother if the new value same as old\n        if ( oldVal === newVal ) return\n        // Create a property from the value - WARN: Be careful with name clashes\n        this[attrib] = newVal\n\n        // Add other dynamic attribute processing here.\n        // If attribute processing doesn't need to be dynamic, process in connectedCallback as that happens earlier in the lifecycle\n\n        // Keep at end. Let everyone know that an attribute has changed for this instance of the component\n        this._event('attribChanged', { attribute: attrib, newVal: newVal, oldVal: oldVal, })\n    }\n\n    updateMinMaxTimestamps() {\n        const times = this.opts.data.flatMap(item => [new Date(item.startTime), new Date(item.endTime)])\n        this.minTime = Math.min(...times)\n        this.maxTime = Math.max(...times)\n        this.totalDuration = this.maxTime - this.minTime\n    }\n\n    createAxisLine() {\n        const axisContainer = document.createElement('div')\n        axisContainer.className = 'timeline-axis-container'\n\n        const itemTitle = document.createElement('div')\n        itemTitle.className = 'timeline-axis-title'\n        // itemTitle.textContent = `${group} ${itemName}`;\n        axisContainer.appendChild(itemTitle)\n\n        const axisLine = document.createElement('div')\n        axisLine.className = 'timeline-axis-line'\n\n        const numTicks = 10\n        for (let i = 0; i <= numTicks; i++) {\n            const tick = document.createElement('div')\n            tick.className = 'timeline-axis-tick'\n            tick.style.left = `${(i / numTicks) * 100}%`\n            const tickTime = new Date(this.minTime + (i / numTicks) * this.totalDuration)\n            tick.textContent = tickTime.toISOString().substring(11, 19) // Show only the time part\n            axisLine.appendChild(tick)\n        }\n\n        axisContainer.appendChild(axisLine)\n        return axisContainer\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default ChartStatetrail\n\n/** Self register the class to global\n * Enables new data lists to be dynamically added via JS\n * and lets the static methods be called\n */\nwindow['ChartStatetrail'] = ChartStatetrail\n\n// Self-register the HTML tag\ncustomElements.define('chart-statetrail', ChartStatetrail)\n"],
  "mappings": "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",
  "names": ["TiBaseComponent", "_TiBaseComponent", "config", "target", "sources", "source", "k", "vs", "vt", "url", "linkEl", "node", "cssText", "order", "existingStylesheet", "styleElement", "evtName", "data", "template", "shadowOpts", "msg", "key", "head", "existingComponentStyles", "firstChild", "insertBefore", "existing", "existingOrder", "nextSibling", "ti_base_component_default", "template", "ChartStatetrail", "ti_base_component_default", "attrib", "oldVal", "newVal", "times", "item", "axisContainer", "itemTitle", "axisLine", "numTicks", "i", "tick", "tickTime", "chart_statetrail_default"]
}
