(()=>{var r=class a extends HTMLElement{static componentName="simple-gauge";static className="SimpleGauge";static observedAttributes=["min","max","value","mode","gx","gy"];static template=document.createElement("template");static div=document.createElement("div");$;uib=!!window.uibuilder;dark=.4;colors=["var(--color-g)","var(--color-g)","var(--color-g)","var(--color-g)","var(--color-g)","var(--color-g)","var(--color-g)","var(--color-g)","var(--color-g)","var(--color-g)","var(--color-a)","var(--color-a)","var(--color-a)","var(--color-a)","var(--color-r)","var(--color-r)","var(--color-r)"];min=0;max=100;value=0;mode="v";constructor(){super(),a.template.innerHTML=`
        <style>
            :host {
                display: block;   /* default is inline */
                contain: content; performance boost
                /* gap:2px; change to a var
                border: 1px solid silver;
                --color-r: red;
                --color-a: #ffcf00;
                --color-g: #4ed34e; */
            }
            .vertical {
                display: flex;
                flex-wrap: nowrap;
                flex-direction: column;
                gap: .5rem; /* change to a var */
                border: 1px solid silver;
                border-radius: var(--border-radius);
                padding: 0.5rem;
            }
            .horizontal {
                display: flex;
                flex-wrap: nowrap;
                flex-direction: row;
                gap: .5rem; /* change to a var */
                border: 1px solid silver;
                border-radius: var(--border-radius);
                padding: 0.5rem;
            }
            .led {
                background: #ffffff;
                border-radius: inherit;
                border: 1px solid silver;
                box-shadow: inset 0px 0px 20px 0px #00000099, 0px 0px 3px 0px #00000099;
                filter: brightness(0.4);
                /* margin: 1rem; */
                flex: 1 1 auto;
            }
            .container {
                display: flex;
                flex-wrap: nowrap;
                flex-direction: column;
                justify-content: start;
                align-items: auto;
                align-content: start;
            }
            .item {
                flex: 0 0 auto;
                margin: 1em;
            }
        </style>
        <!-- <div v-for="(color, index) in colors" :key="index" class="led" :ref="'dot-' + index +'-'+this.id"></div> -->
        <div></div>
        <caption><slot></slot></caption>
        `,this.attachShadow({mode:"open",delegatesFocus:!0}).append(a.template.content.cloneNode(!0)),this.$=this.shadowRoot.querySelector.bind(this.shadowRoot),this.outer=this.shadowRoot.querySelector("div"),this.caption=this.shadowRoot.querySelector("caption"),console.log(this.outer)}attributeChangedCallback(e,t,o){if(t!==o)switch(console.log("attributeChangedCallback",e,t,o),e){case"mode":{["x","h","horizontal"].includes(o.toLowerCase())?(this.mode="h",this.outer.className="horizontal"):(this.mode="v",this.outer.className="vertical"),console.log("mode",this.mode,o);break}case"value":{this[e]=o,this.changeDisplay(o);break}default:{this[e]=o;break}}}connectedCallback(){console.log("connected")}changeDisplay(e){if(e=Number(e),!isNaN(e)){e>this.max&&console.warn("Value > max"),e<this.min&&console.warn("Value < min"),this.outer.innerHTML="",console.log("adding",this.min,this.max,e);for(let t=this.max;t>=this.min;t--){let o=a.div.cloneNode();o.setAttribute("class","led"),o.setAttribute("data-i",t),this.outer.insertBefore(o,this.caption)}}}};customElements.get(r.componentName)||customElements.define(r.componentName,r);})();
//# sourceMappingURL=simple-gauge.iife.min.js.map
