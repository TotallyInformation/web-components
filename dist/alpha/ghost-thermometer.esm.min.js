var n="ghost-thermometer",d="GhostThermometer";function l(o,t=0){let i=Math.pow(10,t);return Math.round(o*i)/i}var a=document.createElement("template");a.innerHTML=`
    <style>
        :host {
            display: inline-block; /* default is inline */
            contain: content; /* performance boost */
            max-width: 400px; width:90%;

            --grey1-color: hsl(0, 0%, 87%); /* #dddddd; Divider line, dial label */
            --grey2-color: hsl(0, 0%, 53%); /* #888888 */ 
            --grey3-color: hsl(0, 0%, 20%); /* #333333 */
            --grey4-color: hsl(0, 0%, 12%); /* rgb(30,30,30) */
            --dark-color: hsl(0, 0%, 0%); /* black; */
            --grey-blue-color: hsl(218, 4%, 35%); /* rgb(86,89,94) grey-blue */
            /* --grey-blue-color2: hsl(218, 6%, 25%); #3b3e43 grey-blue2 */
            --text-color: hsl(0, 0%, 100%); /* #ffffff; */
            --warn-color: hsl(39, 100%, 50%); /* orange; */
            --off-color: hsl(0, 1%, 56%); /* rgb(143,141,141) off */
            --cooling-color: hsl(200, 62%, 58%); /* rgb(81,170,214) cooling, light blue */
            --heating-color: hsl(30, 100%, 50%); /* rgb(125,128,0) heating, dark orange */
        }

        svg {
            transition: all .6s cubic-bezier(0.175, 0.885, 0.32, 1.2);
        }

        stop {
            transition: all .5s;
        }

        .caption { 
            width: 100%;
            text-align: center;
        }

        .led {
            -webkit-transition: all 0.5s;
            transition: all 0.5s;
            fill: url(#ledColor);
        }

        .dial {
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        .lbl {
            text-anchor: middle;
            fill : var(--text-color);
            clip-path: url(#qClip);
        }
        .lblDial {
            fill: var(--grey1-color);
        }

        .valMain {
            font-weight: 400;
            /* clip-path: url(#qClip); */
        }

        .lblAmbient tspan {
            font-weight: 400;
        }

        .lblTarget {
            font-weight: 400;
            fill: var(--warning-intense, --warn-color);
        }

        .lblTarget tspan {
            font-weight: 400;
            fill: var(--warning-intense, --warn-color);
            clip-path: url(#qClip);
        }    

        .nodisplay {
            display: none !important;
        }

        .animate {
            transition: all 0.5s;
        }
    </style>
        <svg 
            width="100%" height="100%" viewBox="0 0 400 400" class="dial"
            xmlns="http://www.w3.org/2000/svg"
            xmlns:xlink="http://www.w3.org/1999/xlink"
        >
            <defs>
                <linearGradient id="qGradient" gradientTransform="rotate(65)">
                    <stop offset="50%" stop-color="var(--grey-blue-color)"></stop>
                    <stop offset="65%" stop-color="var(--grey4-color)"></stop>
                </linearGradient>
                <clipPath id="qClip">
                    <circle cx="200" cy="200" r="175"></circle>
                </clipPath>
                <radialGradient id="ledColor" cx="50%" cy="50%" r="95%" fx="50%" fy="50%">
                    <stop offset="45%" stop-color="var(--off-color)" stop-opacity="1"></stop>
                    <stop offset="65%" stop-color="var(--dark-color)" stop-opacity="1"></stop>
                </radialGradient>
                <linearGradient id="eGradient" gradientTransform="rotate(55)">
                    <stop offset="55%" stop-color="var(--grey2-color)" stop-opacity="1"></stop>
                    <stop offset="95%" stop-color="var(--grey3-color)" stop-opacity="1"></stop>
                </linearGradient>
            </defs>
            <circle cx="200" cy="200" r="200" fill="url(#eGradient)"></circle>
            <circle cx="200" cy="200" r="197" stroke="var(--dark-color)" stroke-width="1" class="led"></circle>
            <circle cx="200" cy="200" r="180" fill="url(#qGradient)"></circle>
            <circle cx="200" cy="200" r="175" fill="url(#qGradient)"></circle>
            <text x="200" y="70" class="lbl lblDial" id="lblMain">
                AMBIENT
            </text>
            <text x="200" y="210" font-size="140" class="lbl valMain" id="valMain">
                --
            </text>
            <line x1="55" y1="235" x2="345" y2="235" stroke="var(--grey1-color)" stroke-width="1" opacity="0.8"></line>
            <text x="200" y="254" class="lbl" id="lblNote"> </text>
            <text x="125" y="285" class="lbl lblDial" id="lblLeft">
                SET
            </text>
            <text x="125" y="325" font-size="35" class="lbl lblTarget" id="valLeft">
                --
            </text>
            <text x="275" y="285" class="lbl lblDial" id="lblRight">
                MODE
            </text>
            <text x="275" y="325" font-size="35" class="lbl lblTarget icon" id="valRight">
                \u26D4
            </text>
            <g>
                <rect opacity="0" width="350" height="200" x="25" y="30" id="clickMain">
                    <title id="titleMain">Current ambient temperature</title>
                </rect>
            </g>
            <g transform="translate(200,200)">
                <path d="M0,40 L0,175 A175,175 0 0,1 -175,40 z" opacity="0" id="btnLeft">
                    <title id="titleLeft">Current setpoint. Click to change</title>
                </path>
                <path d="M0,40 L175,40 A175,175 0 0,1 0,175 z" opacity="0" id="btnRight">
                    <title id="titleRight">Current mode. Click to change</title>
                </path>
            </g>
        </svg>
        <div class="caption"><slot></slot></div>
`;var s=class o extends HTMLElement{topic="";payload="";displayMode="default";switchState="off";modes={heating:{label:"heating",icon:"\u{1F525}"},cooling:{label:"cooling",icon:"\u2744\uFE0F"},off:{label:"off",icon:"\u26D4"}};static _iCount=0;static props=["name","id","temperature","setpoint","mode"];$(t){return this.shadowRoot&&this.shadowRoot.querySelector(t)}str2bool(t){return t&&typeof t=="string"?t.toLowerCase()==="true":t===!0}doNote(t,i){t===""&&(t=" "),i.childNodes[0].nodeValue=t}uibSend(){window.uibuilder&&window.uibuilder.send({payload:{id:this.id,temperature:this.numTemperature,switchState:this.switchState,mode:this.mode,setpoint:this.numSetpoint}})}checkMode(){!this.numTemperature||!this.numSetpoint||(this.mode==="heating"&&this.numSetpoint>this.numTemperature?(this.$("#ledColor > stop:nth-child(1)").setAttribute("stop-color","var(--heating-color)"),this.switchState!=="heating"&&(this.switchState="heating",this.uibSend())):this.mode==="cooling"&&this.numSetpoint<this.numTemperature?(this.$("#ledColor > stop:nth-child(1)").setAttribute("stop-color","var(--cooling-color)"),this.switchState!=="cooling"&&(this.switchState="cooling",this.uibSend())):(this.$("#ledColor > stop:nth-child(1)").setAttribute("stop-color","var(--off-color)"),this.switchState!=="off"&&(this.switchState="off",this.uibSend())))}_uibMsgHandler(t){}_btnLeftClick(t){if(this.displayMode==="default")this.displayMode="set",this.$("#lblMain").childNodes[0].nodeValue="SET",this.$("#valMain").childNodes[0].nodeValue=this.setpoint||"--",this.$("#lblLeft").childNodes[0].nodeValue="",this.$("#valLeft").childNodes[0].nodeValue="-",this.$("#lblRight").childNodes[0].nodeValue="",this.$("#valRight").childNodes[0].nodeValue="+";else if(this.displayMode==="set"){let i=Number(this.setincrement),e=Number(this.minset);this.numSetpoint=l(this.numSetpoint-i,1),isNaN(this.numSetpoint)&&(this.numSetpoint=20),this.numSetpoint>=e?(this.setpoint=this.numSetpoint,this.doNote(" ",this.$("#lblNote"))):this.doNote(`Already at min setpoint (${e})`,this.$("#lblNote"))}else this.displayMode==="mode"&&(this.mode==="heating"?this.mode="off":this.mode==="cooling"?this.mode="heating":this.mode="cooling",this.checkMode())}_btnRightClick(t){if(this.displayMode==="default")this.displayMode="mode",this.$("#lblMain").childNodes[0].nodeValue="MODE",this.$("#valMain").childNodes[0].nodeValue=this.modes[this.mode].icon||"\u26A0\uFE0F",this.$("#lblLeft").childNodes[0].nodeValue="",this.$("#valLeft").childNodes[0].nodeValue="<",this.$("#lblRight").childNodes[0].nodeValue="",this.$("#valRight").childNodes[0].nodeValue=">";else if(this.displayMode==="set"){let i=Number(this.setincrement),e=Number(this.maxset);this.numSetpoint=l(this.numSetpoint+i,1),isNaN(this.numSetpoint)&&(this.numSetpoint=20),this.numSetpoint<=e?(this.setpoint=this.numSetpoint,this.doNote(" ",this.$("#lblNote"))):this.doNote(`Already at max setpoint (${e})`,this.$("#lblNote"))}else this.displayMode==="mode"&&(this.mode==="heating"?this.mode="cooling":this.mode==="cooling"?this.mode="off":this.mode="heating",this.checkMode())}_clickMain(t){this.displayMode!=="default"&&(this.displayMode="default",this.doNote(" ",this.$("#lblNote")),this.$("#lblMain").childNodes[0].nodeValue="AMBIENT",this.$("#valMain").childNodes[0].nodeValue=this.temperature||"--",this.$("#lblLeft").childNodes[0].nodeValue="SET",this.$("#valLeft").childNodes[0].nodeValue=this.setpoint||"--",this.$("#lblRight").childNodes[0].nodeValue="MODE",this.$("#valRight").childNodes[0].nodeValue=this.modes[this.mode].icon||"\u26A0\uFE0F")}get temperature(){return this.getAttribute("temperature")||"--"}set temperature(t){this.numTemperature=t==="--"?0:Number(t),this.checkMode(),this.setAttribute("temperature",t||"--")}get setpoint(){return this.getAttribute("setpoint")||"--"}set setpoint(t){this.numSetpoint=t==="--"?0:Number(t),this.checkMode(),this.setAttribute("setpoint",t||"--")}get minset(){return this.getAttribute("minset")||-999}set minset(t){this.setAttribute("minset",t||-999)}get maxset(){return this.getAttribute("maxset")||999}set maxset(t){this.setAttribute("maxset",t||999)}get setincrement(){return this.getAttribute("setincrement")||.1}set setincrement(t){this.setAttribute("setincrement",t||.1)}get mode(){return this.getAttribute("mode")||"off"}set mode(t){this.setAttribute("mode",t||"off")}constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}).append(a.content.cloneNode(!0)),this._data={...this.dataset},this._name=this.getAttribute("name"),this._msg={topic:this.topic,payload:this.payload?this.payload:this._data,_meta:{id:this.id,name:this._name,data:this._data}},this._clickEvt=new CustomEvent("button-send:click",{detail:this._msg}),this.dispatchEvent(new Event(`${n}:construction`,{bubbles:!0,composed:!0}));try{this.uibuilder=window.uibuilder}catch{this.uibuilder=void 0}}static get observedAttributes(){return o.props}attributeChangedCallback(t,i,e){if(this.id||(this.name||(this.name=this.getAttribute("name")),this.name?this.id=this.name.toLowerCase().replace(/\s/g,"_"):this.id=`ghostthermometer-${++o._iCount}`),i!==e){switch(t){case"temperature":{this.displayMode==="default"&&(this.$("#valMain").childNodes[0].nodeValue=e||"--");break}case"setpoint":{if(e>this.maxset)throw new Error(`Setpoint (${e}) must be <= ${this.maxset} (maxset) for <ghost-thermometer id="${this.id}">`);if(e<this.minset)throw new Error(`Setpoint (${e}) must be >= ${this.minset} (maxset) for <ghost-thermometer id="${this.id}">`);this.displayMode==="default"?this.$("#valLeft").childNodes[0].nodeValue=e||"--":this.displayMode==="set"&&(this.$("#valMain").childNodes[0].nodeValue=e||"--");break}case"mode":{if(!Object.keys(this.modes).includes(e))throw this.doNote(`Invalid mode "${e}"`,this.$("#lblNote")),this.$("#valRight").childNodes[0].nodeValue=this.$("#valMain").childNodes[0].nodeValue="\u26A0\uFE0F",new Error(`Invalid mode (${e}). Must be one of "${Object.keys(this.modes).join('", "')}" for <ghost-thermometer id="${this.id}">`);this.displayMode==="default"?this.$("#valRight").childNodes[0].nodeValue=this.modes[e].icon||"\u26A0\uFE0F":this.displayMode==="mode"&&(this.$("#valMain").childNodes[0].nodeValue=this.modes[e].icon||"\u26A0\uFE0F");break}default:break}this[t]=e}}connectedCallback(){document.addEventListener(`uibuilder:msg:_ui:update:${this.id}`,this._uibMsgHandler.bind(this)),this.$("#btnLeft").onclick=this._btnLeftClick.bind(this),this.$("#btnRight").onclick=this._btnRightClick.bind(this),this.$("#clickMain").onclick=this._clickMain.bind(this)}disconnectedCallback(){document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`,this._uibMsgHandler)}};window[d]=s;customElements.define(n,s);export{s as default};
//# sourceMappingURL=ghost-thermometer.esm.min.js.map
