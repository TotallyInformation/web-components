{
  "version": 3,
  "sources": ["../../libs/ti-base-component.js", "../../alpha/smart-table.js"],
  "sourcesContent": ["/** Define the base component extensions for other components in this package.\n * Used to ensure that standard properties and methods are available in every component.\n *\n * Version: See the class code\n *\n **/\n/** Copyright (c) 2024-2025 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\n/** Namespace\n * @namespace Library\n */\n\n/**\n * @class\n * @extends HTMLElement\n * @description Define the base component extensions for other components in this package.\n *\n * @element ti-base-component\n * @memberOf Library\n\n * STANDARD METHODS:\n  * @method config Update runtime configuration, return complete config\n  * @method createShadowSelectors Creates the jQuery-like $ and $$ methods\n  * @method deepAssign Object deep merger\n  * @method doInheritStyles If requested, add link to an external style sheet\n  * @method ensureId Adds a unique ID to the tag if no ID defined.\n  * @method uibSend Send a message to the Node-RED server via uibuilder if available.\n  * @method _uibMsgHandler Not yet in use\n  * @method _event(name,data) Standardised custom event dispatcher\n  * @method _ready Call from end of connectedCallback. Sets connected prop and outputs events\n\n * Standard watched attributes (common across all my components):\n  * @attr {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n\n * Standard props (common across all my components):\n  * @prop {string} baseVersion Static. The component version string (date updated). Also has a getter.\n  * @prop {number} _iCount Static. The count of instances of this component that weren't given an id. Creates a unique id as needed.\n  * @prop {boolean} uib True if UIBUILDER for Node-RED is loaded\n  * @prop {object} uibuilder Reference to loaded UIBUILDER for Node-RED client library if loaded (else undefined)\n  * @prop {function(string): Element} $ jQuery-like shadow dom selector\n  * @prop {function(string): NodeList} $$  jQuery-like shadow dom multi-selector\n  * @prop {boolean} connected False until connectedCallback finishes\n  * @prop {string} name Placeholder for the optional name attribute\n  * @prop {object} opts This components controllable options - get/set using the `config()` method\n  * \n  * @prop {string} version Getter that returns the class version & baseVersion static strings.\n\n * Other props:\n  * By default, all attributes are also created as properties\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass TiBaseComponent extends HTMLElement {\n    /** Component version */\n    static baseVersion = '2025-01-13'\n\n    /** Holds a count of how many instances of this component are on the page that don't have their own id\n     * Used to ensure a unique id if needing to add one dynamically\n     */\n    static _iCount = 0\n\n    /** Is UIBUILDER for Node-RED loaded? */\n    uib = !!window['uibuilder']\n    uibuilder = window['uibuilder']\n\n    /** Mini jQuery-like shadow dom selector (see constructor)\n     * @type {function(string): Element}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {Element} The first element that matches the specified selector.\n     */\n    $\n    /** Mini jQuery-like shadow dom multi-selector (see constructor)\n     * @type {function(string): NodeList}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {NodeList} A STATIC list of all shadow dom elements that match the selector.\n     */\n    $$\n\n    /** True when instance finishes connecting.\n     * Allows initial calls of attributeChangedCallback to be\n     * ignored if needed. */\n    connected = false\n\n    /** Placeholder for the optional name attribute @type {string} */\n    name\n\n    /** Runtime configuration settings @type {object} */\n    opts = {}\n\n    /** Report the current component version string */\n    static get version() {\n        // @ts-ignore\n        return `${this.componentVersion} (Base: ${this.baseVersion})`\n    }\n\n    // get id() {\n    //     return this.id\n    // }\n\n    // set id(value) {\n    //     // this.id = value\n    //     console.log('>> SETTING ID:', value, this.id, this.getAttribute('id'))\n    // }\n\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n    }\n\n    /** Optionally apply an external linked style sheet (called from connectedCallback)\n     * @param {*} url The URL for the linked style sheet\n     */\n    async doInheritStyles() {\n        if (!this.hasAttribute('inherit-style')) return\n\n        let url = this.getAttribute('inherit-style')\n        if (!url) url = './index.css'\n\n        const linkEl = document.createElement('link')\n        linkEl.setAttribute('type', 'text/css')\n        linkEl.setAttribute('rel', 'stylesheet')\n        linkEl.setAttribute('href', url)\n        // @ts-ignore\n        this.shadowRoot.appendChild(linkEl)\n\n        console.info(`[${this.localName}] Inherit-style requested. Loading: \"${url}\"`)\n    }\n\n    /** OPTIONAL. Update runtime configuration, return complete config\n     * @param {object|undefined} config If present, partial or full set of options. If undefined, fn returns the current full option settings\n     */\n    config(config) {\n        // Merge config but ensure that default states always present\n        // if (config) this.opts = { ...this.opts, ...config }\n        if (config) this.opts = TiBaseComponent.deepAssign(this.opts, config)\n        return this.opts\n    }\n\n    /** Utility object deep merge fn\n     * @param {object} target Merge target object\n     * @param  {...object} sources 1 or more source objects to merge\n     * @returns {object} Deep merged object\n     */\n    static deepAssign(target, ...sources) {\n        for (let source of sources) { // eslint-disable-line prefer-const\n            for (let k in source) { // eslint-disable-line prefer-const\n                const vs = source[k]\n                const vt = target[k]\n                if (Object(vs) == vs && Object(vt) === vt) { // eslint-disable-line eqeqeq\n                    target[k] = TiBaseComponent.deepAssign(vt, vs)\n                    continue\n                }\n                target[k] = source[k]\n            }\n        }\n        return target\n    }\n\n    /** Ensure that the component instance has a unique ID & check again if uib loaded */\n    ensureId() {\n        // Check again if UIBUILDER for Node-RED is loaded\n        this.uib = !!window['uibuilder']\n\n        if (!this.id) {\n            // if (!this.name) this.name = this.getAttribute('name')\n            // if (this.name) this.id = this.name.toLowerCase().replace(/\\s/g, '_')\n            // else this.id = `${this.localName}-${++this.constructor._iCount}`\n            // @ts-ignore\n            this.id = `${this.localName}-${++this.constructor._iCount}`\n        }\n    }\n\n    /** Creates the $ and $$ fns that do css selections against the shadow dom */\n    createShadowSelectors() {\n        this.$ = this.shadowRoot?.querySelector.bind(this.shadowRoot)\n        this.$$ = this.shadowRoot?.querySelectorAll.bind(this.shadowRoot)\n    }\n\n    /** Handle a `${this.localName}::${this.id}` custom event\n     * Each prop in the msg.payload is set as a prop on the component instance.\n     * @param {object} msg A uibuilder message object\n     */\n    _uibMsgHandler(msg) {\n        // if msg.payload is not an object, ignore\n        if (typeof msg.payload !== 'object') {\n            console.warn(`[${this.localName}] Ignoring msg, payload is not an object:`, msg)\n            return\n        }\n\n        // set properties from the msg\n        Object.keys(msg.payload).forEach(key => {\n            if (key.startsWith('_')) return\n            this[key] = msg.payload[key]\n        })\n    }\n\n    /** Custom event dispacher `component-name:name` with detail data\n     * @example\n     *   this._event('ready')\n     * @example\n     *   this._event('ready', {age: 42, type: 'android'})\n     *\n     * @param {string} evtName A name to give the event, added to the component-name separated with a :\n     * @param {*=} data Optional data object to pass to event listeners via the evt.detail property\n     */\n    _event(evtName, data) {\n        this.dispatchEvent(new CustomEvent(`${this.localName}:${evtName}`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name,\n                data: data,\n            },\n        } ) )\n    }\n\n    /** Send a message to the Node-RED server via uibuilder if available\n     * NB: These web components are NEVER dependent on Node-RED or uibuilder.\n     * @param {string} evtName The event name to send\n     * @param {*} data The data to send\n     */\n    uibSend(evtName, data){\n        if (this.uib) this.uibuilder.send({\n            topic: `${this.localName}:${evtName}`,\n            payload: data,\n            id: this.id,\n            name: this.name,\n        })\n    }\n\n    /** Standardised constructor. Keep after call to super()\n     * @param {Node|string} template Nodes/string content that will be cloned into the shadow dom\n     * @param {{mode:'open'|'closed',delegatesFocus:boolean}=} shadowOpts Options passed to attachShadow\n     */\n    _construct(template, shadowOpts) {\n        if (!shadowOpts) shadowOpts = { mode: 'open', delegatesFocus: true }\n        // Only attach the shadow dom if code and style isolation is needed\n        this.attachShadow(shadowOpts)\n            .append(template)\n\n        // jQuery-like selectors but for the shadow. NB: Returns are STATIC not dynamic lists\n        this.createShadowSelectors()  // in base class\n    }\n\n    /** Standardised connection. Call from the start of connectedCallback fn */\n    _connect() {\n        // Make sure instance has an ID. Create an id from name or calculation if needed\n        this.ensureId()  // in base class\n        // Apply parent styles from a stylesheet if required - only required if using an applied template\n        this.doInheritStyles()  // in base class\n\n        // Listen for a uibuilder msg that is targetted at this instance of the component\n        if (this.uib) this.uibuilder.onTopic(`${this.localName}::${this.id}`, this._uibMsgHandler.bind(this) )\n    }\n\n    /** Standardised disconnection. Call from the END of disconnectedCallback fn */\n    _disconnect() {\n        // @ts-ignore Remove optional uibuilder event listener\n        document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler )\n\n        // Keep at end. Let everyone know that an instance of the component has been disconnected\n        this._event('disconnected')\n    }\n\n    /** Call from end of connectedCallback */\n    _ready() {\n        this.connected = true\n        this._event('connected')\n        this._event('ready')\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default TiBaseComponent\n\n// This is a library class so don't self-register, it is only for inclusion in actual components\n", "/** A zero dependency custom lightweight web component that builds a table from data\n * Version: See the class code\n **/\n/** Copyright (c) 2024-2024 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\n/** TODO\n * - Add row ID (R1, ...) - add col ID (C1, ...)\n * - Process set cols to override auto-cols\n * - allow for sparse data (use #data cols instead of #cols)\n * - allow updating of specific rows or cells in the data - auto-update visuals\n *    - Maybe a row setter and a cell setter\n * - Allow deleting of rows/columns\n * - Allow moving rows/columns\n * - Allow adding rows/columns\n * - Add uibuilder handlers: uib-var\n * - Save altered data - allow saving to browser storage\n * - Custom event on changed data (data, row, cell, column)\n * - tfoot\n * - Multiple thead's with spans\n * - cell overrides with spans\n * - caption\n * - table number\n * - allow cell values as HTML (add reminder about using sanitise)\n * - may need to allow for manual reset of column data\n * - add method setValueByCellId\n * - allow changes to dom to be reflected into the data\n *\n * These are a LOT more advanced and will take time to work out:\n * - Allow dynamic styling\n * - Allow dynamic data calculations\n *\n * QUESTIONS\n * - What about using a set or map instead of array/object\n * - What happens when adding both new row/col (objects)\n * - What happens when pushing both new row/col (array)\n */\n\nimport TiBaseComponent from '../libs/ti-base-component'\n\n/** Only use a template if you want to isolate the code and CSS */\n// const template = document.createElement('template')\n// template.innerHTML = /*html*/`\n//     <style>\n//         :host {\n//         }\n\n//         /* Small screen (37.5em @ 16pt is about 600px) */\n//         @media all and (max-width: 37.5em) {\n//             :host {\n//             }\n//         }\n//     </style>\n//     <div><slot></slot></div>\n// `\n\n/** Namespace\n * @namespace Alpha\n */\n\n// Define the class and make it the default export\n/**\n * @class\n * @extends TiBaseComponent\n * @description A zero dependency custom lightweight web component that builds an HTML table from data\n *\n * @element smart-table\n * @memberOf Alpha\n\n * METHODS FROM BASE:\n * @method config Update runtime configuration, return complete config\n * @method createShadowSelectors Creates the jQuery-like $ and $$ methods\n * @method deepAssign Object deep merger\n * @method doInheritStyles If requested, add link to an external style sheet\n * @method ensureId Adds a unique ID to the tag if no ID defined.\n * @method _uibMsgHandler Not yet in use\n * @method _event(name,data) Standardised custom event dispatcher\n * @method _ready Call from end of connectedCallback. Sets connected prop and outputs events\n\n * OTHER METHODS:\n * @method getCellById Get an HTML element reference to a cell using `RxCx` referencing\n * @method getValueByCellId Get the data value of a cell using `RxCx` referencing\n * @method getValueByOffset(obj,rowOffset,colOffset) Get the data value of a cell in an tabular array/object using row/column numbers\n\n * @fires smart-table:connected - When an instance of the component is attached to the DOM. `evt.details` contains the details of the element.\n * @fires smart-table:ready - Alias for connected. The instance can handle property & attribute changes\n * @fires smart-table:disconnected - When an instance of the component is removed from the DOM. `evt.details` contains the details of the element.\n * @fires smart-table:attribChanged - When a watched attribute changes. `evt.details` contains the details of the change.\n * NOTE that listeners can be attached either to the `document` or to the specific element instance.\n\n * Standard watched attributes (common across all my components):\n * @attr {string} name - Optional. HTML name attribute. Included in output _meta prop.\n\n * Other watched attributes:\n * None\n\n * Standard props (common across all my components):\n * @prop {number} _iCount Static. The component version string (date updated)\n * @prop {boolean} uib True if UIBUILDER for Node-RED is loaded\n * @prop {boolean} connected False until connectedCallback finishes\n * @prop {string} name Placeholder for the optional name attribute\n *\n * @prop {string} version Static. The component version string (date updated). Also has a getter that returns component and base version strings.\n\n * Other props:\n * @prop {object|array} data Data to build table. Can be an array of objects, an object of objects or an array of arrays. Must be 2d (tabular)\n * @prop {object} cols Override the column metadata. If not supplied, cols is built from the first entry of the data array/object\n *\n * @prop {HTMLTableElement} elThead Reference to the thead element\n * @prop {HTMLTableElement} elTfoot Reference to the tfoot element\n * @prop {HTMLTableElement} elTbody Reference to the tbody element\n * By default, all attributes are also created as properties\n\n * @slot None, this component does not use the shadow dom\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass SmartTable extends TiBaseComponent {\n    /** Component version */\n    static componentVersion = '2024-10-06'\n\n    /** Makes HTML attribute change watched\n     * @returns {Array<string>} List of all of the html attribs (props) listened to\n     */\n    static get observedAttributes() {\n        return [\n            // Standard watched attributes:\n            'inherit-style', 'name',\n            // Other watched attributes:\n        ]\n    }\n\n    /** PRIVATE: A copy of the provided data @type {object|array} */\n    #data\n    /** PRIVATE: Column metadata for the table @type {object} */\n    #cols\n    /** Reference to table head @type {HTMLTableElement} */\n    elThead\n    /** Reference to table foot @type {HTMLTableElement} */\n    elTfoot\n    /** Reference to table body @type {HTMLTableElement} */\n    elTbody\n\n    /** Set the value to show */\n    set data(val) {\n        // console.log('set data', val)\n\n        if (val === null) return\n        if (val === this.#data) return\n\n        this.#data = this._createProxy(val)\n\n        // If cols not set, Build cols from 1st entry\n        if (!this.#cols) this._buildCols(true)\n\n        this._buildHeadings()\n        this._buildRows()\n\n        // this.#outputEl.textContent = val\n        // this.setAttribute('value', val)\n    }\n\n    /** Get the current shown value */\n    get data() {\n        return this.#data\n    }\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() { // eslint-disable-line no-useless-constructor\n        super()\n        // Only attach the shadow dom if code and style isolation is needed - comment out if shadow dom not required\n        // this._construct(template.content.cloneNode(true))\n\n        // this.#outputEl = this.shadowRoot.querySelector('output')\n    }\n\n    /** Runs when an instance is added to the DOM */\n    connectedCallback() {\n        this._connect() // Keep at start.\n\n        // this.label =  this.getAttribute('label')\n\n        // Create the table outline structure: table, thead, tfoot, tbody\n        this._buildTblOutline()\n\n        this._ready() // Keep at end. Let everyone know that a new instance of the component has been connected & is ready\n    }\n\n    /** Runs when an instance is removed from the DOM */\n    disconnectedCallback() {\n        this._disconnect() // Keep at end.\n    }\n\n    // Runs when an observed attribute changes - Note: values are always strings\n    attributeChangedCallback(attrib, oldVal, newVal) {\n        /** Optionally ignore attrib changes until instance is fully connected\n         * Otherwise this can fire BEFORE everthing is fully connected.\n         */\n        if (!this.connected) return\n\n        // Don't bother if the new value same as old\n        if ( oldVal === newVal ) return\n        // Create a property from the value - WARN: Be careful with name clashes\n        this[attrib] = newVal\n\n        // Add other dynamic attribute processing here.\n        // If attribute processing doesn't need to be dynamic, process in connectedCallback as that happens earlier in the lifecycle\n\n        // Keep at end. Let everyone know that an attribute has changed for this instance of the component\n        this._event('attribChanged', { attribute: attrib, newVal: newVal, oldVal: oldVal })\n    }\n\n    /** Allows access to a cell using numeric row/col offsets\n     * @param {object|array} obj The 2d object to search\n     * @param {number} rowOffset The row offset\n     * @param {number} colOffset The column offset\n     * @returns {*} Cell value\n     */\n    getValueByOffset(obj, rowOffset, colOffset) {\n        const rowKeys = Object.keys(obj)\n        const colKeys = Object.keys(obj[rowKeys[rowOffset]])\n\n        const rowKey = rowKeys[rowOffset]\n        const colKey = colKeys[colOffset]\n\n        return obj[rowKey][colKey]\n    }\n\n    /** Get an element reference from an RxCx cell reference\n     * @param {string} cellId The RxCx cell reference required\n     * @returns {HTMLTableCellElement|null} The HTML table cell element if found\n     */\n    getCellById(cellId) {\n        const el = this.elTbody.querySelector(`td[data-cell=\"${cellId}\"]`)\n        if (!el) {\n            console.warn(`[${this.localName}:getCellById:${this.id}] Invalid cell reference \"${cellId}\"`)\n        }\n        // @ts-ignore\n        return el\n    }\n\n    /** Get the value of a data cell using RxCx referencing\n     * @param {string} cellId The RxCx cell reference required\n     * @returns {*} The value of the cell if found else Null or Undefined\n     */\n    getValueByCellId(cellId) {\n        let [, row, col,] = cellId.split(/^R(\\d+)C(\\d+)$/ig)\n        // @ts-ignore\n        row = Number(row) - 1\n        // @ts-ignore\n        col = Number(col) - 1\n        if (Number.isNaN(row) || Number.isNaN(col)) {\n            console.warn(`[${this.localName}:getValueByCellId:${this.id}] Invalid cell reference \"${cellId}\"`)\n            return null\n        }\n        // @ts-ignore\n        return this.getValueByOffset(this.#data, row, col)\n    }\n\n    _createProxy(data, parentKey = null) {\n        return new Proxy(data, {\n            get: (target, prop) => {\n                const value = target[prop]\n                // If it's an array or object (row or cell), create a proxy for it too\n                if (Array.isArray(value) || (typeof value === 'object' && value !== null)) {\n                    // Prevent going >1 level deep - e.g. only deal with 2d data\n                    if (parentKey !== null) {\n                        console.warn(`[${this.localName}:_createProxy:${this.id}] Data is >2d. Can only deal with 2d (tabular) data.`)\n                        return value\n                    } else return this._createProxy(value, prop)\n                } else {\n                    return value\n                }\n            },\n\n            set: (target, prop, value) => {\n                const isNewProperty = !(prop in target) // Detect addition\n                // Intercept changes to rows or cells\n                target[prop] = value\n\n                if (isNewProperty) {\n                    // console.log(`New property added: ${parentKey ? parentKey + '.' : ''}${String(prop)}`)\n                    this._onDataChange(parentKey, prop, value, 'added') // Handle addition\n                } else {\n                    // console.log(`Data at ${parentKey}.${String(prop)} has changed to`, value)\n                    this._onDataChange(parentKey, prop, value, 'modified') // Handle modification\n                }\n\n                return true\n            },\n\n            deleteProperty: (target, prop) => {\n                const deletedValue = target[prop]\n                const success = delete target[prop]\n\n                if (success) {\n                    // console.log(`Property deleted: ${parentKey ? parentKey + '.' : ''}${String(prop)}`)\n                    this._onDataChange(parentKey, prop, deletedValue, 'deleted') // Handle deletion\n                }\n\n                return success\n            }\n        })\n    }\n\n    // Method to handle data changes (cell or row)\n    _onDataChange(parentKey, prop, value, changeType) {\n        // Perform any actions needed when a cell or row changes\n\n        // if prop === 'length' then an array has changed\n        // BUT objects don't report on size changes\n\n        // if (parentKey === null) {\n        //     console.log(`ROW ${changeType}: Row: ${prop}, Value: `, value)\n        // } else {\n        //     console.log(`CELL ${changeType}: Row: ${parentKey}, Column: ${prop}, Value: `, value)\n        // }\n\n        // TODO REPLACE this total rebuild with something more nuanced\n        this.elThead.replaceChildren('')\n        this.elTfoot.replaceChildren('')\n        this.elTbody.replaceChildren('')\n        // If cols not set, Build cols from 1st entry\n        if (!this.#cols) this._buildCols(true)\n        this._buildHeadings()\n        this._buildRows()\n    }\n\n    /** Builds the table outline and prepends to the component tag */\n    _buildTblOutline() {\n        const tblEl = document.createElement('table')\n        tblEl.innerHTML = /*html*/`\n        <thead></thead>\n        <tfoot></tfoot>\n        <tbody></tbody>\n        `\n        this.prepend(tblEl)\n\n        // Get references to the various table parts for convenience\n        this.elThead = tblEl.getElementsByTagName('thead')[0]\n        this.elTfoot = tblEl.getElementsByTagName('tfoot')[0]\n        this.elTbody = tblEl.getElementsByTagName('tbody')[0]\n    }\n\n    /** Build the column metadata\n     * @param {boolean} fromData If true, calculate the columns from the data\n     */\n    _buildCols(fromData) {\n        this.#cols = {}\n        const firstRow = this.#data[Object.keys(this.#data)[0]]\n        // If 1st row is an array - simulate column names\n        if ( Array.isArray(firstRow) ) {\n            firstRow.forEach( (col, i) => {\n                const colname = `C${i + 1}`\n                this.#cols[colname] = {\n                    id: colname,\n                    name: `Column ${i + 1}`,\n                    type: typeof col,\n                    title: undefined,\n                }\n            })\n        } else {\n            Object.keys(firstRow).forEach( col => {\n                this.#cols[col] = {\n                    id: col,\n                    name: col,\n                    type: typeof col,\n                    title: undefined,\n                }\n            })\n        }\n        // console.log(this.id, this.#cols )\n    }\n\n    _buildHeadings() {\n        const rowHeadId = 'H1R1'\n        const rowEl = document.createElement('tr')\n        rowEl.dataset.row = rowHeadId\n\n        Object.keys(this.#cols).forEach( (col, i) => {\n            // console.log(i, col)\n            const colEl = document.createElement('th')\n            colEl.dataset.row = rowHeadId\n            colEl.dataset.col = this.#cols[col].id\n            colEl.innerText = this.#cols[col].name\n            rowEl.appendChild(colEl)\n        })\n        this.elThead.appendChild(rowEl)\n    }\n\n    _buildRows() {\n        Object.keys(this.#data).forEach( (row, i) => {\n            this._buildRow(i, row, this.#data[row])\n        })\n    }\n\n    _buildRow(i, row, rowData) {\n        const rowNum = Number(row)\n        const rowId = Number.isNaN(rowNum) ? row : `R${rowNum + 1}`\n        const rowEl = document.createElement('tr')\n        rowEl.dataset.row = rowId\n\n        // console.log(this.id, i, row, rowId, this.#data[row])\n\n        Object.keys(this.#cols).forEach( (col, j) => {\n            // console.log(i, col)\n            const colEl = document.createElement('td')\n            colEl.dataset.row = rowId\n            colEl.dataset.col = this.#cols[col].id\n            // colEl.dataset.cell = `${rowId}:${this.#cols[col].id}`\n            colEl.dataset.cell = `R${i + 1}C${j + 1}`\n            colEl.innerText = this.#data[row][col] === undefined ? this.#data[i][j] : this.#data[row][col]\n            rowEl.appendChild(colEl)\n        })\n        this.elTbody.appendChild(rowEl)\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default SmartTable\n\n/** Self register the class to global\n * Enables new data lists to be dynamically added via JS\n * and lets the static methods be called\n */\nwindow['SmartTable'] = SmartTable\n\n// Self-register the HTML tag\ncustomElements.define('smart-table', SmartTable)\n"],
  "mappings": "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",
  "names": ["TiBaseComponent", "_TiBaseComponent", "url", "linkEl", "config", "target", "sources", "source", "k", "vs", "vt", "msg", "key", "evtName", "data", "template", "shadowOpts", "ti_base_component_default", "SmartTable", "ti_base_component_default", "#data", "#cols", "val", "attrib", "oldVal", "newVal", "obj", "rowOffset", "colOffset", "rowKeys", "colKeys", "rowKey", "colKey", "cellId", "el", "row", "col", "data", "parentKey", "target", "prop", "value", "isNewProperty", "deletedValue", "success", "changeType", "tblEl", "fromData", "firstRow", "i", "colname", "rowHeadId", "rowEl", "colEl", "rowData", "rowNum", "rowId", "j", "smart_table_default"]
}
