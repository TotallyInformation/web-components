{
  "version": 3,
  "sources": ["../../alpha/state-timeline.js"],
  "sourcesContent": ["// ts-nocheck\n/** A zero dependency web component that will display JavaScript console output on-page.\n *\n * @version - see class var\n *\n * @example\n *  <div id=\"more\">\n *    <visible-console></visible-console>\n *  </div>\n */\n/*\n  Copyright (c) 2024-2024 Julian Knight (Totally Information)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\n// ! STATUS: Alpha\n\n/** TODO\n * ! Probably need to make the timeline a FIXED timespan (can be a moving fixed span) so widths can be pre-calculated and not change.\n * - std parts\n *   - topic, var - should default to the instance id - std schema: msg. payload=slot, .value, .config, .attributes\n *   - [x] inherit-style - Optional attrib text is the link to import - else import ./index.css\n *   - All should allow default (no value) and string inputs\n *   [x] config fn\n *   [x] get version\n * - Start/end state times\n * - multi-entries (e.g. send cache)\n * - multi-timelines - data-set attrib\n * - State labels\n * - axis labels\n * - limits: # & time\n * - Add attibs: data-start, data-end\n * - Track previous entry and auto-add data-end if needed\n * - Add chart start/end ts\n * - Add null state when offline\n * - undefined for start and coming back online, null only for offline\n *\n * Refs:\n * https://flows.nodered.org/flow/3827f07ed08826b01bd71b2c874f7fdc\n * https://github.com/hotNipi/node-red-contrib-ui-state-trail/blob/master/ui-state-trail.js#L27\n */\n\nconst template = document.createElement('template')\ntemplate.innerHTML = /*html*/`\n    <style>\n        :host {\n            margin: 2em;\n        }\n        :root {\n            --base-font-size: 1em;\n        }\n\n        .timeline {\n            display: flex;\n            width: 100%;\n            height: 5em;\n            padding: 1em;\n\n            justify-content: flex-start; /* Ensures items are aligned from the left */\n            /* align-items: center; */\n        }\n    \n        .state {\n            height: 100%;\n            transition: width 0.5s;\n        }\n    </style>\n\n    <div class=\"timeline\"></div>\n`\n\n/**\n * @namespace Alpha\n */\n\n/**\n * @class\n * @extends HTMLElement\n * @description A zero dependency web component that will display JavaScript console output on-page.\n *\n * @element state-timeline\n * @memberOf Alpha\n *\n * @method config Update runtime configuration, return complete config\n * @method doInheritStyles If requested, add link to an external style sheet\n * @method deepAssign Object deep merger\n * method _uibMsgHandler If UIBUILDER for Node-RED is active, auto-handle incoming messages targetted at instance id\n *\n * @fires state-timeline:connected - When an instance of the component is attached to the DOM. `evt.details` contains the details of the element.\n * @fires state-timeline:disconnected - When an instance of the component is removed from the DOM. `evt.details` contains the details of the element.\n * @fires state-timeline:attribChanged - When a watched attribute changes. `evt.details` contains the details of the change.\n * NOTE that listeners can be attached either to the `document` or to the specific element instance.\n *\n * Standard watched attributes (common across all my components):\n * @attr {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n * Other watched attributes:\n * None\n *\n * Standard props (common across all my components):\n * @prop {string} version Static. The component version string (date updated). Also has a getter.\n * @prop {boolean} uib True if UIBUILDER for Node-RED is loaded\n * @prop {function(string): Element} $ jQuery-like shadow dom selector\n * @prop {function(string): NodeList} $$  jQuery-like shadow dom multi-selector\n * @prop {number} _iCount The component version string (date updated)\n * @prop {object} opts This components controllable options - get/set using the `config()` method\n * Other props:\n * By default, all attributes are also created as properties\n *\n * @slot Container contents\n *\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass StateTimeline extends HTMLElement {\n    /** Component version */\n    static version = '2024-09-18'\n\n    //#region --- Class Properties ---\n\n    /** Are we online? */\n    online = navigator.onLine\n    /** Is UIBUILDER loaded? */\n    uib = !!window['uibuilder']\n    /** Mini jQuery-like shadow dom selector (see constructor)\n     * @type {function(string): Element}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {Element} The first element that matches the specified selector.\n     */\n    $\n    /** Mini jQuery-like shadow dom multi-selector (see constructor)\n     * @type {function(string): NodeList}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {NodeList} A STATIC list of all shadow dom elements that match the selector.\n     */\n    $$\n    /** Holds a count of how many instances of this component are on the page\n     * Used to ensure a unique id if needing to add one dynamically\n     */\n    static _iCount = 0\n\n    colors = {\n        'log': 'green',\n        'error': 'red',\n        'warn': 'orange',\n    }\n\n    bgColors = {\n        'info': 'hsl(92, 100, 50, 0.3)',\n        'warn': 'hsl(39, 100, 50, 0.3)',\n        'error': 'hsl(0, 100, 50, 0.3)',\n    }\n\n    icons = {\n        'log': '> ',\n        'info': '\u2139\uFE0F ',\n        'debug': '\uD83E\uDEB2 ',\n        'trace': '\uD83D\uDC53 ',\n        'warn': '\u26A0\uFE0F ',\n        'error': '\u26D4 ',\n    }\n\n    static defaultStates = {\n        'undefined': { name: 'undefined', label: 'Undefined', color: 'darkslategray' },\n        'offline': { name: 'offline', label: 'Offline', color: 'grey' },\n    }\n\n    /** Runtime configuration settings */\n    opts = {\n        /** State schema\n         * @property {object} states Each state ID'd by name\n         * @property {string} states.name Unique name of the state\n         * @property {string} states.label Long label for the state\n         * @property {string} states.color CSS Color specification of timeline state\n         */\n        states: StateTimeline.defaultStates,\n        /** Max # seconds in the timeline display, old entries will be dropped\n         * Set to 0 for unlimited but beware of excessive memory use\n         */\n        timespan: 43200, // 12 hours\n        /** Max # entries allowed in the display, extra's will be dropped */\n        maxEntries: 10000,\n    }\n\n    /** Makes HTML attribute change watched\n     * @returns {Array<string>} List of all of the html attribs (props) listened to\n     */\n    static get observedAttributes() {\n        return ['inherit-style']\n    }\n\n    /** Report the current component version string */\n    get version() {\n        return StateTimeline.version\n    }\n\n    //#endregion --- Class Properties ---\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n\n        this.attachShadow({ mode: 'open', delegatesFocus: true })\n            // Only append the template if code and style isolation is needed\n            .append(template.content.cloneNode(true))\n\n        // jQuery-like selectors but for the shadow. NB: Returns are STATIC not dynamic lists\n        this.$ = this.shadowRoot?.querySelector.bind(this.shadowRoot)\n        this.$$ = this.shadowRoot?.querySelectorAll.bind(this.shadowRoot)\n    }\n\n    /** Runs when an instance is added to the DOM */\n    connectedCallback() {\n        // Make sure instance has an ID. Create an id from name or calculation if needed\n        if (!this.id) {\n            if (!this.name) this.name = this.getAttribute('name')\n            if (this.name) this.id = this.name.toLowerCase().replace(/\\s/g, '_')\n            else this.id = `uib-meta-${++StateTimeline._iCount}`\n        }\n\n        // Check again if UIBUILDER for Node-RED is loaded\n        this.uib = !!window['uibuilder']\n\n        // Apply parent styles from a stylesheet if required\n        if (this.hasAttribute('inherit-style')) {\n            const styleUrl = this.getAttribute('inherit-style')\n            this.doInheritStyles(styleUrl)\n        }\n\n        this.timeline = this.shadowRoot?.querySelector('.timeline')\n        /** LIVE ref to all state divs - updates automatically as new states are added\n         * @type {HTMLCollectionOf<Element>}\n         */\n        this.states = this.timeline?.getElementsByClassName('state')\n\n        // When was this instance connected?\n        this.prevTs = this.firstTs = new Date()\n        // Set initial state to built-in 'undefined'\n        this.updateState('undefined')\n\n        // Listen for on-/off-line and mark state as null\n        window.addEventListener('offline', (e) => {\n            console.warn('OFFLINE')\n            this.online = false\n            // Set state to built-in 'null'\n            this.updateState('offline')\n        })\n        window.addEventListener('online', (e) => {\n            console.warn('ONLINE')\n            this.online = true\n            // Set initial state to built-in 'undefined'\n            this.updateState('undefined')\n        })\n\n        // Keep at end. Let everyone know that a new instance of the component has been connected\n        this.dispatchEvent(new CustomEvent('state-timeline:connected', {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name\n            },\n        } ) )\n    }\n\n    /** Runs when an instance is added to the DOM */\n    disconnectedCallback() {\n        // Keep at end. Let everyone know that an instance of the component has been disconnected\n        this.dispatchEvent(new CustomEvent('state-timeline:disconnected', {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name\n            },\n        } ) )\n    }\n\n    /** Handle watched attributes\n     * NOTE: On initial startup, this is called for each watched attrib set in HTML - BEFORE connectedCallback is called.\n     * Attribute values can only ever be strings\n     * @param {string} attrib The name of the attribute that is changing\n     * @param {string} newVal The new value of the attribute\n     * @param {string} oldVal The old value of the attribute\n     */\n    attributeChangedCallback(attrib, oldVal, newVal) {\n        // Don't bother if the new value same as old\n        if ( oldVal === newVal ) return\n        // Create a property from the value - WARN: Be careful with name clashes\n        this[attrib] = newVal\n\n        // Add other dynamic attribute processing here.\n        // If attribute processing doesn't need to be dynamic, process in connectedCallback as that happens earlier in the lifecycle\n\n        // Keep at end. Let everyone know that an attribute has changed for this instance of the component\n        this.dispatchEvent(new CustomEvent('state-timeline:attribChanged', {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name,\n                attribute: attrib,\n                newVal: newVal,\n                oldVal: oldVal,\n            }\n        } ) )\n    }\n\n    /** OPTIONAL. Update runtime configuration, return complete config\n     * @param {object|undefined} config If present, partial or full set of options. If undefined, fn returns the current full option settings\n     */\n    config(config) {\n        // Merge config but ensure that default states always present\n        // if (config) this.opts = { ...this.opts, ...config }\n        if (config) this.opts = StateTimeline.deepAssign(this.opts, config)\n        return this.opts\n    }\n\n    /** Optionally apply an external linked style sheet (called from connectedCallback)\n     * @param {*} url The URL for the linked style sheet\n     */\n    async doInheritStyles(url) {\n        if (!url) url = './index.css'\n\n        const linkEl = document.createElement('link')\n        linkEl.setAttribute('type', 'text/css')\n        linkEl.setAttribute('rel', 'stylesheet')\n        linkEl.setAttribute('href', url)\n        // @ts-ignore\n        this.shadowRoot.appendChild(linkEl)\n\n        console.info(`[state-timeline] Inherit style requested. Loading: \"${url}\"`)\n    }\n\n    /** Updates the timeline with a new state\n     * @param {string} stateName Name of the state\n     */\n    updateState(stateName) {\n        const config = this.opts\n\n        // date/time of new entry\n        const ts = new Date()\n        const stateDuration = ts - this.prevTs\n\n        // Get a reference to the PREVIOUS entry\n        let prev\n        // No previous? We must be at the start\n        if (this.states.length === 0) {\n            console.log('at the start')\n            // Create a dummy entry\n            prev = {\n                dataset: {\n                    state: 'undefined',\n                    start: this.firstTs.toISOString(),\n                },\n            }\n        } else {\n            prev = this.states.item(this.states.length - 1)\n        }\n        // end of the previous entry is the start of the current\n        prev.dataset.end = ts.toISOString()\n\n        // Find the PREVIOUS state details - that's what we need to show this time\n        const stateInfo = config.states[this.prevState]\n        if (!stateInfo) throw new Error(`[state-timeline] State ${this.prevState} not found`)\n\n        const stateDiv = document.createElement('div')\n        stateDiv.dataset.state = prev.dataset.state\n        stateDiv.dataset.start = ts.toISOString()\n        stateDiv.dataset.end = ''\n        stateDiv.classList.add('state')\n        stateDiv.style.backgroundColor = stateInfo.color\n        // stateDiv.style.flexBasis = '1px' // Initially 0 width\n\n        // @ts-ignore\n        // const elapsed = ts - this.firstTs\n        // const elapsed = ts - this.prevTs\n\n        // @ts-ignore\n        console.info(`${stateName}: elapsed={from-start: ${ts - this.firstTs}, from-prev: ${ts - this.prevTs}}, #=${this.states.length}`)\n\n        // Set the label for each state\n        // const labelDiv = document.createElement('div')\n        // labelDiv.classList.add('label')\n        // labelDiv.textContent = stateInfo.label\n        // stateDiv.appendChild(labelDiv)\n\n        // @ts-ignore Calculate the width of the state based on its duration (fixed 3s in this case)\n        const stateWidth = (stateDuration / config.timespan)\n\n        // @ts-ignore Append the new state to the timeline\n        this.timeline.appendChild(stateDiv)\n\n        // Add a slight delay to allow smooth width transition\n        setTimeout(() => {\n            stateDiv.style.flexBasis = `${stateWidth}%`\n        }, 50)\n\n        // Update the last timestamp & state\n        this.prevTs = ts\n        this.prevState = stateName\n    }\n\n    /** Utility object deep merge fn\n     * @param {object} target Target object to merge into\n     * @param  {...object} sources Source objects to merge\n     * @returns {object} Deep merged object\n     */\n    static deepAssign(target, ...sources) {\n        for (let source of sources) { // eslint-disable-line prefer-const\n            for (let k in source) { // eslint-disable-line prefer-const\n                const vs = source[k]\n                const vt = target[k]\n                if (Object(vs) == vs && Object(vt) === vt) { // eslint-disable-line eqeqeq\n                    target[k] = StateTimeline.deepAssign(vt, vs)\n                    continue\n                }\n                target[k] = source[k]\n            }\n        }\n        return target\n    }\n}\n\n// Make the class the default export so it can be used elsewhere\nexport default StateTimeline\n\n/** Self register the class to global\n * Enables new data to be dynamically added via JS\n * and lets any static methods be called\n */\nwindow['StateTimeline'] = StateTimeline\n\n// Self-register the HTML tag\ncustomElements.define('state-timeline', StateTimeline)\n\n//#region TEST\n\n// Demo of how to use the component\nconst timeline = document.querySelector('state-timeline')\nif (timeline) {\n    window.tiTest = true\n    setInterval(() => {\n        window.tiTest = false\n    }, 9000)\n\n    // Define possible states\n    const statesConfig = {\n        'true': { name: 'true', label: 'ON', color: 'green' },\n        'false': { name: 'false', label: 'OFF', color: 'red' }\n    }\n\n    // Set config for the component (e.g., 30 seconds span)\n    // ts-ignore\n    timeline.config({ states: statesConfig, timespan: 30 })\n\n    // Randomly add \"true\" and \"false\" states every 3 seconds\n    setInterval(() => {\n        if (window.tiTest && navigator.onLine) { // Easily turn on/off the test\n            const randomState = Math.random() > 0.5 ? 'true' : 'false'\n            // const randomState = Math.random() > 0.5 ? 'true' : 'random'\n            // const randomState = Math.random() > 0.5 ? 'true' : 'null'\n            // @ts-ignore\n            timeline.updateState(randomState)\n        }\n    }, 3000)\n} else {\n    console.error('No state-timeline found')\n}\n\n//#endregion\n"],
  "mappings": "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",
  "names": ["template", "StateTimeline", "_StateTimeline", "styleUrl", "e", "attrib", "oldVal", "newVal", "config", "url", "linkEl", "stateName", "ts", "stateDuration", "prev", "stateInfo", "stateDiv", "stateWidth", "target", "sources", "source", "k", "vs", "vt", "state_timeline_default", "timeline", "statesConfig", "randomState"]
}
