(()=>{var c=class l extends HTMLElement{static baseVersion="2025-01-09";static _iCount=0;uib=!!window.uibuilder;uibuilder=window.uibuilder;$;$$;connected=!1;name;opts={};static get version(){return`${this.componentVersion} (Base: ${this.baseVersion})`}constructor(){super()}async doInheritStyles(){if(!this.hasAttribute("inherit-style"))return;let e=this.getAttribute("inherit-style");e||(e="./index.css");let t=document.createElement("link");t.setAttribute("type","text/css"),t.setAttribute("rel","stylesheet"),t.setAttribute("href",e),this.shadowRoot.appendChild(t),console.info(`[${this.localName}] Inherit-style requested. Loading: "${e}"`)}config(e){return e&&(this.opts=l.deepAssign(this.opts,e)),this.opts}static deepAssign(e,...t){for(let s of t)for(let n in s){let i=s[n],a=e[n];if(Object(i)==i&&Object(a)===a){e[n]=l.deepAssign(a,i);continue}e[n]=s[n]}return e}ensureId(){this.uib=!!window.uibuilder,this.id||(this.id=`${this.localName}-${++this.constructor._iCount}`)}createShadowSelectors(){this.$=this.shadowRoot?.querySelector.bind(this.shadowRoot),this.$$=this.shadowRoot?.querySelectorAll.bind(this.shadowRoot)}_uibMsgHandler(e){}_event(e,t){this.dispatchEvent(new CustomEvent(`${this.localName}:${e}`,{bubbles:!0,composed:!0,detail:{id:this.id,name:this.name,data:t}}))}_construct(e,t){t||(t={mode:"open",delegatesFocus:!0}),this.attachShadow(t).append(e),this.createShadowSelectors()}_connect(){this.ensureId(),this.doInheritStyles()}_disconnect(){document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`,this._uibMsgHandler),this._event("disconnected")}_ready(){this.connected=!0,this._event("connected"),this._event("ready")}},d=c;var r=document.createElement("template");r.innerHTML=`
    <style>
        :host {
            --value-color: var(--text2, inherit);
            --gauge-background-color: var(--surface2, inherit);
            --on-hue: 0; /* 0 = red, 120 = green, 240 = blue */
            --off-hue: 0;
            --on-sat: 100%;
            --off-sat: 20%;
            --on-lum: 45%;
            --off-lum: 25%;
            --label-color: var(--value-color, inherit);
            
            --segment-count: 10;
            --segment-gap: 0.3rem;
            --gauge-columns: 1fr 1fr;
            --gauge-layout: 
                "label value"
                "segments segments"
                "segvals segvals";
            --value-justification: end;

            contain: content; /* performance boost */
            display: grid;
            width: 100%;
            grid-template-columns: var(--gauge-columns);
            grid-template-areas: var(--gauge-layout);
            padding: 1rem;
            background-color: var(--gauge-background-color);
            color: var(--value-color);
            border-radius: var(--border-radius, 5px);
        }

        
        .segments {
            grid-area: segments;
            display: grid;
            grid-template-columns: repeat(var(--segment-count, 10), 1fr);
            gap: var(--segment-gap);
        }

        .segvals {
            grid-area: segvals;
            display: grid;
            grid-template-columns: 0fr repeat(var(--segment-count, 10), 1fr) 0fr;
            justify-items: start;
            /* margin-left: -.5rem; */
            /* gap: var(--segment-gap); */
        }

        .led {
            background-color: hsl(var(--off-hue, 0), var(--off-sat, 20%), var(--off-lum, 25%));
            height: 20px;
            border-radius: 3px;
            border: 1px solid var(--gauge-background-color);
            cursor: pointer;
        }

        .led.on {
            background-color: hsl(var(--on-hue, 0), var(--on-sat, 100%), var(--on-lum, 45%));
            /* box-shadow: 0 0 5px hsl(var(--on-hue, 0), var(--on-sat, 100%), var(--on-lum, 45%)); */
        }

        slot {
            grid-area: label;
            color: var(--label-color, inherit);
        }
        output {
            grid-area: value;
            justify-self: var(--value-justification, end);
            color: var(--value-color, inherit);
        }
    </style>

    <slot class="label"></slot>
    <output class="value"></output>
    <div class="segments" arial-label="Visual LED Gauge"></div>
    <div class="segvals"></div>
`;var o=class extends d{static componentVersion="2025-01-08";#e=0;#t=10;min=0;max=100;unit="%";colourSegments=[];segmentsEl;segValsEl;valueEl;static get observedAttributes(){return["inherit-style","name","value","min","max","unit","label","label-position","segments","colour-segments"]}set segments(e){let t=e.toString();this.#t=parseInt(t),this.style.setProperty("--segment-count",t),this._renderGauge()}get segments(){return this.#t}set value(e){this.#e=parseFloat(e.toString()),this._renderGauge(),this._event("value-change",{value:this.value})}get value(){return this.#e}constructor(){super(),r&&r.content&&this._construct(r.content.cloneNode(!0))}connectedCallback(){this._connect(),this._renderGauge(),this._ready()}disconnectedCallback(){this._disconnect()}attributeChangedCallback(e,t,s){t!==s&&(this[e]=s,e==="value"&&this.valueChanged(s,t),this._event("attribChanged",{attribute:e,newVal:s,oldVal:t}))}_renderGauge(){this.segmentsEl=this.shadowRoot.querySelector(".segments"),this.segValsEl=this.shadowRoot.querySelector(".segvals"),this.valueEl=this.shadowRoot.querySelector(".value");let e=(this.max-this.min)/this.segments;this.segmentsEl.innerHTML="",this.segValsEl.innerHTML="";for(let s=0;s<this.segments;s++){let n=document.createElement("div");n.classList.add("led");let i=this.min+s*e;if(n.title=i.toString(),s===0){let u=document.createElement("div");this.segValsEl.appendChild(u)}let a=document.createElement("div");if(a.innerText=Math.round(i).toString(),this.colourSegments.length>0){let u=this.colourSegments[s]||"var(--led-off-color)";n.style.backgroundColor=u}this.value>=i&&n.classList.add("on"),n.addEventListener("click",()=>{this._event("segment-click",{gaugeValue:this.value,segment:s,segmentValue:i})}),this.segmentsEl.appendChild(n),this.segValsEl.appendChild(a)}let t=document.createElement("div");this.segValsEl.appendChild(t),t.innerText=this.max.toString(),this.valueEl.innerText=`${this.value}${this.unit}`}valueChanged(e,t){console.log("Value changed",e,t)}},m=o;window.LedGauge=o;customElements.define("led-gauge",o);})();
//# sourceMappingURL=led-gauge.iife.min.js.map
