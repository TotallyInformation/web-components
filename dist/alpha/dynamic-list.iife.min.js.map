{
  "version": 3,
  "sources": ["../../alpha/dynamic-list.js"],
  "sourcesContent": ["\nlet template = document.createElement('template');\ntemplate.innerHTML = /*html*/ `\n    <div>List items:</div>\n    <ul></ul>\n`\n\nlet instanceCount = 0\nconst instance = {}\n\n// Create a GLOBAL var for this component\n// window.dataList = {\n//     count: 0,\n//     instances: {},\n\n    \n\n//     setData: (elementId, elementData) => {\n//         console.log('>> setData this >>', window.dataList.instances[elementId])\n//         // Get ref to element\n//         let el = document.getElementById(elementId)\n\n//         // Set the data\n\n//     },\n// }\n\nexport default class DataList extends HTMLElement {\n    constructor() {\n        super()\n        this.attachShadow({ mode: 'open', delegatesFocus: true })\n            .append(template.content.cloneNode(true))\n\n        \n\n        this._list = this.shadowRoot.querySelector('ul')\n\n        this._entries = {}\n    }\n\n    // Getter/setter for the `data` public property - maps to this._entries\n    set data(val) {\n        this._entries = val\n\n        this._list.innerHTML = ''\n        // Dynamically build the content of the ul/ol\n        Object.keys(this._entries).forEach( (key, i) => {\n            this._list.insertAdjacentHTML('beforeend', `<li id=\"${key}\">${key} :: ${this._entries[key]}</li>`)\n        })\n    }\n    get data() {\n        return this._entries\n    }\n    entry(key, val) {\n        // this._list.innerHTML = ''\n        this._entries[key] = val\n        this.data = this._entries\n\n        let sr = this.shadowRoot.getElementById(key)\n        console.log('>> li key >>', sr)\n\n        \n        // Dynamically build the content of the ul/ol\n        // Object.keys(this._entries).forEach( (key, i) => {\n        //     this._list.insertAdjacentHTML('beforeend', `<li id=\"${key}\">${key} :: ${this._entries[key]}</li>`)\n        // })\n    }\n\n    static get instances() {\n        return instanceCount\n    }\n\n    getInstance(instanceId) {\n        return instance[instanceId]\n    }\n\n    static get observedAttributes() { return [\n        'listvar', 'type',\n    ]}\n\n    attributeChangedCallback(name, oldVal, newVal) {\n\n        if ( oldVal === newVal ) return\n\n        if ( name === 'listvar' && window[newVal] ) {\n            if ( window[newVal] ) {\n\n                this.data = window[newVal]\n                // window.dataList.instances[this.id] = window[newVal]\n                // console.log('>> listvar change >>', this.id, this._entries, window.dataList.instances[this.id])\n                //window[newVal] = new Proxy()\n\n            } else {\n                console.error(`[DataList] window.${newVal} does not exist, ignoring.`)\n            }\n\n            return\n        }\n\n        this[name] = newVal\n\n    } // --- end of attributeChangedCallback --- //\n\n    connectedCallback() {\n        // Keep count of the number of instances\n        instanceCount++\n\n        // If no element id, create an ID that should be unique across all instances\n        if (!this.id) {\n            let myname = this.getAttribute('name')\n            if (myname) this.id = myname.replaceAll(' ', '_')\n            else this.id = `dataList${instanceCount}`\n        }\n\n        // Keep track of each instance\n        instance[this.id] = this\n\n        // Notify Event\n        \n    }\n\n    disconnectedCallback() {\n        // Keep count of the number of instances\n        instanceCount--\n\n        // Keep track of each instance\n        delete instance[this.id]\n    }\n}\n\n/** Self register the class to global\n * Enables new data lists to be dynamically added via JS\n * and lets the static methods be called\n */\nwindow.DataList = DataList\n\n// Export the class as default\n// export default DataList\n\n// Self-register the HTML tag\ncustomElements.define('data-list', DataList)\n"],
  "mappings": "MACA,IAAIA,EAAW,SAAS,cAAc,UAAU,EAChDA,EAAS,UAAqB;AAAA;AAAA;AAAA,EAK9B,IAAIC,EAAgB,EACdC,EAAW,CAAC,EAmBGC,EAArB,cAAsC,WAAY,CAC9C,aAAc,CACV,MAAM,EACN,KAAK,aAAa,CAAE,KAAM,OAAQ,eAAgB,EAAK,CAAC,EACnD,OAAOH,EAAS,QAAQ,UAAU,EAAI,CAAC,EAI5C,KAAK,MAAQ,KAAK,WAAW,cAAc,IAAI,EAE/C,KAAK,SAAW,CAAC,CACrB,CAGA,IAAI,KAAKI,EAAK,CACV,KAAK,SAAWA,EAEhB,KAAK,MAAM,UAAY,GAEvB,OAAO,KAAK,KAAK,QAAQ,EAAE,QAAS,CAACC,EAAKC,IAAM,CAC5C,KAAK,MAAM,mBAAmB,YAAa,WAAWD,CAAG,KAAKA,CAAG,OAAO,KAAK,SAASA,CAAG,CAAC,OAAO,CACrG,CAAC,CACL,CACA,IAAI,MAAO,CACP,OAAO,KAAK,QAChB,CACA,MAAMA,EAAKD,EAAK,CAEZ,KAAK,SAASC,CAAG,EAAID,EACrB,KAAK,KAAO,KAAK,SAEjB,IAAIG,EAAK,KAAK,WAAW,eAAeF,CAAG,EAC3C,QAAQ,IAAI,eAAgBE,CAAE,CAOlC,CAEA,WAAW,WAAY,CACnB,OAAON,CACX,CAEA,YAAYO,EAAY,CACpB,OAAON,EAASM,CAAU,CAC9B,CAEA,WAAW,oBAAqB,CAAE,MAAO,CACrC,UAAW,MACf,CAAC,CAED,yBAAyBC,EAAMC,EAAQC,EAAQ,CAE3C,GAAKD,IAAWC,EAEhB,IAAKF,IAAS,WAAa,OAAOE,CAAM,EAAI,CACnC,OAAOA,CAAM,EAEd,KAAK,KAAO,OAAOA,CAAM,EAMzB,QAAQ,MAAM,qBAAqBA,CAAM,4BAA4B,EAGzE,MACJ,CAEA,KAAKF,CAAI,EAAIE,EAEjB,CAEA,mBAAoB,CAKhB,GAHAV,IAGI,CAAC,KAAK,GAAI,CACV,IAAIW,EAAS,KAAK,aAAa,MAAM,EACjCA,EAAQ,KAAK,GAAKA,EAAO,WAAW,IAAK,GAAG,EAC3C,KAAK,GAAK,WAAWX,CAAa,EAC3C,CAGAC,EAAS,KAAK,EAAE,EAAI,IAIxB,CAEA,sBAAuB,CAEnBD,IAGA,OAAOC,EAAS,KAAK,EAAE,CAC3B,CACJ,EAMA,OAAO,SAAWC,EAMlB,eAAe,OAAO,YAAaA,CAAQ",
  "names": ["template", "instanceCount", "instance", "DataList", "val", "key", "i", "sr", "instanceId", "name", "oldVal", "newVal", "myname"]
}
