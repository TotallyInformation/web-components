{
  "version": 3,
  "sources": ["../../libs/ti-base-component.js", "../../alpha/component-template.js"],
  "sourcesContent": ["/** Define the base component extensions for other components in this package.\n * Used to ensure that standard properties and methods are available in every component.\n *\n * Version: See the class code\n *\n **/\n/** Copyright (c) 2024-2024 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\n/** Namespace\n * @namespace Library\n */\n\n/**\n * @class\n * @extends HTMLElement\n * @description Define the base component extensions for other components in this package.\n *\n * @element ti-base-component\n * @memberOf Library\n *\n * @method config Update runtime configuration, return complete config\n * @method createShadowSelectors Creates the jQuery-like $ and $$ methods\n * @method deepAssign Object deep merger\n * @method doInheritStyles If requested, add link to an external style sheet\n * @method ensureId Adds a unique ID to the tag if no ID defined.\n * @method _uibMsgHandler If UIBUILDER for Node-RED is active, auto-handle incoming messages targetted at instance id\n *\n * Standard watched attributes (common across all my components):\n * @attr {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n * Other watched attributes:\n * None\n *\n * Standard props (common across all my components):\n * @prop {string} baseVersion Static. The component version string (date updated). Also has a getter.\n * @prop {boolean} uib True if UIBUILDER for Node-RED is loaded\n * @prop {function(string): Element} $ jQuery-like shadow dom selector\n * @prop {function(string): NodeList} $$  jQuery-like shadow dom multi-selector\n * @prop {number} _iCount The component version string (date updated)\n * @prop {object} opts This components controllable options - get/set using the `config()` method\n * Other props:\n * By default, all attributes are also created as properties\n *\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass TiBaseComponent extends HTMLElement {\n    /** Component version */\n    static baseVersion = '2024-09-22'\n\n    /** Is UIBUILDER for Node-RED loaded? */\n    uib = !!window['uibuilder']\n    /** Mini jQuery-like shadow dom selector (see constructor)\n     * @type {function(string): Element}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {Element} The first element that matches the specified selector.\n     */\n    $\n    /** Mini jQuery-like shadow dom multi-selector (see constructor)\n     * @type {function(string): NodeList}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {NodeList} A STATIC list of all shadow dom elements that match the selector.\n     */\n    $$\n    /** Holds a count of how many instances of this component are on the page that don't have their own id\n     * Used to ensure a unique id if needing to add one dynamically\n     */\n    static _iCount = 0\n\n    /** Runtime configuration settings */\n    opts = {}\n\n    /** Report the current component version string */\n    get version() {\n        return `${this.constructor.version} (Base: ${this.constructor.baseVersion})`\n    }\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n    }\n\n    /** Optionally apply an external linked style sheet (called from connectedCallback)\n     * @param {*} url The URL for the linked style sheet\n     */\n    async doInheritStyles() {\n        if (!this.hasAttribute('inherit-style')) return\n\n        let url = this.getAttribute('inherit-style')\n        if (!url) url = './index.css'\n\n        const linkEl = document.createElement('link')\n        linkEl.setAttribute('type', 'text/css')\n        linkEl.setAttribute('rel', 'stylesheet')\n        linkEl.setAttribute('href', url)\n        // @ts-ignore\n        this.shadowRoot.appendChild(linkEl)\n\n        console.info(`[${this.localName}] Inherit-style requested. Loading: \"${url}\"`)\n    }\n\n    /** OPTIONAL. Update runtime configuration, return complete config\n     * @param {object|undefined} config If present, partial or full set of options. If undefined, fn returns the current full option settings\n     */\n    config(config) {\n        // Merge config but ensure that default states always present\n        // if (config) this.opts = { ...this.opts, ...config }\n        if (config) this.opts = TiBaseComponent.deepAssign(this.opts, config)\n        return this.opts\n    }\n\n    /** Utility object deep merge fn\n     * @param {object} target Merge target object\n     * @param  {...object} sources 1 or more source objects to merge\n     * @returns {object} Deep merged object\n     */\n    static deepAssign(target, ...sources) {\n        for (let source of sources) { // eslint-disable-line prefer-const\n            for (let k in source) { // eslint-disable-line prefer-const\n                const vs = source[k]\n                const vt = target[k]\n                if (Object(vs) == vs && Object(vt) === vt) { // eslint-disable-line eqeqeq\n                    target[k] = TiBaseComponent.deepAssign(vt, vs)\n                    continue\n                }\n                target[k] = source[k]\n            }\n        }\n        return target\n    }\n\n    /** Ensure that the component instance has a unique ID & check again if uib loaded */\n    ensureId() {\n        // Check again if UIBUILDER for Node-RED is loaded\n        this.uib = !!window['uibuilder']\n\n        if (!this.id) {\n            // if (!this.name) this.name = this.getAttribute('name')\n            // if (this.name) this.id = this.name.toLowerCase().replace(/\\s/g, '_')\n            // else this.id = `${this.localName}-${++this.constructor._iCount}`\n            this.id = `${this.localName}-${++this.constructor._iCount}`\n        }\n    }\n\n    createShadowSelectors() {\n        this.$ = this.shadowRoot?.querySelector.bind(this.shadowRoot)\n        this.$$ = this.shadowRoot?.querySelectorAll.bind(this.shadowRoot)\n    }\n\n    /** Handle a `uibuilder:msg:_ui:update:${this.id}` custom event\n     * @param {CustomEvent} evt uibuilder `uibuilder:msg:_ui:update:${this.id}` custom event evt.details contains the data\n     */\n    _uibMsgHandler(evt) {\n        // If there is a payload, we want to replace the slot - easiest done from the light DOM\n        // if ( evt['detail'].payload ) {\n        //     const el = document.getElementById(this.id)\n        //     el.innerHTML = evt['detail'].payload\n        // }\n        // If there is a payload, we want to replace the VALUE\n        // if ( evt['detail'].payload ) {\n        //     const el = this.shadowRoot.getElementById('value')\n        //     el.innerHTML = evt['detail'].payload\n        // }\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default TiBaseComponent\n\n// This is a library class so don't self-register, it is only for inclusion in actual components\n", "/** Define a new zero dependency custom web component ECMA module that can be used as an HTML tag\n *\n * TO USE THIS TEMPLATE: CHANGE ALL INSTANCES OF 'ComponentTemplate' and 'component-template'\n * For better formatting of HTML in template strings, use VSCode's \"ES6 String HTML\" extension\n *\n * Version: See the class code\n *\n **/\n/** Copyright (c) 2022-2024 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\nimport TiBaseComponent from '../libs/ti-base-component'\n\n/** Only use a template if you want to isolate the code and CSS */\nconst template = document.createElement('template')\ntemplate.innerHTML = /*html*/`\n    <style>\n        :host {\n            display: block;   /* default is inline */\n            contain: content; /* performance boost */\n        }\n    </style>\n    <slot></slot>\n`\n\n/** Namespace\n * @namespace Alpha\n */\n\n/**\n * @class\n * @extends TiBaseComponent\n * @description Define a new zero dependency custom web component ECMA module that can be used as an HTML tag\n *\n * @element component-template\n * @memberOf Alpha\n\n * METHODS FROM BASE:\n * @method config Update runtime configuration, return complete config\n * @method createShadowSelectors Creates the jQuery-like $ and $$ methods\n * @method deepAssign Object deep merger\n * @method doInheritStyles If requested, add link to an external style sheet\n * @method ensureId Adds a unique ID to the tag if no ID defined.\n * @method _uibMsgHandler If UIBUILDER for Node-RED is active, auto-handle incoming messages targetted at instance id\n\n * OTHER METHODS:\n * None\n\n * @fires component-template:connected - When an instance of the component is attached to the DOM. `evt.details` contains the details of the element.\n * @fires component-template:disconnected - When an instance of the component is removed from the DOM. `evt.details` contains the details of the element.\n * @fires component-template:attribChanged - When a watched attribute changes. `evt.details` contains the details of the change.\n * NOTE that listeners can be attached either to the `document` or to the specific element instance.\n\n * Standard watched attributes (common across all my components):\n * @attr {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n\n * Other watched attributes:\n * None\n\n * Standard props (common across all my components):\n * @prop {boolean} uib True if UIBUILDER for Node-RED is loaded. In base class\n * @prop {function(string): Element} $ jQuery-like shadow dom selector. In base class\n * @prop {function(string): NodeList} $$  jQuery-like shadow dom multi-selector. In base class\n * @prop {number} _iCount The component version string (date updated). In base class\n * @prop {object} opts This components controllable options - get/set using the `config()` method. In base class\n *\n * @prop {string} version Static. The component version string (date updated). Also has a getter.\n\n * Other props:\n * By default, all attributes are also created as properties\n\n * @slot Container contents\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass ComponentTemplate extends TiBaseComponent {\n    /** Component version */\n    static version = '2024-09-22'\n\n    /** Makes HTML attribute change watched\n     * @returns {Array<string>} List of all of the html attribs (props) listened to\n     */\n    static get observedAttributes() {\n        return [\n            // Standard watched attributes:\n            'inherit-style',\n            // Other watched attributes:\n        ]\n    }\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n\n        this.attachShadow({ mode: 'open', delegatesFocus: true })\n            // Only append the template if code and style isolation is needed\n            .append(template.content.cloneNode(true))\n\n        // jQuery-like selectors but for the shadow. NB: Returns are STATIC not dynamic lists\n        this.createShadowSelectors()  // in base class\n    }\n\n    /** Runs when an instance is added to the DOM */\n    connectedCallback() {\n        // Make sure instance has an ID. Create an id from name or calculation if needed\n        this.ensureId()  // in base class\n        // Apply parent styles from a stylesheet if required - only required if using an applied template\n        this.doInheritStyles()  // in base class\n\n        // OPTIONAL. Listen for a uibuilder msg that is targetted at this instance of the component\n        if (this.uib) document.addEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler.bind(this) )\n\n        // Keep at end. Let everyone know that a new instance of the component has been connected\n        this.dispatchEvent(new CustomEvent(`${this.localName}:connected`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name\n            },\n        } ) )\n    }\n\n    /** Runs when an instance is removed from the DOM */\n    disconnectedCallback() {\n        // @ts-ignore Remove optional uibuilder event listener\n        document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler )\n\n        // Keep at end. Let everyone know that an instance of the component has been disconnected\n        this.dispatchEvent(new CustomEvent(`${this.localName}:disconnected`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name\n            },\n        } ) )\n    }\n\n    /** Runs when an observed attribute changes - Note: values are always strings\n     * @param {string} attrib Name of watched attribute that has changed\n     * @param {string} oldVal The previous attribute value\n     * @param {string} newVal The new attribute value\n     */\n    attributeChangedCallback(attrib, oldVal, newVal) {\n        // Don't bother if the new value same as old\n        if ( oldVal === newVal ) return\n        // Create a property from the value - WARN: Be careful with name clashes\n        this[attrib] = newVal\n\n        // Add other dynamic attribute processing here.\n        // If attribute processing doesn't need to be dynamic, process in connectedCallback as that happens earlier in the lifecycle\n\n        // Keep at end. Let everyone know that an attribute has changed for this instance of the component\n        this.dispatchEvent(new CustomEvent(`${this.localName}:attribChanged`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name,\n                attribute: attrib,\n                newVal: newVal,\n                oldVal: oldVal,\n            }\n        } ) )\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default ComponentTemplate\n\n/** Self register the class to global\n * Enables new data lists to be dynamically added via JS\n * and lets the static methods be called\n */\nwindow['ComponentTemplate'] = ComponentTemplate\n\n// Self-register the HTML tag\ncustomElements.define('component-template', ComponentTemplate)\n"],
  "mappings": "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",
  "names": ["TiBaseComponent", "_TiBaseComponent", "url", "linkEl", "config", "target", "sources", "source", "k", "vs", "vt", "evt", "ti_base_component_default", "template", "ComponentTemplate", "ti_base_component_default", "attrib", "oldVal", "newVal", "component_template_default"]
}
