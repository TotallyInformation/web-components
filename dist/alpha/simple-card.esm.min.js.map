{
  "version": 3,
  "sources": ["../../alpha/simple-card.js"],
  "sourcesContent": ["/** Define a new zero dependency custom web component ECMA module that can be used as an HTML tag\n *\n * TODO: color const not really needed, convert to make direct changes to style (see theme changer for code)\n *       Use uib-brand.css rather than trying to do local css processing for light/dark\n *       Improve slot change handlers and remove on disconnect\n *       Allow varient for slots not just the card\n *\n * @version 0.2 2022-05-10 Early-release\n *\n * See https://github.com/runem/web-component-analyzer#-how-to-document-your-components-using-jsdoc on how to document\n * Use `npx web-component-analyzer ./components/button-send.js` to create/update the documentation\n *     or paste into https://runem.github.io/web-component-analyzer/\n * Use `npx web-component-analyzer ./components/*.js --format vscode --outFile ./vscode-descriptors/ti-web-components.html-data.json`\n *     to generate/update vscode custom data files. See https://github.com/microsoft/vscode-custom-data/tree/main/samples/webcomponents\n *\n **/\n/**\n * Copyright (c) 2022 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\nconst componentName = 'simple-card'\nconst className = 'SimpleCard'\n\n// function invert(rgb) {\n//     rgb = Array.prototype.join.call(arguments).match(/(-?[0-9\\.]+)/g);\n//     for (let i = 0; i < 3; i++) {\n//         rgb[i] = (i === 3 ? 1 : 255) - rgb[i];\n//     }\n//     return rgb.slice(0,3)\n// }\n\n// Detect browser light/dark mode - See https://stackoverflow.com/a/57795495, attach eventListener if needing to detect change\n// Assume light mode if not dark (could have no preference set)\n// const color = {\n//     mode: 'light',\n//     fg: 'rgb(var(--uib-color-bg-lighter, 0,0,0))',\n//     bg: 'rgba(var(--uib-color-fg, 255,255,255), 1)',\n//     border: 'rgba(255,255,255, .25)',\n//     //footer:\n// }\nconst color = {\n    mode: 'light',\n    fg: 'var(--text2)',\n    bg: 'var(--surface4)',\n    border: 'var(--text4)' // 'rgba(255,255,255, .25)',\n    // footer:\n}\nif ( window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ) {\n    color.mode = 'dark'\n}\n\n// const bgStyle = window.getComputedStyle(document.body.children[0], null)\n// console.log('bgStyle', bgStyle.color, bgStyle.background, bgStyle)\n\n// tagged template - just for syntax highlighting in VSCode\nfunction html(strings, ...keys) {\n    return strings.map( (s, i) => {\n        return s + (keys[i] || '')\n    }).join('')\n}\n\nconst template = document.createElement('template')\ntemplate.innerHTML = html`\n    <style>\n        :host {\n            display: block;\n            border: 1px solid ${color.border};\n            border-radius: 0.5rem;\n            margin: 0.2rem;\n            background-color: ${color.bg};\n            color: ${color.fg};\n            background-clip: border-box;\n            box-sizing: border-box;\n            box-shadow: var(--shadow2);\n        }\n        #header {display: none;}\n        #main   {display: block; padding:1rem 0.5rem;}\n        #footer {display: none}\n    </style>\n    <article>\n        <slot name=\"header\" id=\"header\" role=\"region\" aria-label=\"Card Header\"></slot>\n        <slot id=\"main\" role=\"region\" aria-label=\"Card Main Content\"></slot>\n        <slot name=\"footer\" id=\"footer\" role=\"region\" aria-label=\"Card Footer\"></slot>\n    </article>\n`\n\n// Define the class and make it the default export\n/** A simple card component\n *\n * @element simple-card\n *\n * @fires simple-card:construction - Document object event. evt.details contains the data\n * @fires simple-card:connected - When an instance of the component is attached to the DOM. `evt.details` contains the details of the element.\n * @fires simple-card:disconnected - When an instance of the component is removed from the DOM. `evt.details` contains the details of the element.\n * @fires simple-card:attribChanged - When a watched attribute changes. `evt.details` contains the details of the change.\n * NOTE that listeners can be attached either to the `document` or to the specific element instance.\n *\n * @attr {string} variant - Optional. Sets the cards colour variant\n * attr {string} data-* - Optional. All data-* attributes are returned in the _meta prop as a _meta.data object.\n *\n * @prop {string} variant - Sync'd from name attribute\n * @prop {string|html} slot - Populates the cards default slot content\n * @prop {string|html} header - Populates the cards header slot content\n * @prop {string|html} footer - Populates the cards footer slot content\n *\n * @slot Container contents\n * @slot header - Content to go in the header section of the card\n * @slot footer - Content to go in the footer section of the card\n *\n * csspart ??? - Uses the uib-styles.css uibuilder master for variables where available.\n */\nexport default class SimpleCard extends HTMLElement {\n    // #region ---- Class Variables ----\n\n    name = undefined\n\n    // List of useful properties/attributes\n    static props = [\n        'variant',\n    ]\n\n    /** Standard _ui object to include in msgs */\n    _ui = {\n        type: componentName,\n        event: undefined,\n        id: undefined,\n        name: undefined,\n        data: undefined, // All of the data-* attributes as an object\n    }\n\n    static _iCount = 0\n\n    // #endregion ---- ---- ---- ----\n\n    // #region ---- Utility Functions ----\n\n    /** Mini jQuery-like shadow dom selector\n     * @param {keyof HTMLElementTagNameMap} selection HTML element selector\n     */\n    $(selection) {\n        return this.shadowRoot && this.shadowRoot.querySelector(selection)\n    }\n\n    /** Set colour variant to use as background colour\n     * @param {string} value colour variant to use\n     */\n    _setVariant(value) {\n        switch (value) {\n            case 'information':\n            case 'info': {\n                this.style.setProperty('color', 'var(--text1)')\n                this.style.setProperty('background-color', 'var(--info)')\n                break\n            }\n\n            case 'success': {\n                this.style.setProperty('color', 'var(--text1)')\n                this.style.setProperty('background-color', 'var(--success)')\n                break\n            }\n\n            case 'warn':\n            case 'warning': {\n                this.style.setProperty('color', 'var(--text1)')\n                this.style.setProperty('background-color', 'var(--warning)')\n                break\n            }\n\n            case 'error':\n            case 'failure': {\n                this.style.setProperty('color', 'var(--text1)')\n                this.style.setProperty('background-color', 'var(--failure)')\n                break\n            }\n\n            default: {\n                this.style.removeProperty('color')\n                this.style.removeProperty('background-color')\n                break\n            }\n        }\n    }\n\n    // #endregion ---- ---- ---- ----\n\n    // #region ---- Event Handlers ----\n\n    /** Handle a `uibuilder:msg:_ui:update:${this.id}` custom event\n     * @param {CustomEvent} evt uibuilder `uibuilder:msg:_ui:update:${this.id}` custom event evt.details contains the data\n     */\n    DEPRECATED_uibMsgHandler(evt) {\n\n        // If there is a payload, we want to replace the slot - easiest done from the light DOM\n        if ( evt['detail'].slot ) {\n            const el = document.getElementById(this.id)\n            el.innerHTML = evt['detail'].slot\n        } else if ( evt['detail'].payload ) {\n            const el = document.getElementById(this.id)\n            el.innerHTML = evt['detail'].payload\n        }\n\n        if ( evt['detail'].variant ) {\n            this._setVariant(evt['detail'].variant)\n        }\n\n        if ( evt['detail'].header ) {\n            let el = document.querySelector(`#${this.id} > *[slot=header]`)\n            if ( el ) {\n                // Was found so replace it\n                el.innerHTML = evt['detail'].header\n            } else {\n                // Was not found so create new element\n                el = document.getElementById(this.id)\n                const el2 = document.createElement('div')\n                el2.setAttribute('slot', 'header')\n                el2.innerHTML = evt['detail'].header\n                el.appendChild(el2)\n            }\n        }\n\n        if ( evt['detail'].footer ) {\n            let el = document.querySelector(`#${this.id} > *[slot=footer]`)\n            if ( el ) {\n                // Was found so replace it\n                el.innerHTML = evt['detail'].footer\n            } else {\n                // Was not found so create new element\n                el = document.getElementById(this.id)\n                const el2 = document.createElement('div')\n                el2.setAttribute('slot', 'footer')\n                el2.innerHTML = evt['detail'].footer\n                el.appendChild(el2)\n            }\n        }\n\n    }\n\n    // #endregion ---- ---- ---- ----\n\n    constructor() {\n        super()\n\n        // const bgStyle = window.getComputedStyle(this, null)\n\n        this.attachShadow({ mode: 'open', delegatesFocus: true })\n            .append(template.content.cloneNode(true))\n\n        this.dispatchEvent(new Event(`${componentName}:construction`, { bubbles: true, composed: true }))\n\n    } // ---- end of constructor ---- //\n\n    get variant() {\n        return this.getAttribute('variant')\n    }\n\n    set variant(value) {\n        this.setAttribute('variant', value)\n    }\n\n    // List all attribs we want to observe\n    static get observedAttributes() { return SimpleCard.props }\n\n    // Runs when an observed attribute changes - Note: values are always strings\n    attributeChangedCallback(name, oldVal, newVal) {\n\n        // Don't bother if the new value same as old\n        if (oldVal === newVal) return\n\n        // Create a property from the value - WARN: Be careful with name clashes\n        this[name] = newVal\n\n        this.dispatchEvent(new CustomEvent(`${componentName}:attribChanged`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name,\n                attribute: name,\n                newVal: newVal,\n                oldVal: oldVal,\n            }\n        }))\n\n        if (name === 'variant') {\n            this._setVariant(newVal)\n        }\n\n    } // --- end of attributeChangedCallback --- //\n\n    // Runs when an instance is added to the DOM\n    connectedCallback() {\n        ++SimpleCard._iCount // increment total instance count\n\n        // Invert the heading text/bg colours\n        // const divStyle = window.getComputedStyle(this, null)\n        // Object.assign(this.shadowRoot.querySelector('slot[name=\"header\"]').style, {\n        //     color: color.bg,\n        //     backgroundColor: color.fg,\n        // })\n\n        // Create an id from name or calculation if needed\n        this.name = this.getAttribute('name')\n        if (!this.id) {\n            if (this.name) this.id = this.name.toLowerCase().replace(/\\s/g, '_')\n            else this.id = `${componentName}-${SimpleCard._iCount}`\n        }\n\n        // Listen for a uibuilder msg that is targetted at this instance of the component\n        // document.addEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler.bind(this) )\n\n        // Check if header/footer slots get content and turn on border if so\n        const slots = this.shadowRoot.querySelectorAll('slot')\n        slots[0].addEventListener('slotchange', (e) => {\n            const slot = slots[0]\n            const nodes = slot.assignedNodes()\n            if (nodes.length > 0) {\n                Object.assign(slot.style, {\n                    color: color.bg,\n                    backgroundColor: color.fg,\n                    border: `1px solid ${color.border}`,\n                    borderRadius: '0.5rem 0.5rem 0 0',\n                    // borderBottom: '1px solid silver',\n                    display: 'block',\n                    padding: '1rem 0.5rem',\n                    fontWeight: 'bolder',\n                    fontSize: '120%',\n                })\n            } else slot.style.display = 'none'\n        })\n        slots[2].addEventListener('slotchange', (e) => {\n            const slot = slots[2]\n            const nodes = slot.assignedNodes()\n            if (nodes.length > 0) {\n                Object.assign(slot.style, {\n                    border: `1px solid ${color.border}`,\n                    borderRadius: '0 0 0.5rem 0.5rem',\n                    // borderTop: '1px solid silver',\n                    display: 'block',\n                    padding: '1rem 0.5rem',\n                    fontStyle: 'italic',\n                })\n            } else slot.style.display = 'none'\n        })\n\n        this.dispatchEvent(new CustomEvent(`${componentName}:connected`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name\n            },\n        }))\n\n    } // ---- end of connectedCallback ---- //\n\n    // Runs when an instance is removed from the DOM\n    disconnectedCallback() {\n        // NB: Dont decrement SimpleCard._iCount because that could lead to id nameclashes\n\n        // document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler )\n\n        this.dispatchEvent(new CustomEvent(`${componentName}:disconnected`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name\n            },\n        }))\n\n    } // ---- end of disconnectedCallback ---- //\n\n} // ---- end of Class ---- //\n\n/** Self register the class to global\n * Enables new data lists to be dynamically added via JS\n * and lets the static methods be called\n */\nwindow[className] = SimpleCard\n\n// Self-register the HTML tag\ncustomElements.define(componentName, SimpleCard)\n"],
  "mappings": "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",
  "names": ["componentName", "className", "color", "html", "strings", "keys", "s", "i", "template", "SimpleCard", "_SimpleCard", "selection", "value", "evt", "el", "el2", "name", "oldVal", "newVal", "slots", "e", "slot"]
}
