{
  "version": 3,
  "sources": ["../../alpha/chart-frappe.js"],
  "sourcesContent": ["/** Define a low dependency custom web component ECMA module that can be used as an HTML tag\n *\n * @version 0.1 2022-05-17 Pre-release\n *\n * See: https://web.dev/custom-elements-v1/, https://web.dev/shadowdom-v1/\n *\n * See https://github.com/runem/web-component-analyzer#-how-to-document-your-components-using-jsdoc on how to document\n * Use `npx web-component-analyzer ./components/button-send.js` to create/update the documentation\n *     or paste into https://runem.github.io/web-component-analyzer/\n * Use `npx web-component-analyzer ./components/*.js --format vscode --outFile ./vscode-descriptors/ti-web-components.html-data.json`\n *     to generate/update vscode custom data files. See https://github.com/microsoft/vscode-custom-data/tree/main/samples/webcomponents\n *\n **/\n/**\n * Copyright (c) 2022 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\n// https://frappe.io/charts\n\nimport { Chart } from 'https://cdn.jsdelivr.net/npm/frappe-charts/dist/frappe-charts.esm.js'\n\nconst componentName = 'chart-frappe'\nconst className = 'ChartFrappe'\n\n// just for syntax highlighting in VSCode\nfunction html(strings, ...keys) {\n    return strings.map((s, i) => {\n        return s + (keys[i] || '')\n    }).join('')\n}\n\nconst template = document.createElement('template')\ntemplate.innerHTML = html`\n    <style>\n        :host {\n            @import url(https://cdn.jsdelivr.net/npm/frappe-charts/dist/frappe-charts.min.css);\n            display: block;   /* default is inline */\n            contain: content; /* performance boost */\n            background-color: var(--surface3);\n            width: 100%;\n        }\n        #chart {\n            max-width: 650px;\n            margin: 35px auto;\n        }\n    </style>\n    <div id=\"chart\"></div>\n    <slot></slot>\n`\n\n// Define the class and make it the default export\n/**\n * @element chart-frappe\n *\n * @fires chart-frappe:construction - Document object event. evt.details contains the data\n * @fires chart-frappe:connected - When an instance of the component is attached to the DOM. `evt.details` contains the details of the element.\n * @fires chart-frappe:disconnected - When an instance of the component is removed from the DOM. `evt.details` contains the details of the element.\n * @fires chart-frappe:attribChanged - When a watched attribute changes. `evt.details` contains the details of the change.\n * NOTE that listeners can be attached either to the `document` or to the specific element instance.\n *\n * @attr {string} name - Optional. Will be used to synthesize an ID if no ID is provided.\n * attr {string} data-* - Optional. All data-* attributes are returned in the _meta prop as a _meta.data object.\n *\n * @prop {string} name - Sync'd from name attribute\n *\n * @slot Container contents\n *\n * @csspart ??? - Uses the uib-styles.css uibuilder master for variables where available.\n */\nexport default class ChartFrappe extends HTMLElement {\n    //#region ---- Class Variables ----\n\n    /** Standard _ui object to include in msgs */\n    _ui = {\n        type: componentName,\n        event: undefined,\n        id: undefined,\n        name: undefined,\n        data: undefined, // All of the data-* attributes as an object\n    }\n\n    /** Mini jQuery-like shadow dom selector (see constructor) */\n    $\n\n    /** Holds the name for this instance of the component */\n    name = undefined\n\n    /** Holds a count of how many instances of this component are on the page */\n    static _iCount = 0\n\n    //#endregion ---- ---- ---- ----\n\n    //#region ---- Utility Functions ----\n\n    //#endregion ---- ---- ---- ----\n\n    //#region ---- Event Handlers ----\n\n    /** Handle a `uibuilder:msg:_ui:update:${this.id}` custom event\n     * @param {CustomEvent} evt uibuilder `uibuilder:msg:_ui:update:${this.id}` custom event evt.details contains the data\n     */\n    _uibMsgHandler(evt) {\n        // If there is a payload, we want to replace the slot - easiest done from the light DOM\n        // if ( evt['detail'].payload ) {\n        //     const el = document.getElementById(this.id)\n        //     el.innerHTML = evt['detail'].payload\n        // }\n        // If there is a payload, we want to replace the VALUE\n        // if ( evt['detail'].payload ) {\n        //     const el = this.shadowRoot.getElementById('value')\n        //     el.innerHTML = evt['detail'].payload\n        // }\n    }\n\n    //#endregion ---- ---- ---- ----\n\n    constructor() {\n\n        super()\n        this.attachShadow({ mode: 'open', delegatesFocus: true })\n            .append(template.content.cloneNode(true))\n\n        this.$ = this.shadowRoot.querySelector.bind(this.shadowRoot)\n\n        this.dispatchEvent(new Event(`${componentName}:construction`, { bubbles: true, composed: true }))\n\n    } // ---- end of constructor ----\n\n    // List all attribs we want to observe\n    static get observedAttributes() {\n        return [\n            'name'\n        ]\n    }\n\n    // Runs when an observed attribute changes - Note: values are always strings\n    attributeChangedCallback(name, oldVal, newVal) {\n\n        // Don't bother if the new value same as old\n        if (oldVal === newVal) return\n\n        // Create a property from the value - WARN: Be careful with name clashes\n        this[name] = newVal\n\n        this.dispatchEvent(new CustomEvent(`${componentName}:attribChanged`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name,\n                attribute: name,\n                newVal: newVal,\n                oldVal: oldVal,\n            }\n        }))\n\n    } // --- end of attributeChangedCallback --- //\n\n    // Runs when an instance is added to the DOM\n    connectedCallback() {\n        ++ChartFrappe._iCount // increment total instance count\n\n        // Create an id from name or calculation if needed\n        this.name = this.getAttribute('name')\n        if (!this.id) {\n            if (this.name) this.id = this.name.toLowerCase().replace(/\\s/g, '_')\n            else this.id = `sc-${ChartFrappe._iCount}`\n        }\n\n        // Listen for a uibuilder msg that is targetted at this instance of the component\n        document.addEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler.bind(this))\n\n        const data = {\n            labels: ['12am-3am', '3am-6pm', '6am-9am', '9am-12am',\n                '12pm-3pm', '3pm-6pm', '6pm-9pm', '9am-12am'\n            ],\n            datasets: [\n                {\n                    name: 'Some Data',\n                    chartType: 'bar',\n                    values: [25, 40, 30, 35, 8, 52, 17, -4]\n                },\n                {\n                    name: 'Another Set',\n                    chartType: 'line',\n                    values: [25, 50, -10, 15, 18, 32, 27, 14]\n                }\n            ]\n        }\n        const chart = new Chart(this.shadowRoot.getElementById('chart'), {\n            title: 'My Awesome Chart',\n            data: data,\n            type: 'axis-mixed', // or 'bar', 'line', 'scatter', 'pie', 'percentage'\n            height: 250,\n            // colors: ['#7cd6fd', '#743ee2']\n        })\n\n        this.dispatchEvent(new CustomEvent(`${componentName}:connected`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name\n            },\n        }))\n\n    } // ---- end of connectedCallback ---- //\n\n    // Runs when an instance is removed from the DOM\n    disconnectedCallback() {\n        // NB: Dont decrement SimpleCard._iCount because that could lead to id nameclashes\n\n        // @ts-ignore\n        document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler)\n\n        this.dispatchEvent(new CustomEvent(`${componentName}:disconnected`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name\n            },\n        }))\n\n    } // ---- end of disconnectedCallback ---- //\n\n} // ---- end of Class ---- //\n\n/** Self register the class to global\n * Enables new data lists to be dynamically added via JS\n * and lets the static methods be called\n */\nwindow[className] = ChartFrappe\n\n// Self-register the HTML tag\ncustomElements.define(componentName, ChartFrappe)\n"],
  "mappings": "AAgCA,OAAS,SAAAA,MAAa,uEAEtB,IAAMC,EAAgB,eAChBC,EAAY,cAGlB,SAASC,EAAKC,KAAYC,EAAM,CAC5B,OAAOD,EAAQ,IAAI,CAACE,EAAGC,IACZD,GAAKD,EAAKE,CAAC,GAAK,GAC1B,EAAE,KAAK,EAAE,CACd,CAEA,IAAMC,EAAW,SAAS,cAAc,UAAU,EAClDA,EAAS,UAAYL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqCrB,IAAqBM,EAArB,MAAqBC,UAAoB,WAAY,CAIjD,IAAM,CACF,KAAMT,EACN,MAAO,OACP,GAAI,OACJ,KAAM,OACN,KAAM,MACV,EAGA,EAGA,KAAO,OAGP,OAAO,QAAU,EAajB,eAAeU,EAAK,CAWpB,CAIA,aAAc,CAEV,MAAM,EACN,KAAK,aAAa,CAAE,KAAM,OAAQ,eAAgB,EAAK,CAAC,EACnD,OAAOH,EAAS,QAAQ,UAAU,EAAI,CAAC,EAE5C,KAAK,EAAI,KAAK,WAAW,cAAc,KAAK,KAAK,UAAU,EAE3D,KAAK,cAAc,IAAI,MAAM,GAAGP,CAAa,gBAAiB,CAAE,QAAS,GAAM,SAAU,EAAK,CAAC,CAAC,CAEpG,CAGA,WAAW,oBAAqB,CAC5B,MAAO,CACH,MACJ,CACJ,CAGA,yBAAyBW,EAAMC,EAAQC,EAAQ,CAGvCD,IAAWC,IAGf,KAAKF,CAAI,EAAIE,EAEb,KAAK,cAAc,IAAI,YAAY,GAAGb,CAAa,iBAAkB,CACjE,QAAS,GACT,SAAU,GACV,OAAQ,CACJ,GAAI,KAAK,GACT,KAAM,KAAK,KACX,UAAWW,EACX,OAAQE,EACR,OAAQD,CACZ,CACJ,CAAC,CAAC,EAEN,CAGA,mBAAoB,CAChB,EAAEH,EAAY,QAGd,KAAK,KAAO,KAAK,aAAa,MAAM,EAC/B,KAAK,KACF,KAAK,KAAM,KAAK,GAAK,KAAK,KAAK,YAAY,EAAE,QAAQ,MAAO,GAAG,EAC9D,KAAK,GAAK,MAAMA,EAAY,OAAO,IAI5C,SAAS,iBAAiB,4BAA4B,KAAK,EAAE,GAAI,KAAK,eAAe,KAAK,IAAI,CAAC,EAE/F,IAAMK,EAAO,CACT,OAAQ,CAAC,WAAY,UAAW,UAAW,WACvC,WAAY,UAAW,UAAW,UACtC,EACA,SAAU,CACN,CACI,KAAM,YACN,UAAW,MACX,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,EAAE,CAC1C,EACA,CACI,KAAM,cACN,UAAW,OACX,OAAQ,CAAC,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,EAAE,CAC5C,CACJ,CACJ,EACMC,EAAQ,IAAIhB,EAAM,KAAK,WAAW,eAAe,OAAO,EAAG,CAC7D,MAAO,mBACP,KAAMe,EACN,KAAM,aACN,OAAQ,GAEZ,CAAC,EAED,KAAK,cAAc,IAAI,YAAY,GAAGd,CAAa,aAAc,CAC7D,QAAS,GACT,SAAU,GACV,OAAQ,CACJ,GAAI,KAAK,GACT,KAAM,KAAK,IACf,CACJ,CAAC,CAAC,CAEN,CAGA,sBAAuB,CAInB,SAAS,oBAAoB,4BAA4B,KAAK,EAAE,GAAI,KAAK,cAAc,EAEvF,KAAK,cAAc,IAAI,YAAY,GAAGA,CAAa,gBAAiB,CAChE,QAAS,GACT,SAAU,GACV,OAAQ,CACJ,GAAI,KAAK,GACT,KAAM,KAAK,IACf,CACJ,CAAC,CAAC,CAEN,CAEJ,EAMA,OAAOC,CAAS,EAAIO,EAGpB,eAAe,OAAOR,EAAeQ,CAAW",
  "names": ["Chart", "componentName", "className", "html", "strings", "keys", "s", "i", "template", "ChartFrappe", "_ChartFrappe", "evt", "name", "oldVal", "newVal", "data", "chart"]
}
