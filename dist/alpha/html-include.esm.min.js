var h=document.createElement("template");h.innerHTML=`
    <slot></slot>
    <inner-load></inner-load>
`;var i=class extends HTMLElement{constructor(){super(),this.type="text",this.text="",this.json={},this.attachShadow({mode:"open",delegatesFocus:!0}).appendChild(h.content.cloneNode(!0))}static get observedAttributes(){return["src"]}get src(){return this.getAttribute("src")}set src(s){this.setAttribute("src",s)}async attributeChangedCallback(s,n,a){if(n!==a&&s==="src"){let t=await fetch(a);if(!t.ok)throw new Error(`html-include fetch failed: ${t.statusText}`);let e=t.headers.get("content-type");switch(e&&(e.includes("text/html")?this.type="html":e.includes("application/json")?this.type="json":e.includes("multipart/form-data")&&(this.type="form")),this.type){case"html":{this.text=await t.text();let r=new DOMParser().parseFromString(this.text,"text/html");this.shadowRoot.removeChild(this.shadowRoot.lastElementChild),this.shadowRoot.appendChild(r.body);break}case"json":{this.json=await t.json(),this.text=JSON.stringify(this.json,null,4),this.shadowRoot.removeChild(this.shadowRoot.lastElementChild);let o=document.createElement("pre");o.textContent=this.text,this.shadowRoot.appendChild(o);break}case"form":{this.json=await t.formData(),this.text=JSON.stringify(this.json),this.shadowRoot.removeChild(this.shadowRoot.lastElementChild),this.shadowRoot.append(this.text);break}default:{this.text=await t.text(),this.shadowRoot.append(this.text);break}}}}};customElements.define("html-include",i);export{i as HtmlInclude};
//# sourceMappingURL=html-include.esm.min.js.map
