var l=document.createElement("template");l.innerHTML=`
    <style>
        :host {
            display: inline-block;
        }
        .buttons, .slider, .knob {
            display: none;
        }
        .buttons button {
            margin-right: 5px;
        }
        .slider input[type="range"] {
            width: 100%;
        }
        .knob {
            width: 100px;
            height: 100px;
            background-color: lightgray;
            border-radius: 50%;
            position: relative;
        }
        .knob-handle {
            position: absolute;
            width: 10px;
            height: 50px;
            background-color: darkgray;
            top: 25px;
            left: 45px;
            transform-origin: bottom center;
            transform: rotate(0deg);
        }
        :host([mode="buttons"]) .buttons {
            display: block;
        }
        :host([mode="slider"]) .slider {
            display: block;
        }
        :host([mode="knob"]) .knob {
            display: block;
        }
    </style>

    <div class="buttons"></div>
    <div class="slider">
        <input type="range" min="0" max="100" value="0">
    </div>
    <div class="knob">
        <div class="knob-handle"></div>
    </div>
`;var a=class h extends HTMLElement{uib=!!window.uibuilder;$;static _iCount=0;static get observedAttributes(){return["mode","positions","values"]}constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}).append(l.content.cloneNode(!0)),this.$=this.shadowRoot.querySelector.bind(this.shadowRoot),this._value=0,this.knobRotation=0,this._customValues=[],this.dispatchEvent(new Event("multi-way-switch:construction-complete",{bubbles:!0,composed:!0}))}attributeChangedCallback(t,o,e){o!==e&&(t==="positions"||t==="values")&&(this._setupButtons(),this._setupSlider())}connectedCallback(){this.id||(this.name||(this.name=this.getAttribute("name")),this.name?this.id=this.name.toLowerCase().replace(/\s/g,"_"):this.id=`uib-meta-${++h._iCount}`),this._setupButtons(),this._setupSlider(),this._setupKnob()}get value(){return this._customValues[this._value]||this._value}set value(t){this._value=t,this._updateUI()}_setupButtons(){let t=this.shadowRoot.querySelector(".buttons");t.innerHTML="";let o=Math.max(2,Math.min(parseInt(this.getAttribute("positions"),10),255))||2;this._customValues=this._parseValues(o);for(let e=0;e<o;e++){let s=document.createElement("button");s.textContent=`Pos ${e+1}`,s.addEventListener("click",()=>{this.value=e}),t.appendChild(s)}}_setupSlider(){let t=this.shadowRoot.querySelector('input[type="range"]'),o=Math.max(2,Math.min(parseInt(this.getAttribute("positions"),10),255))||2;t.max=o-1,t.addEventListener("input",()=>{this.value=t.value})}_setupKnob(){let t=this.shadowRoot.querySelector(".knob"),o=this.shadowRoot.querySelector(".knob-handle"),e=Math.max(2,Math.min(parseInt(this.getAttribute("positions"),10),255))||2;t.addEventListener("mousedown",s=>{let n={x:t.offsetLeft+t.offsetWidth/2,y:t.offsetTop+t.offsetHeight/2},i=u=>{let d=u.pageX-n.x,c=u.pageY-n.y;this.knobRotation=Math.atan2(c,d)*(180/Math.PI),o.style.transform=`rotate(${this.knobRotation}deg)`;let p=Math.round((this.knobRotation+180)%360/360*(e-1));this.value=p},r=()=>{window.removeEventListener("mousemove",i),window.removeEventListener("mouseup",r)};window.addEventListener("mousemove",i),window.addEventListener("mouseup",r)})}_parseValues(t){let o=this.getAttribute("values");if(o){let e=o.split(",").map(s=>s.trim());return e.length>=t?e.slice(0,t):[...e,...Array(t-e.length).fill(e[e.length-1])]}return Array.from({length:t},(e,s)=>s)}_updateUI(){let t=this.shadowRoot.querySelector('input[type="range"]');t.value=this._value,this.shadowRoot.querySelectorAll(".buttons button").forEach((n,i)=>{n.style.backgroundColor=i===this._value?"lightblue":""});let e=this.shadowRoot.querySelector(".knob-handle"),s=Math.max(2,Math.min(parseInt(this.getAttribute("positions"),10),255))||2;this.knobRotation=this._value/(s-1)*360-180,e.style.transform=`rotate(${this.knobRotation}deg)`}};window.MultiWaySwitch=a;customElements.define("multi-way-switch",a);
//# sourceMappingURL=multi-way-switch.esm.min.js.map
