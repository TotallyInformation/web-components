(()=>{var e="simple-switch",r="SimpleSwitch",o=document.createElement("template");o.innerHTML=`
    <style>
        :host {
            display: block;   /* default is inline */
            contain: content; /* performance boost */
            .gui-switch {
                --thumb-size: 2rem;
                --thumb: hsl(0 0% 100%);
                --thumb-highlight: hsl(0 0% 0% / 25%);

                --thumb-color: var(--thumb);
                --thumb-color-highlight: var(--thumb-highlight);

                @media (prefers-color-scheme: dark) {
                    --thumb: hsl(0 0% 5%);
                    --thumb-highlight: hsl(0 0% 100% / 25%);
                }

                display: flex;
                flex-direction: row; /* column; */
                align-items: center;
                gap: 2ch;
                justify-content: space-between;
            }
            input {
                width: 0;
                    overflow: hidden;
                    padding-left: 68px;
                    background: #c5c5c5 url() 2px center / auto 32px no-repeat;
                    border-radius: 18px;
                    border: 0;
                    color: transparent;
                    height: 36px;
                    transition: all 0.3s ease-in-out;
            }
            input:not([disabled]) {cursor: pointer;}
            input.active {
                background-color: #8ab82e;
                background-position: calc(100% - 2px) center;
            }
            input.vertical {transform: rotate(-90deg);}
            /* .gui-switch > input {
                appearance: none;

                inline-size: var(--track-size);
                block-size: var(--thumb-size);
                padding: var(--track-padding);

                flex-shrink: 0;
                display: grid;
                align-items: center;
                grid: [track] 1fr / [track] 1fr;
            }
            .gui-switch > input::before {
                content: "";
                grid-area: track;
                inline-size: var(--thumb-size);
                block-size: var(--thumb-size);
                background: var(--thumb-color);
                border-radius: 50%;
            } */
        }
    </style>
    <!-- <label for="switch" class="gui-switch">
        <slot>Label text</slot>
        <input type="checkbox" role="switch" id="switch">
    </label> -->
    <label for="switch" class="gui-switch">
        <slot>Switch me</slot>
        <input type="button" 
            class="switch active" 
            onclick="this.classList.toggle('active');" 
            value="Toggle me" 
            title="Toggle me">
    </label>
`;var t=class n extends HTMLElement{_ui={type:e,event:void 0,id:void 0,name:void 0,data:void 0};$;name=void 0;static _iCount=0;_uibMsgHandler(i){}constructor(){super(),this.attachShadow({mode:"open",delegatesFocus:!0}).append(o.content.cloneNode(!0)),this.$=this.shadowRoot.querySelector.bind(this.shadowRoot),this.dispatchEvent(new Event(`${e}:construction`,{bubbles:!0,composed:!0}))}static get observedAttributes(){return["name"]}attributeChangedCallback(i,a,s){a!==s&&(this[i]=s,this.dispatchEvent(new CustomEvent(`${e}:attribChanged`,{bubbles:!0,composed:!0,detail:{id:this.id,name:this.name,attribute:i,newVal:s,oldVal:a}})))}connectedCallback(){++n._iCount,this.name=this.getAttribute("name"),this.id||(this.name?this.id=this.name.toLowerCase().replace(/\s/g,"_"):this.id=`sc-${n._iCount}`),document.addEventListener(`uibuilder:msg:_ui:update:${this.id}`,this._uibMsgHandler.bind(this)),this.dispatchEvent(new CustomEvent(`${e}:connected`,{bubbles:!0,composed:!0,detail:{id:this.id,name:this.name}}))}disconnectedCallback(){document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`,this._uibMsgHandler),this.dispatchEvent(new CustomEvent(`${e}:disconnected`,{bubbles:!0,composed:!0,detail:{id:this.id,name:this.name}}))}};window[r]=t;customElements.define(e,t);})();
//# sourceMappingURL=simple-switch.iife.min.js.map
