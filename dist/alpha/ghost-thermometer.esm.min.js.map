{
  "version": 3,
  "sources": ["../../alpha/ghost-thermometer.js"],
  "sourcesContent": ["/** A zero dependency web component that will display a circular thermometer display and controller for heating systems.\n * Based on @ghostmaster75's Node-RED Dashboard Widget of the same name: https://flows.nodered.org/flow/9ca3a19e0e2ff606bd64f1e73a2191eb\n *\n * See ./docs/ghost-thermometer.md for detailed documentation on installation and use.\n *\n * @version: 0.0.2 2023-08-12\n *\n * TODO: Add custom events to allow processing of updates in the browser\n *\n * See https://github.com/runem/web-component-analyzer#-how-to-document-your-components-using-jsdoc on how to document\n *\n * Use `npx web-component-analyzer ./components/ghost-thermometer.js` to create/update the documentation\n *     or paste into https://runem.github.io/web-component-analyzer/\n * Use `npx web-component-analyzer ./components/*.js --format vscode --outFile ./vscode-descriptors/ti-web-components.html-data.json`\n *     to generate/update vscode custom data files. See https://github.com/microsoft/vscode-custom-data/tree/main/samples/webcomponents\n *\n * To Do:\n * -\n */\n/*\n  Copyright (c) 2023 Julian Knight (Totally Information)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nconst componentName = 'ghost-thermometer'\nconst className = 'GhostThermometer'\n\n/** Properly round a floating point number (stupid JavaScript!)\n * @param {number} number The number to round\n * @param {number} digits The required decimal places to round to (default=0)\n * @returns {number} Input number rounded to requested DP's\n */\nfunction floatRound(number, digits = 0) {\n    const multiple = Math.pow(10, digits)\n    return Math.round(number * multiple) / multiple\n}\n\nconst template = document.createElement('template')\ntemplate.innerHTML = /** @type {HTMLTemplateElement} */ /*html*/`\n    <style>\n        :host {\n            display: inline-block; /* default is inline */\n            contain: content; /* performance boost */\n            max-width: 400px; width:90%;\n\n            --grey1-color: hsl(0, 0%, 87%); /* #dddddd; Divider line, dial label */\n            --grey2-color: hsl(0, 0%, 53%); /* #888888 */ \n            --grey3-color: hsl(0, 0%, 20%); /* #333333 */\n            --grey4-color: hsl(0, 0%, 12%); /* rgb(30,30,30) */\n            --dark-color: hsl(0, 0%, 0%); /* black; */\n            --grey-blue-color: hsl(218, 4%, 35%); /* rgb(86,89,94) grey-blue */\n            /* --grey-blue-color2: hsl(218, 6%, 25%); #3b3e43 grey-blue2 */\n            --text-color: hsl(0, 0%, 100%); /* #ffffff; */\n            --warn-color: hsl(39, 100%, 50%); /* orange; */\n            --off-color: hsl(0, 1%, 56%); /* rgb(143,141,141) off */\n            --cooling-color: hsl(200, 62%, 58%); /* rgb(81,170,214) cooling, light blue */\n            --heating-color: hsl(30, 100%, 50%); /* rgb(125,128,0) heating, dark orange */\n        }\n\n        svg {\n            transition: all .6s cubic-bezier(0.175, 0.885, 0.32, 1.2);\n        }\n\n        stop {\n            transition: all .5s;\n        }\n\n        .caption { \n            width: 100%;\n            text-align: center;\n        }\n\n        .led {\n            -webkit-transition: all 0.5s;\n            transition: all 0.5s;\n            fill: url(#ledColor);\n        }\n\n        .dial {\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n        }\n\n        .lbl {\n            text-anchor: middle;\n            fill : var(--text-color);\n            clip-path: url(#qClip);\n        }\n        .lblDial {\n            fill: var(--grey1-color);\n        }\n\n        .valMain {\n            font-weight: 400;\n            /* clip-path: url(#qClip); */\n        }\n\n        .lblAmbient tspan {\n            font-weight: 400;\n        }\n\n        .lblTarget {\n            font-weight: 400;\n            fill: var(--warning-intense, --warn-color);\n        }\n\n        .lblTarget tspan {\n            font-weight: 400;\n            fill: var(--warning-intense, --warn-color);\n            clip-path: url(#qClip);\n        }    \n\n        .nodisplay {\n            display: none !important;\n        }\n\n        .animate {\n            transition: all 0.5s;\n        }\n    </style>\n        <svg \n            width=\"100%\" height=\"100%\" viewBox=\"0 0 400 400\" class=\"dial\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        >\n            <defs>\n                <linearGradient id=\"qGradient\" gradientTransform=\"rotate(65)\">\n                    <stop offset=\"50%\" stop-color=\"var(--grey-blue-color)\"></stop>\n                    <stop offset=\"65%\" stop-color=\"var(--grey4-color)\"></stop>\n                </linearGradient>\n                <clipPath id=\"qClip\">\n                    <circle cx=\"200\" cy=\"200\" r=\"175\"></circle>\n                </clipPath>\n                <radialGradient id=\"ledColor\" cx=\"50%\" cy=\"50%\" r=\"95%\" fx=\"50%\" fy=\"50%\">\n                    <stop offset=\"45%\" stop-color=\"var(--off-color)\" stop-opacity=\"1\"></stop>\n                    <stop offset=\"65%\" stop-color=\"var(--dark-color)\" stop-opacity=\"1\"></stop>\n                </radialGradient>\n                <linearGradient id=\"eGradient\" gradientTransform=\"rotate(55)\">\n                    <stop offset=\"55%\" stop-color=\"var(--grey2-color)\" stop-opacity=\"1\"></stop>\n                    <stop offset=\"95%\" stop-color=\"var(--grey3-color)\" stop-opacity=\"1\"></stop>\n                </linearGradient>\n            </defs>\n            <circle cx=\"200\" cy=\"200\" r=\"200\" fill=\"url(#eGradient)\"></circle>\n            <circle cx=\"200\" cy=\"200\" r=\"197\" stroke=\"var(--dark-color)\" stroke-width=\"1\" class=\"led\"></circle>\n            <circle cx=\"200\" cy=\"200\" r=\"180\" fill=\"url(#qGradient)\"></circle>\n            <circle cx=\"200\" cy=\"200\" r=\"175\" fill=\"url(#qGradient)\"></circle>\n            <text x=\"200\" y=\"70\" class=\"lbl lblDial\" id=\"lblMain\">\n                AMBIENT\n            </text>\n            <text x=\"200\" y=\"210\" font-size=\"140\" class=\"lbl valMain\" id=\"valMain\">\n                --\n            </text>\n            <line x1=\"55\" y1=\"235\" x2=\"345\" y2=\"235\" stroke=\"var(--grey1-color)\" stroke-width=\"1\" opacity=\"0.8\"></line>\n            <text x=\"200\" y=\"254\" class=\"lbl\" id=\"lblNote\"> </text>\n            <text x=\"125\" y=\"285\" class=\"lbl lblDial\" id=\"lblLeft\">\n                SET\n            </text>\n            <text x=\"125\" y=\"325\" font-size=\"35\" class=\"lbl lblTarget\" id=\"valLeft\">\n                --\n            </text>\n            <text x=\"275\" y=\"285\" class=\"lbl lblDial\" id=\"lblRight\">\n                MODE\n            </text>\n            <text x=\"275\" y=\"325\" font-size=\"35\" class=\"lbl lblTarget icon\" id=\"valRight\">\n                \u26D4\n            </text>\n            <g>\n                <rect opacity=\"0\" width=\"350\" height=\"200\" x=\"25\" y=\"30\" id=\"clickMain\">\n                    <title id=\"titleMain\">Current ambient temperature</title>\n                </rect>\n            </g>\n            <g transform=\"translate(200,200)\">\n                <path d=\"M0,40 L0,175 A175,175 0 0,1 -175,40 z\" opacity=\"0\" id=\"btnLeft\">\n                    <title id=\"titleLeft\">Current setpoint. Click to change</title>\n                </path>\n                <path d=\"M0,40 L175,40 A175,175 0 0,1 0,175 z\" opacity=\"0\" id=\"btnRight\">\n                    <title id=\"titleRight\">Current mode. Click to change</title>\n                </path>\n            </g>\n        </svg>\n        <div class=\"caption\"><slot></slot></div>\n`\n\n/** A Zero dependency button web component that will display a circular thermometer display and controller for heating systems.\n *  Contains relevant data from data-*, topic and payload attributes (or properties),\n *  includes a _meta object showing whether any modifier keys were used, the element id/name\n *\n * @element button-send\n *\n * @fires button-send:click - Document object event. evt.details contains the data\n * @fires {function} uibuilder.send - Sends a msg back to Node-RED if uibuilder available. topic, payload and _meta props may all be set.\n *\n * @attr {string} topic - Optional. Topic string to use. Mostly for node-red messages\n * @attr {string} payload - Optional. Payload string. Mostly for node-red messages. For non-string payload, see props below\n * @attr {string} id - Optional. HTML ID, must be unique on page. Included in output _meta prop.\n * @attr {string} name - Optional. HTML name attribute. Included in output _meta prop.\n * @attr {string} data-* - Optional. All data-* attributes are returned in the _meta prop as a _meta.data object.\n *\n * @prop {any|string} payload - Can be an attribute or property. If used as property, must not use payload attribute in html, allows any data to be attached to payload. As an attribute, allows a string only.\n * @prop {string} topic - Optional. Topic string to use. Mostly for node-red messages\n * @prop {Array<string>} props - List of watched HtML Attributes\n *\n * @slot default - Button label. Allows text, inline and most block tags to be included (unlike the standard button tag which only allows inline tags).\n *\n * @csspart button - Uses the uib-styles.css uibuilder master for variables where available.\n *\n * See https://github.com/runem/web-component-analyzer#-how-to-document-your-components-using-jsdoc on how to document\n */\nexport default class GhostThermometer extends HTMLElement {\n    //#region --- Class Properties ---\n\n    /** @type {string} topic - Optional. Topic string to use. Mostly for node-red messages */\n    topic = ''\n    /** @type {any|string} payload - Can be an attribute or property. If used as property, must not use payload attribute in html, allows any data to be attached to payload. As an attribute, allows a string only. */\n    payload = ''\n    /** What is the current display mode? */\n    displayMode = 'default'\n\n    // numTemperature = 0\n    // numSetpoint = 0\n    switchState = 'off'\n\n    modes = {\n        heating: {\n            label: 'heating',\n            icon: '\uD83D\uDD25',\n        },\n        cooling: {\n            label: 'cooling',\n            icon: '\u2744\uFE0F',\n        },\n        off: {\n            label: 'off',\n            icon: '\u26D4',\n        },\n    }\n\n    /** Holds a count of how many instances of this component are on the page */\n    static _iCount = 0\n    /** @type {Array<string>} List of all of the html attribs (props) listened to */\n    static props = ['name', 'id', 'temperature', 'setpoint', 'mode']\n\n    //#endregion --- Class Properties ---\n\n    //#region ---- Utility Functions ----\n\n    /** Mini jQuery-like shadow dom selector\n     * @param {string} selection HTML element selector\n     * @returns {HTMLElement | null} The discovered element\n     */\n    $(selection) {\n        return this.shadowRoot && this.shadowRoot.querySelector(selection)\n    }\n\n    /** Convert a string 'true' or 'false' to a boolean true/false\n     * @param {*} strvalue The string representation of the boolean\n     * @returns {boolean}\n     */\n    str2bool(strvalue) {\n        return (strvalue && typeof strvalue === 'string') ? (strvalue.toLowerCase() === 'true') : (strvalue === true)\n    }\n\n    /** Set the note label if required\n     * @param {string} note The text to display\n     * @param {HTMLElement} lblNote Reference to the SVG <text> element containing the text\n     */\n    doNote(note, lblNote) {\n        if ( note === '' ) note = ' '\n        lblNote.childNodes[0].nodeValue = note\n    }\n\n    /** uibuilder send */\n    uibSend() {\n        if (!window['uibuilder']) return\n        window['uibuilder'].send({\n            payload: {\n                id: this.id,\n                temperature: this.numTemperature,\n                switchState: this.switchState,\n                mode: this.mode,\n                setpoint: this.numSetpoint,\n            }\n        })\n    }\n\n    /** When the temp or setpoint changes, check the heating/cooling mode and change if needed */\n    checkMode() {\n        if ( !this.numTemperature || !this.numSetpoint ) return\n\n        if ( this.mode === 'heating' && this.numSetpoint > this.numTemperature ) {\n            this.$('#ledColor > stop:nth-child(1)').setAttribute('stop-color', 'var(--heating-color)')\n            if ( this.switchState !== 'heating') {\n                this.switchState = 'heating'\n                this.uibSend()\n            }\n        } else if ( this.mode === 'cooling' && this.numSetpoint < this.numTemperature ) {\n            this.$('#ledColor > stop:nth-child(1)').setAttribute('stop-color', 'var(--cooling-color)')\n            if ( this.switchState !== 'cooling') {\n                this.switchState = 'cooling'\n                this.uibSend()\n            }\n        } else {\n            this.$('#ledColor > stop:nth-child(1)').setAttribute('stop-color', 'var(--off-color)')\n            if ( this.switchState !== 'off') {\n                this.switchState = 'off'\n                this.uibSend()\n            }\n        }\n    }\n\n    //#endregion ---- ---- ---- ----\n\n    //#region ---- Event Handlers ----\n\n    /** Handle a `uibuilder:msg:_ui:update:${this.id}` custom event\n     * @param {CustomEvent} evt uibuilder `uibuilder:msg:_ui:update:${this.id}` custom event evt.details contains the data\n     */\n    _uibMsgHandler(evt) {\n        // If there is a payload, we want to replace the slot - easiest done from the light DOM\n        // if ( evt['detail'].payload ) {\n        //     const el = document.getElementById(this.id)\n        //     el.innerHTML = evt['detail'].payload\n        // }\n        // If there is a payload, we want to replace the VALUE\n        // if ( evt['detail'].payload ) {\n        //     const el = this.shadowRoot.getElementById('value')\n        //     el.innerHTML = evt['detail'].payload\n        // }\n    }\n\n    _btnLeftClick(evt) {\n        if (this.displayMode === 'default' ) {\n            // Switch to set mode\n            this.displayMode = 'set'\n            this.$('#lblMain').childNodes[0].nodeValue = 'SET'\n            this.$('#valMain').childNodes[0].nodeValue = this.setpoint || '--'\n            this.$('#lblLeft').childNodes[0].nodeValue = ''\n            this.$('#valLeft').childNodes[0].nodeValue = '-'\n            this.$('#lblRight').childNodes[0].nodeValue = ''\n            this.$('#valRight').childNodes[0].nodeValue = '+'\n\n        } else if (this.displayMode === 'set' ) {\n            // decrement set temperature\n            const inc = Number(this.setincrement)\n            const min = Number(this.minset)\n            this.numSetpoint = floatRound(this.numSetpoint - inc, 1)\n            if (isNaN(this.numSetpoint)) this.numSetpoint = 20\n            if ( this.numSetpoint >= min ) {\n                this.setpoint = this.numSetpoint\n                this.doNote(' ', this.$('#lblNote'))\n            } else this.doNote(`Already at min setpoint (${min})`, this.$('#lblNote'))\n\n        } else if (this.displayMode === 'mode' ) {\n            // change node\n            if (this.mode === 'heating') this.mode = 'off'\n            else if (this.mode === 'cooling') this.mode = 'heating'\n            else this.mode = 'cooling'\n            this.checkMode()\n        }\n    }\n\n    _btnRightClick(evt) {\n        if (this.displayMode === 'default' ) {\n            // Switch to mode change mode\n            this.displayMode = 'mode'\n            this.$('#lblMain').childNodes[0].nodeValue = 'MODE'\n            this.$('#valMain').childNodes[0].nodeValue = this.modes[this.mode].icon || '\u26A0\uFE0F'\n            this.$('#lblLeft').childNodes[0].nodeValue = ''\n            this.$('#valLeft').childNodes[0].nodeValue = '<'\n            this.$('#lblRight').childNodes[0].nodeValue = ''\n            this.$('#valRight').childNodes[0].nodeValue = '>'\n\n        } else if (this.displayMode === 'set' ) {\n            // increment set temperature\n            const inc = Number(this.setincrement)\n            const max = Number(this.maxset)\n            this.numSetpoint = floatRound(this.numSetpoint + inc, 1)\n            if (isNaN(this.numSetpoint)) this.numSetpoint = 20\n            if (this.numSetpoint <= max) {\n                this.setpoint = this.numSetpoint\n                this.doNote(' ', this.$('#lblNote'))\n            } else this.doNote(`Already at max setpoint (${max})`, this.$('#lblNote'))\n\n        } else if (this.displayMode === 'mode' ) {\n            // change node\n            if (this.mode === 'heating') this.mode = 'cooling'\n            else if (this.mode === 'cooling') this.mode = 'off'\n            else this.mode = 'heating'\n            this.checkMode()\n        }\n    }\n\n    _clickMain(evt) {\n        if (this.displayMode !== 'default' ) {\n            this.displayMode = 'default'\n            this.doNote(' ', this.$('#lblNote'))\n            this.$('#lblMain').childNodes[0].nodeValue = 'AMBIENT'\n            this.$('#valMain').childNodes[0].nodeValue = this.temperature || '--'\n            this.$('#lblLeft').childNodes[0].nodeValue = 'SET'\n            this.$('#valLeft').childNodes[0].nodeValue = this.setpoint || '--'\n            this.$('#lblRight').childNodes[0].nodeValue = 'MODE'\n            this.$('#valRight').childNodes[0].nodeValue = this.modes[this.mode].icon || '\u26A0\uFE0F'\n        }\n    }\n\n    //#endregion ---- ---- ---- ----\n\n    //#region --- Getters/Setters ---\n\n    get temperature() {\n        return this.getAttribute('temperature') || '--'\n    }\n\n    set temperature(value) {\n        this.numTemperature = value === '--' ? 0 : Number(value)\n        this.checkMode()\n        this.setAttribute('temperature', value || '--')\n    }\n\n    get setpoint() {\n        return this.getAttribute('setpoint') || '--'\n    }\n\n    set setpoint(value) {\n        this.numSetpoint = value === '--' ? 0 : Number(value)\n        this.checkMode()\n        this.setAttribute('setpoint', value || '--')\n    }\n\n    get minset() {\n        return this.getAttribute('minset') || -999\n    }\n\n    set minset(value) {\n        this.setAttribute('minset', value || -999)\n    }\n\n    get maxset() {\n        return this.getAttribute('maxset') || 999\n    }\n\n    set maxset(value) {\n        this.setAttribute('maxset', value || 999)\n    }\n\n    get setincrement() {\n        return this.getAttribute('setincrement') || 0.1\n    }\n\n    set setincrement(value) {\n        this.setAttribute('setincrement', value || 0.1)\n    }\n\n    get mode() {\n        return this.getAttribute('mode') || 'off'\n    }\n\n    set mode(value) {\n        this.setAttribute('mode', value || 'off')\n    }\n\n    //#endregion --- --- ---\n\n    constructor() {\n        super()\n        this.attachShadow({ mode: 'open', delegatesFocus: true })\n            .append(template.content.cloneNode(true))\n\n        this._data = { ...this.dataset } // All of the data-* attributes as an object\n        this._name = this.getAttribute('name')\n        this._msg = {\n            'topic': this.topic,\n            'payload': this.payload ? this.payload : this._data,\n            '_meta': {\n                id: this.id,\n                name: this._name,\n                data: this._data, // All of the data-* attributes as an object\n            }\n        }\n\n        this._clickEvt = new CustomEvent('button-send:click', { 'detail': this._msg })\n        this.dispatchEvent(new Event(`${componentName}:construction`, { bubbles: true, composed: true }))\n\n        // Get a reference to the (optional) uibuilder FE client library if possible\n        try {\n            this.uibuilder = window['uibuilder']\n        } catch (e) {\n            this.uibuilder = undefined\n        }\n\n        // this.addEventListener('click', evt => {\n        //     evt.preventDefault()\n        //     this._msg._meta = {\n        //         id: this.id,\n        //         name: this._name,\n        //         data: this._data, // All of the data-* attributes as an object\n        //         altKey: evt.altKey,\n        //         ctrlKey: evt.ctrlKey,\n        //         shiftKey: evt.shiftKey,\n        //         metaKey: evt.metaKey,\n        //     }\n        //     document.dispatchEvent(this._clickEvt)\n        //     this.uibuilder.send(this._msg)\n        // })\n\n    }\n\n    static get observedAttributes() {\n        return GhostThermometer.props\n    }\n\n    /** NOTE: On initial startup, this is called for each watch attrib set in HTML - BEFORE connectedCallback is called  */\n    attributeChangedCallback(attrib, oldVal, newVal) {\n        // Make sure instance has an ID. Create an id from name or calculation if needed\n        // NB: Done here, not in connectedCallback because this fn is called BEFORE that one on first startup\n        //     and the inital attrib handling may result in a msg back to Node-RED via uibuilder (if using that)\n        if (!this.id) {\n            if (!this.name) this.name = this.getAttribute('name')\n            if (this.name) this.id = this.name.toLowerCase().replace(/\\s/g, '_')\n            else this.id = `ghostthermometer-${++GhostThermometer._iCount}`\n        }\n\n        if ( oldVal === newVal ) return\n\n        switch (attrib) {\n            case 'temperature': {\n                // NB: mode change checks are done in the setter\n                if (this.displayMode === 'default' ) this.$('#valMain').childNodes[0].nodeValue = newVal || '--'\n                break\n            }\n\n            case 'setpoint': {\n                // NB: mode change checks are done in the setter\n                if ( newVal > this.maxset ) {\n                    throw new Error(`Setpoint (${newVal}) must be <= ${this.maxset} (maxset) for <ghost-thermometer id=\"${this.id}\">`)\n                } else if ( newVal < this.minset ) {\n                    throw new Error(`Setpoint (${newVal}) must be >= ${this.minset} (maxset) for <ghost-thermometer id=\"${this.id}\">`)\n                }\n\n                if (this.displayMode === 'default' ) this.$('#valLeft').childNodes[0].nodeValue = newVal || '--'\n                else if (this.displayMode === 'set' ) this.$('#valMain').childNodes[0].nodeValue = newVal || '--'\n                break\n            }\n\n            case 'mode': {\n                if ( !Object.keys(this.modes).includes(newVal) ) {\n                    this.doNote(`Invalid mode \"${newVal}\"`, this.$('#lblNote'))\n                    this.$('#valRight').childNodes[0].nodeValue = this.$('#valMain').childNodes[0].nodeValue = '\u26A0\uFE0F'\n                    throw new Error(`Invalid mode (${newVal}). Must be one of \"${Object.keys(this.modes).join('\", \"')}\" for <ghost-thermometer id=\"${this.id}\">`)\n                }\n\n                if (this.displayMode === 'default' ) this.$('#valRight').childNodes[0].nodeValue = this.modes[newVal].icon || '\u26A0\uFE0F'\n                else if (this.displayMode === 'mode' ) this.$('#valMain').childNodes[0].nodeValue = this.modes[newVal].icon || '\u26A0\uFE0F'\n                break\n            }\n\n            default: {\n                break\n            }\n        }\n\n        this[attrib] = newVal\n\n    } // --- end of attributeChangedCallback --- //\n\n    // when the component is added to doc. NB: Initial attributeChangedCallbacks happen first\n    connectedCallback() {\n        // Listen for a uibuilder msg that is targetted at this instance of the component\n        document.addEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler.bind(this))\n\n        // Add click event handlers for SVG regions\n        this.$('#btnLeft').onclick = this._btnLeftClick.bind(this)\n        this.$('#btnRight').onclick = this._btnRightClick.bind(this)\n        this.$('#clickMain').onclick = this._clickMain.bind(this)\n    }\n\n    // Runs when an instance is removed from the DOM\n    disconnectedCallback() {\n        // NB: Dont decrement GhostThermometer._iCount because that could lead to id nameclashes\n\n        // @ts-ignore\n        document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler)\n    }\n\n} // ---- End of DefinitionList class definition ---- //\n\n/** Self register the class to global\n * Enables new widgets to be dynamically added via JS\n * and lets the static methods be called\n */\nwindow[className] = GhostThermometer\n\n// Add the class as a new Custom Element to the window object\ncustomElements.define(componentName, GhostThermometer)\n"],
  "mappings": "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",
  "names": ["componentName", "className", "floatRound", "number", "digits", "multiple", "template", "GhostThermometer", "_GhostThermometer", "selection", "strvalue", "note", "lblNote", "evt", "inc", "min", "max", "value", "attrib", "oldVal", "newVal"]
}
