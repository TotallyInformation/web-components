{
  "version": 3,
  "sources": ["../../libs/ti-base-component.js", "../../alpha/led-gauge.js"],
  "sourcesContent": ["/** Define the base component extensions for other components in this package.\n * Used to ensure that standard properties and methods are available in every component.\n *\n * Version: See the class code\n *\n **/\n/** Copyright (c) 2024-2025 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\n/** Namespace\n * @namespace Library\n */\n\n/**\n * @class\n * @extends HTMLElement\n * @description Define the base component extensions for other components in this package.\n *\n * @element ti-base-component\n * @memberOf Library\n\n * STANDARD METHODS:\n  * @method config Update runtime configuration, return complete config\n  * @method createShadowSelectors Creates the jQuery-like $ and $$ methods\n  * @method deepAssign Object deep merger\n  * @method doInheritStyles If requested, add link to an external style sheet\n  * @method ensureId Adds a unique ID to the tag if no ID defined.\n  * @method uibSend Send a message to the Node-RED server via uibuilder if available.\n  * @method _uibMsgHandler Not yet in use\n  * @method _event(name,data) Standardised custom event dispatcher\n  * @method _ready Call from end of connectedCallback. Sets connected prop and outputs events\n\n * Standard watched attributes (common across all my components):\n  * @attr {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n\n * Standard props (common across all my components):\n  * @prop {string} baseVersion Static. The component version string (date updated). Also has a getter.\n  * @prop {number} _iCount Static. The count of instances of this component that weren't given an id. Creates a unique id as needed.\n  * @prop {boolean} uib True if UIBUILDER for Node-RED is loaded\n  * @prop {object} uibuilder Reference to loaded UIBUILDER for Node-RED client library if loaded (else undefined)\n  * @prop {function(string): Element} $ jQuery-like shadow dom selector\n  * @prop {function(string): NodeList} $$  jQuery-like shadow dom multi-selector\n  * @prop {boolean} connected False until connectedCallback finishes\n  * @prop {string} name Placeholder for the optional name attribute\n  * @prop {object} opts This components controllable options - get/set using the `config()` method\n  * \n  * @prop {string} version Getter that returns the class version & baseVersion static strings.\n\n * Other props:\n  * By default, all attributes are also created as properties\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass TiBaseComponent extends HTMLElement {\n    /** Component version */\n    static baseVersion = '2025-01-11'\n\n    /** Holds a count of how many instances of this component are on the page that don't have their own id\n     * Used to ensure a unique id if needing to add one dynamically\n     */\n    static _iCount = 0\n\n    /** Is UIBUILDER for Node-RED loaded? */\n    uib = !!window['uibuilder']\n    uibuilder = window['uibuilder']\n\n    /** Mini jQuery-like shadow dom selector (see constructor)\n     * @type {function(string): Element}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {Element} The first element that matches the specified selector.\n     */\n    $\n    /** Mini jQuery-like shadow dom multi-selector (see constructor)\n     * @type {function(string): NodeList}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {NodeList} A STATIC list of all shadow dom elements that match the selector.\n     */\n    $$\n\n    /** True when instance finishes connecting.\n     * Allows initial calls of attributeChangedCallback to be\n     * ignored if needed. */\n    connected = false\n\n    /** Placeholder for the optional name attribute @type {string} */\n    name\n\n    /** Runtime configuration settings @type {object} */\n    opts = {}\n\n    /** Report the current component version string */\n    static get version() {\n        // @ts-ignore\n        return `${this.componentVersion} (Base: ${this.baseVersion})`\n    }\n\n    // get id() {\n    //     return this.id\n    // }\n\n    // set id(value) {\n    //     // this.id = value\n    //     console.log('>> SETTING ID:', value, this.id, this.getAttribute('id'))\n    // }\n\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n    }\n\n    /** Optionally apply an external linked style sheet (called from connectedCallback)\n     * @param {*} url The URL for the linked style sheet\n     */\n    async doInheritStyles() {\n        if (!this.hasAttribute('inherit-style')) return\n\n        let url = this.getAttribute('inherit-style')\n        if (!url) url = './index.css'\n\n        const linkEl = document.createElement('link')\n        linkEl.setAttribute('type', 'text/css')\n        linkEl.setAttribute('rel', 'stylesheet')\n        linkEl.setAttribute('href', url)\n        // @ts-ignore\n        this.shadowRoot.appendChild(linkEl)\n\n        console.info(`[${this.localName}] Inherit-style requested. Loading: \"${url}\"`)\n    }\n\n    /** OPTIONAL. Update runtime configuration, return complete config\n     * @param {object|undefined} config If present, partial or full set of options. If undefined, fn returns the current full option settings\n     */\n    config(config) {\n        // Merge config but ensure that default states always present\n        // if (config) this.opts = { ...this.opts, ...config }\n        if (config) this.opts = TiBaseComponent.deepAssign(this.opts, config)\n        return this.opts\n    }\n\n    /** Utility object deep merge fn\n     * @param {object} target Merge target object\n     * @param  {...object} sources 1 or more source objects to merge\n     * @returns {object} Deep merged object\n     */\n    static deepAssign(target, ...sources) {\n        for (let source of sources) { // eslint-disable-line prefer-const\n            for (let k in source) { // eslint-disable-line prefer-const\n                const vs = source[k]\n                const vt = target[k]\n                if (Object(vs) == vs && Object(vt) === vt) { // eslint-disable-line eqeqeq\n                    target[k] = TiBaseComponent.deepAssign(vt, vs)\n                    continue\n                }\n                target[k] = source[k]\n            }\n        }\n        return target\n    }\n\n    /** Ensure that the component instance has a unique ID & check again if uib loaded */\n    ensureId() {\n        // Check again if UIBUILDER for Node-RED is loaded\n        this.uib = !!window['uibuilder']\n\n        if (!this.id) {\n            // if (!this.name) this.name = this.getAttribute('name')\n            // if (this.name) this.id = this.name.toLowerCase().replace(/\\s/g, '_')\n            // else this.id = `${this.localName}-${++this.constructor._iCount}`\n            // @ts-ignore\n            this.id = `${this.localName}-${++this.constructor._iCount}`\n        }\n    }\n\n    /** Creates the $ and $$ fns that do css selections against the shadow dom */\n    createShadowSelectors() {\n        this.$ = this.shadowRoot?.querySelector.bind(this.shadowRoot)\n        this.$$ = this.shadowRoot?.querySelectorAll.bind(this.shadowRoot)\n    }\n\n    // TODO Needs enhancing - does nothing at the moment\n    /** Handle a `${this.localName}::${this.id}` custom event\n     * @param {object} msg A uibuilder message object\n     */\n    _uibMsgHandler(msg) {\n        console.log(`[${this.localName}:${this.id}] uibuilder message received:`, msg)\n    }\n\n    /** Custom event dispacher `component-name:name` with detail data\n     * @example\n     *   this._event('ready')\n     * @example\n     *   this._event('ready', {age: 42, type: 'android'})\n     *\n     * @param {string} evtName A name to give the event, added to the component-name separated with a :\n     * @param {*=} data Optional data object to pass to event listeners via the evt.detail property\n     */\n    _event(evtName, data) {\n        this.dispatchEvent(new CustomEvent(`${this.localName}:${evtName}`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name,\n                data: data,\n            },\n        } ) )\n    }\n\n    /** Send a message to the Node-RED server via uibuilder if available\n     * NB: These web components are NEVER dependent on Node-RED or uibuilder.\n     * @param {string} evtName The event name to send\n     * @param {*} data The data to send\n     */\n    uibSend(evtName, data){\n        if (this.uib) this.uibuilder.send({\n            topic: `${this.localName}:${evtName}`,\n            payload: data,\n            id: this.id,\n            name: this.name,\n        })\n    }\n\n    /** Standardised constructor. Keep after call to super()\n     * @param {Node|string} template Nodes/string content that will be cloned into the shadow dom\n     * @param {{mode:'open'|'closed',delegatesFocus:boolean}=} shadowOpts Options passed to attachShadow\n     */\n    _construct(template, shadowOpts) {\n        if (!shadowOpts) shadowOpts = { mode: 'open', delegatesFocus: true }\n        // Only attach the shadow dom if code and style isolation is needed\n        this.attachShadow(shadowOpts)\n            .append(template)\n\n        // jQuery-like selectors but for the shadow. NB: Returns are STATIC not dynamic lists\n        this.createShadowSelectors()  // in base class\n    }\n\n    /** Standardised connection. Call from the start of connectedCallback fn */\n    _connect() {\n        // Make sure instance has an ID. Create an id from name or calculation if needed\n        this.ensureId()  // in base class\n        // Apply parent styles from a stylesheet if required - only required if using an applied template\n        this.doInheritStyles()  // in base class\n\n        // Listen for a uibuilder msg that is targetted at this instance of the component\n        if (this.uib) this.uibuilder.onTopic(`${this.localName}::${this.id}`, this._uibMsgHandler.bind(this) )\n    }\n\n    /** Standardised disconnection. Call from the END of disconnectedCallback fn */\n    _disconnect() {\n        // @ts-ignore Remove optional uibuilder event listener\n        document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler )\n\n        // Keep at end. Let everyone know that an instance of the component has been disconnected\n        this._event('disconnected')\n    }\n\n    /** Call from end of connectedCallback */\n    _ready() {\n        this.connected = true\n        this._event('connected')\n        this._event('ready')\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default TiBaseComponent\n\n// This is a library class so don't self-register, it is only for inclusion in actual components\n", "/** Define a new zero dependency custom web component ECMA module that can be used as an HTML tag\n *\n * TO USE THIS TEMPLATE: CHANGE ALL INSTANCES OF 'ComponentTemplate' and 'led-gauge'\n * For better formatting of HTML in template strings, use VSCode's \"ES6 String HTML\" extension\n *\n * Version: See the class code\n *\n **/\n/** Copyright (c) 2022-2025 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\nimport TiBaseComponent from '../libs/ti-base-component'\n\n/** Only use a template if you want to isolate the code and CSS */\nconst template = document.createElement('template')\ntemplate.innerHTML = /*html*/`\n    <style>\n        :host {\n            --value-color: var(--text2, inherit);\n            --gauge-background-color: var(--surface2, inherit);\n            --hue: 120; /* 0 = red, 120 = green, 240 = blue */\n            --on-sat: 100%;\n            --off-sat: 20%;\n            --on-lum: 45%;\n            --off-lum: 25%;\n            --label-color: var(--value-color, inherit);\n            \n            --segment-count: 10;\n            --segment-gap: 0.3rem;\n            --gauge-columns: 1fr 1fr;\n            --gauge-layout: \n                \"label value\"\n                \"segments segments\"\n                \"segvals segvals\";\n            --value-justification: end;\n\n            contain: content; /* performance boost */\n            display: grid;\n            width: 100%;\n            grid-template-columns: var(--gauge-columns);\n            grid-template-areas: var(--gauge-layout);\n            padding: 1rem;\n            background-color: var(--gauge-background-color);\n            color: var(--value-color);\n            border-radius: var(--border-radius, 5px);\n        }\n\n        \n        .segments {\n            grid-area: segments;\n            display: grid;\n            grid-template-columns: repeat(var(--segment-count, 10), 1fr);\n            gap: var(--segment-gap);\n        }\n\n        .segvals {\n            grid-area: segvals;\n            display: grid;\n            grid-template-columns: 0fr repeat(var(--segment-count, 10), 1fr) 0fr;\n            justify-items: start;\n            /* margin-left: -.5rem; */\n            /* gap: var(--segment-gap); */\n        }\n\n        .led {\n            background-color: hsl(var(--hue, 0), var(--off-sat, 20%), var(--off-lum, 25%));\n            height: 20px;\n            border-radius: 3px;\n            border: 1px solid var(--gauge-background-color);\n            cursor: pointer;\n        }\n\n        .led.on {\n            background-color: hsl(var(--hue, 0), var(--on-sat, 100%), var(--on-lum, 45%));\n            /* box-shadow: 0 0 5px hsl(var(--hue, 0), var(--on-sat, 100%), var(--on-lum, 45%)); */\n        }\n\n        slot {\n            grid-area: label;\n            color: var(--label-color, inherit);\n        }\n        output {\n            grid-area: value;\n            justify-self: var(--value-justification, end);\n            color: var(--value-color, inherit);\n        }\n    </style>\n\n    <slot></slot>\n    <output class=\"value\"></output>\n    <div class=\"segments\" arial-label=\"Visual LED Gauge\"></div>\n    <div class=\"segvals\"></div>\n`\n\n/** Namespace\n * @namespace Alpha\n */\n\n/** TODO\n * Update class docs\n * Add uibuilder support\n * Add segment colors\n *\n */\n\n/**\n * @class\n * @extends TiBaseComponent\n * @description Define a new zero dependency custom web component ECMA module that can be used as an HTML tag\n *\n * @element led-gauge\n * @memberOf Alpha\n\n * METHODS FROM BASE:\n  * @method config Update runtime configuration, return complete config\n  * @method createShadowSelectors Creates the jQuery-like $ and $$ methods\n  * @method deepAssign Object deep merger\n  * @method doInheritStyles If requested, add link to an external style sheet\n  * @method ensureId Adds a unique ID to the tag if no ID defined.\n  * @method _connect Call from start of connectedCallback. Sets connected prop and creates shadow selectors\n  * @method _event(name,data) Standardised custom event dispatcher\n  * @method _disconnect Call from end of disconnectedCallback. Clears connected prop and removes shadow selectors\n  * @method _ready Call from end of connectedCallback. Sets connected prop and outputs events\n  * @method _uibMsgHandler Not yet in use\n * STANDARD METHODS:\n  * @method attributeChangedCallback Called when an attribute is added, removed, updated or replaced\n  * @method connectedCallback Called when the element is added to a document\n  * @method constructor Construct the component\n  * @method disconnectedCallback Called when the element is removed from a document\n\n * OTHER METHODS:\n  * @method valueChanged Process value changed event\n  * @method _renderGauge (Re)Create the gauge\n\n * CUSTOM EVENTS:\n  * @fires led-gauge:connected - When an instance of the component is attached to the DOM. `evt.details` contains the details of the element.\n  * @fires led-gauge:ready - Alias for connected. The instance can handle property & attribute changes\n  * @fires led-gauge:disconnected - When an instance of the component is removed from the DOM. `evt.details` contains the details of the element.\n  * @fires led-gauge:attribChanged - When a watched attribute changes. `evt.details.data` contains the details of the change.\n  *\n  * @fires led-gauge:value-changed - When the value changes. `evt.details.data` contains the new value.\n  * @fires led-gauge:segment-click - When a segment is clicked. `evt.details.data` contains the details of the segment & current value.\n  * NOTE that listeners can be attached either to the `document` or to the specific element instance.\n\n * Standard watched attributes (common across all my components):\n  * @attr {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n  * @attr {string} name - Optional. HTML name attribute. Included in output _meta prop.\n\n * Other watched attributes:\n  * @attr {string} value\n  * @attr {string} min\n  * @attr {string} max\n  * @attr {string} unit\n  * @attr {string} label\n  * @attr {string} label-position\n  * @attr {string} segments\n\n * PROPS FROM BASE:\n  * @prop {number} _iCount Static. The count of instances of this component that weren't given an id. Creates a unique id as needed.\n  * @prop {function(string): Element} $ jQuery-like shadow dom selector (or undefined if shadow dom not used)\n  * @prop {function(string): NodeList} $$  jQuery-like shadow dom multi-selector (or undefined if shadow dom not used)\n  * @prop {string} baseVersion Static. The base component version string (date updated).\n  * @prop {boolean} connected False until connectedCallback finishes\n  * @prop {string} name Placeholder for the optional name attribute\n  * @prop {object} opts This components controllable options - get/set using the `config()` method - empty object by default\n  * @prop {boolean} uib True if UIBUILDER for Node-RED is loaded\n  * @prop {object} uibuilder Reference to loaded UIBUILDER for Node-RED client library if loaded (else undefined)\n * OTHER STANDARD PROPS:\n  * @prop {string} componentVersion Static. The component version string (date updated). Also has a getter that returns component and base version strings.\n\n * Other props:\n    * @prop {string[]} colors The color of each segment in the gauge\n    * @prop {number} max The maximum value of the gauge\n    * @prop {number} min The minimum value of the gauge\n    * @prop {HTMLElement} segContainerEl The container for the gauge segments\n    * @prop {number} segments (getter/setter) The number of segments in the gauge. #segments is the private equivalent property\n    * @prop {HTMLCollection} segmentElements A collection of the segment div elements\n    * @prop {string} unit The unit of the gauge value\n    * @prop {HTMLElement} valsContainerEl The container for the segment values\n    * @prop {number} value (getter/setter) The current value of the gauge. #value is the private equivalent property\n    * @prop {HTMLElement} valueEl The container for the gauge value\n  * By default, all attributes are also created as properties\n\n * @slot Container contents\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass LedGauge extends TiBaseComponent {\n    /** Component version */\n    static componentVersion = '2025-01-08'\n\n    #value = 0\n    #segments = 10\n    #colors = {}\n    // #colors = {\n    //     // 60: 40, // 60%+ is orange\n    //     80: 0, // 80%+ is red\n    // }\n\n    // TODO Add getters and setters for all props - force re-render on change\n    min = 0\n    max = 100\n    unit = '%'\n\n    /** @type {HTMLElement} */\n    segContainerEl\n    /** @type {HTMLElement} */\n    valsContainerEl\n    /** @type {HTMLElement} */\n    valueEl\n    /** @type {HTMLCollection} */\n    segmentElements\n\n    /** Makes HTML attribute change watched\n     * @returns {Array<string>} List of all of the html attribs (props) listened to\n     */\n    static get observedAttributes() {\n        return [\n            // Standard watched attributes:\n            'inherit-style', 'name',\n            // Other watched attributes:\n            'value', 'min', 'max', 'unit',\n            'label', 'label-position',\n            'segments',\n        ]\n    }\n\n    /** Set the number of segments\n     * @param {string|number} val Number of segments\n     */\n    set segments(val) {\n        const strSegments = val.toString()\n        // Ensure that saved #segments value is numeric\n        this.#segments = parseInt(strSegments)\n        // Update the CSS variable for the number of segments\n        this.style.setProperty('--segment-count', strSegments)\n        // (Re)Create and show the gauge\n        this._renderGauge()\n    }\n\n    /** Get the number of segments\n     * @returns {number} Number of segments\n     */\n    get segments() {\n        return this.#segments\n    }\n\n    /** Set the value of the gauge\n     * @param {string|number} val The value to set\n     */\n    set value(val) {\n        const oldVal = this.#value\n        // Ensure that saved #segments value is numeric\n        this.#value = parseFloat(val.toString())\n        // (Re)Create and show the gauge\n        this._renderGauge()\n        // Notify listeners of the change\n        this._event('value-change', {\n            value: this.#value,\n            oldValue: oldVal,\n        })\n        // If using uibuilder, send the new value to Node-RED.\n        this.uibSend('value-change', {\n            value: this.#value,\n            oldValue: oldVal,\n        })\n    }\n\n    /** Get the value of the gauge\n     * @returns {number} The current value\n     */\n    get value() {\n        return this.#value\n    }\n\n    /** Set the value of the gauge\n     * @param {object} val The value to set\n     */\n    set colors(val) {\n        this.#colors = val\n        // (Re)Create and show the gauge\n        this._renderGauge()\n    }\n\n    /** Get the value of the gauge\n     * @returns {object} The current value\n     */\n    get colors() {\n        return this.#colors\n    }\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() { // eslint-disable-line no-useless-constructor\n        super()\n        // Only attach the shadow dom if code and style isolation is needed - comment out if shadow dom not required\n        if (template && template.content) this._construct(template.content.cloneNode(true))\n\n        // Keep a reference to the segments container\n        this.segContainerEl = this.shadowRoot.querySelector('.segments')\n        // Keep a reference to the segment values container\n        this.valsContainerEl = this.shadowRoot.querySelector('.segvals')\n        // Keep a reference to the value container\n        this.valueEl = this.shadowRoot.querySelector('.value')\n    }\n\n    /** Runs when an instance is added to the DOM */\n    connectedCallback() {\n        this._connect() // Keep at start.\n\n        // Set up the gauge\n        this._renderGauge()\n\n        this._ready() // Keep at end. Let everyone know that a new instance of the component has been connected & is ready\n    }\n\n    /** Runs when an instance is removed from the DOM */\n    disconnectedCallback() {\n        this._disconnect() // Keep at end.\n    }\n\n    /** Runs when an observed attribute changes - Note: values are always strings\n     * @param {string} attrib Name of watched attribute that has changed\n     * @param {string} oldVal The previous attribute value\n     * @param {string} newVal The new attribute value\n     */\n    attributeChangedCallback(attrib, oldVal, newVal) {\n        /** Optionally ignore attrib changes until instance is fully connected\n         * Otherwise this can fire BEFORE everthing is fully connected.\n         */\n        // if (!this.connected) return\n\n        // Don't bother if the new value same as old\n        if ( oldVal === newVal ) return\n        // Create a property from the value - WARN: Be careful with name clashes\n        this[attrib] = newVal\n\n        // NOTE: value and segments are handled by their own setters.\n\n        // Add other dynamic attribute processing here.\n        // If attribute processing doesn't need to be dynamic, process in connectedCallback as that happens earlier in the lifecycle\n\n        // Keep at end. Let everyone know that an attribute has changed for this instance of the component\n        this._event('attribChanged', { attribute: attrib, newVal: newVal, oldVal: oldVal })\n    }\n\n    /** Create the gauge */\n    _renderGauge() {\n        // Calculate the segment step size\n        const step = (this.max - this.min) / this.segments\n\n        // Clear out the existing segments\n        this.segContainerEl.innerHTML = ''\n        this.valsContainerEl.innerHTML = ''\n\n        // Create LED segments\n        for (let i = 0; i < this.segments; i++) {\n            // Create the segments\n            const segment = document.createElement('div')\n            segment.classList.add('led')\n            const segmentValue = this.min + i * step\n            segment.title = segmentValue.toString()\n\n            // Create the segment values\n            if (i === 0) {\n                const segVal = document.createElement('div')\n                this.valsContainerEl.appendChild(segVal)\n            }\n            const segVal = document.createElement('div')\n            segVal.innerText = Math.round(segmentValue).toString()\n\n            // if colorSegments has a key greater than or equal to the segVal, set the hue to the value of the key\n            const hueKey = Object.keys(this.#colors).reverse().find(key => {\n                return Number(key) <= segmentValue + step - 1\n            })\n            if (hueKey !== undefined) segment.style.setProperty('--hue', this.#colors[hueKey])\n\n            // Is the segment on?\n            if (this.#value >= segmentValue) segment.classList.add('on')\n\n            // Attach click event listener\n            segment.addEventListener('click', () => {\n                const data = {\n                    gaugeValue: this.#value,\n                    segment: i,\n                    segmentValue: segmentValue,\n                }\n                // Fire custom event\n                this._event('segment-click', data)\n                // If using uibuilder, send the new value to Node-RED.\n                this.uibSend('segment-click', data)\n            })\n\n            this.segContainerEl.appendChild(segment)\n            this.valsContainerEl.appendChild(segVal)\n        }\n\n        // Keep a reference to the segment div elements\n        this.segmentElements = this.segContainerEl.getElementsByTagName('div')\n\n        const segVal = document.createElement('div')\n        this.valsContainerEl.appendChild(segVal)\n        segVal.innerText = this.max.toString()\n\n        // Render label with current value and unit if applicable\n        // const labelPosition = this.getAttribute('label-position') || 'above';\n        // const labelContent = this.getAttribute('label') || '';\n        this.valueEl.innerText = `${this.value}${this.unit}`\n        // const showValue = this.hasAttribute('show-value') ? `<span class=\"value\">${this.value}${this.unit}</span>` : '';\n        // this.labelElement.innerHTML = labelPosition.includes('below') ? labelContent + showValue : showValue + labelContent;\n\n        // Adjust layout for label position\n        // const isHorizontal = this.getAttribute('layout') === 'horizontal' ?? true;\n        // this.shadowRoot.querySelector('.gauge').style.gridTemplateColumns = isHorizontal ? 'auto 1fr' : '1fr';\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default LedGauge\n\n/** Self register the class to global\n * Enables new data lists to be dynamically added via JS\n * and lets the static methods be called\n */\nwindow['LedGauge'] = LedGauge\n\n// Self-register the HTML tag\ncustomElements.define('led-gauge', LedGauge)\n"],
  "mappings": "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",
  "names": ["TiBaseComponent", "_TiBaseComponent", "url", "linkEl", "config", "target", "sources", "source", "k", "vs", "vt", "msg", "evtName", "data", "template", "shadowOpts", "ti_base_component_default", "template", "LedGauge", "ti_base_component_default", "#value", "#segments", "#colors", "val", "strSegments", "oldVal", "attrib", "newVal", "step", "i", "segment", "segmentValue", "segVal", "hueKey", "key", "data", "led_gauge_default"]
}
