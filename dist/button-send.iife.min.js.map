{
  "version": 3,
  "sources": ["../libs/ti-base-component.js", "../src/button-send.js"],
  "sourcesContent": ["/** Define the base component extensions for other components in this package.\n * Used to ensure that standard properties and methods are available in every component.\n *\n * Version: See the class code\n *\n **/\n/** Copyright (c) 2024-2025 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\n/** Namespace\n * @namespace Library\n */\n\n/**\n * @class\n * @extends HTMLElement\n * @description Define the base component extensions for other components in this package.\n *\n * @element ti-base-component\n * @memberOf Library\n\n * STANDARD METHODS:\n  * @method config Update runtime configuration, return complete config\n  * @method createShadowSelectors Creates the jQuery-like $ and $$ methods\n  * @method deepAssign Object deep merger\n  * @method doInheritStyles If requested, add link to an external style sheet\n  * @method ensureId Adds a unique ID to the tag if no ID defined.\n  * @method _uibMsgHandler Not yet in use\n  * @method _event(name,data) Standardised custom event dispatcher\n  * @method _ready Call from end of connectedCallback. Sets connected prop and outputs events\n\n * Standard watched attributes (common across all my components):\n  * @attr {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n\n * Standard props (common across all my components):\n  * @prop {string} baseVersion Static. The component version string (date updated). Also has a getter.\n  * @prop {number} _iCount Static. The component version string (date updated)\n  * @prop {boolean} uib True if UIBUILDER for Node-RED is loaded\n  * @prop {object} uibuilder Reference to loaded UIBUILDER for Node-RED client library if loaded (else undefined)\n  * @prop {function(string): Element} $ jQuery-like shadow dom selector\n  * @prop {function(string): NodeList} $$  jQuery-like shadow dom multi-selector\n  * @prop {boolean} connected False until connectedCallback finishes\n  * @prop {string} name Placeholder for the optional name attribute\n  * @prop {object} opts This components controllable options - get/set using the `config()` method\n  * \n  * @prop {string} version Getter that returns the class version & baseVersion static strings.\n\n * Other props:\n  * By default, all attributes are also created as properties\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass TiBaseComponent extends HTMLElement {\n    /** Component version */\n    static baseVersion = '2025-01-09'\n\n    /** Holds a count of how many instances of this component are on the page that don't have their own id\n     * Used to ensure a unique id if needing to add one dynamically\n     */\n    static _iCount = 0\n\n    /** Is UIBUILDER for Node-RED loaded? */\n    uib = !!window['uibuilder']\n    uibuilder = window['uibuilder']\n\n    /** Mini jQuery-like shadow dom selector (see constructor)\n     * @type {function(string): Element}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {Element} The first element that matches the specified selector.\n     */\n    $\n    /** Mini jQuery-like shadow dom multi-selector (see constructor)\n     * @type {function(string): NodeList}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {NodeList} A STATIC list of all shadow dom elements that match the selector.\n     */\n    $$\n\n    /** True when instance finishes connecting.\n     * Allows initial calls of attributeChangedCallback to be\n     * ignored if needed. */\n    connected = false\n\n    /** Placeholder for the optional name attribute @type {string} */\n    name\n\n    /** Runtime configuration settings @type {object} */\n    opts = {}\n\n    /** Report the current component version string */\n    static get version() {\n        // @ts-ignore\n        return `${this.componentVersion} (Base: ${this.baseVersion})`\n    }\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n    }\n\n    /** Optionally apply an external linked style sheet (called from connectedCallback)\n     * @param {*} url The URL for the linked style sheet\n     */\n    async doInheritStyles() {\n        if (!this.hasAttribute('inherit-style')) return\n\n        let url = this.getAttribute('inherit-style')\n        if (!url) url = './index.css'\n\n        const linkEl = document.createElement('link')\n        linkEl.setAttribute('type', 'text/css')\n        linkEl.setAttribute('rel', 'stylesheet')\n        linkEl.setAttribute('href', url)\n        // @ts-ignore\n        this.shadowRoot.appendChild(linkEl)\n\n        console.info(`[${this.localName}] Inherit-style requested. Loading: \"${url}\"`)\n    }\n\n    /** OPTIONAL. Update runtime configuration, return complete config\n     * @param {object|undefined} config If present, partial or full set of options. If undefined, fn returns the current full option settings\n     */\n    config(config) {\n        // Merge config but ensure that default states always present\n        // if (config) this.opts = { ...this.opts, ...config }\n        if (config) this.opts = TiBaseComponent.deepAssign(this.opts, config)\n        return this.opts\n    }\n\n    /** Utility object deep merge fn\n     * @param {object} target Merge target object\n     * @param  {...object} sources 1 or more source objects to merge\n     * @returns {object} Deep merged object\n     */\n    static deepAssign(target, ...sources) {\n        for (let source of sources) { // eslint-disable-line prefer-const\n            for (let k in source) { // eslint-disable-line prefer-const\n                const vs = source[k]\n                const vt = target[k]\n                if (Object(vs) == vs && Object(vt) === vt) { // eslint-disable-line eqeqeq\n                    target[k] = TiBaseComponent.deepAssign(vt, vs)\n                    continue\n                }\n                target[k] = source[k]\n            }\n        }\n        return target\n    }\n\n    /** Ensure that the component instance has a unique ID & check again if uib loaded */\n    ensureId() {\n        // Check again if UIBUILDER for Node-RED is loaded\n        this.uib = !!window['uibuilder']\n\n        if (!this.id) {\n            // if (!this.name) this.name = this.getAttribute('name')\n            // if (this.name) this.id = this.name.toLowerCase().replace(/\\s/g, '_')\n            // else this.id = `${this.localName}-${++this.constructor._iCount}`\n            // @ts-ignore\n            this.id = `${this.localName}-${++this.constructor._iCount}`\n        }\n    }\n\n    /** Creates the $ and $$ fns that do css selections against the shadow dom */\n    createShadowSelectors() {\n        this.$ = this.shadowRoot?.querySelector.bind(this.shadowRoot)\n        this.$$ = this.shadowRoot?.querySelectorAll.bind(this.shadowRoot)\n    }\n\n    // TODO Needs enhancing - does nothing at the moment\n    /** Handle a `uibuilder:msg:_ui:update:${this.id}` custom event\n     * @param {CustomEvent} evt uibuilder `uibuilder:msg:_ui:update:${this.id}` custom event evt.details contains the data\n     */\n    _uibMsgHandler(evt) {\n        // If there is a payload, we want to replace the slot - easiest done from the light DOM\n        // if ( evt['detail'].payload ) {\n        //     const el = document.getElementById(this.id)\n        //     el.innerHTML = evt['detail'].payload\n        // }\n        // If there is a payload, we want to replace the VALUE\n        // if ( evt['detail'].payload ) {\n        //     const el = this.shadowRoot.getElementById('value')\n        //     el.innerHTML = evt['detail'].payload\n        // }\n    }\n\n    /** Custom event dispacher `component-name:name` with detail data\n     * @example\n     *   this._event('ready')\n     * @example\n     *   this._event('ready', {age: 42, type: 'android'})\n     *\n     * @param {string} name A name to give the event, added to the component-name separated with a :\n     * @param {*=} data Optional data object to pass to event listeners via the evt.detail property\n     */\n    _event(name, data) {\n        this.dispatchEvent(new CustomEvent(`${this.localName}:${name}`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name,\n                data: data,\n            },\n        } ) )\n    }\n\n    /** Standardised constructor. Keep after call to super()\n     * @param {Node|string} template Nodes/string content that will be cloned into the shadow dom\n     * @param {{mode:'open'|'closed',delegatesFocus:boolean}=} shadowOpts Options passed to attachShadow\n     */\n    _construct(template, shadowOpts) {\n        if (!shadowOpts) shadowOpts = { mode: 'open', delegatesFocus: true }\n        // Only attach the shadow dom if code and style isolation is needed\n        this.attachShadow(shadowOpts)\n            .append(template)\n\n        // jQuery-like selectors but for the shadow. NB: Returns are STATIC not dynamic lists\n        this.createShadowSelectors()  // in base class\n    }\n\n    /** Standardised connection. Call from the start of connectedCallback fn */\n    _connect() {\n        // Make sure instance has an ID. Create an id from name or calculation if needed\n        this.ensureId()  // in base class\n        // Apply parent styles from a stylesheet if required - only required if using an applied template\n        this.doInheritStyles()  // in base class\n\n        // OPTIONAL. Listen for a uibuilder msg that is targetted at this instance of the component\n        // if (this.uib) document.addEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler.bind(this) )\n    }\n\n    /** Standardised disconnection. Call from the END of disconnectedCallback fn */\n    _disconnect() {\n        // @ts-ignore Remove optional uibuilder event listener\n        document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler )\n\n        // Keep at end. Let everyone know that an instance of the component has been disconnected\n        this._event('disconnected')\n    }\n\n    /** Call from end of connectedCallback */\n    _ready() {\n        this.connected = true\n        this._event('connected')\n        this._event('ready')\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default TiBaseComponent\n\n// This is a library class so don't self-register, it is only for inclusion in actual components\n", "/** A zero dependency button web component that sends a msg or a document event when clicked.\n *  Contains relevant data from data-*, topic and payload attributes (or properties),\n *  includes a _meta object showing whether any modifier keys were used, the element id/name.\n *\n * See ./docs/button-send.md for detailed documentation on installation and use.\n *\n * Version: See the class code\n *\n **/\n/** Copyright (c) 2022-2024 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\n/** ToDo:\n * - Add variants (see simple-card)\n * - Allow colour and background colour to be controlled with standard names (e.g. info, warning, error, etc)\n * - Create a unique identifier to use when id/name not specified.\n * - Allow std pre-formatted msg from uibuilder to change the attribs/props\n * - Allow std pre-formatted msg from uibuilder to add a new button\n * - Consider moving from `click` to `pointerdown`/`up`. taking note of `setPointerCapture` to detect when up is outside of the down\n *    target so it can be ignored if desired.\n * - Also add processing for multi-click (detail property of click), contextMenu, auxclick, dblclick\n */\n\nimport TiBaseComponent from '../libs/ti-base-component'\n\n/** Only use a template if you want to isolate the code and CSS */\nconst template = document.createElement('template')\ntemplate.innerHTML = /*html*/`\n    <style>\n        button, input[type=\"button\" i] {\n            margin-top: .5em;\n            margin-bottom: .5em;\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n            border: none;\n            padding: .5rem 1rem;\n            text-decoration: none;\n            background-color: var(--info);\n            color: var(--text2);\n            font-family: inherit;\n            font-size: 1rem;\n            line-height: 1.4;\n            cursor: pointer;\n            text-align: center;\n            transition: background 250ms ease-in-out, transform 150ms ease;\n            -webkit-appearance: none;\n            -moz-appearance: none;\n            border-radius: 8px;\n            /* box-shadow: 0 3px 5px rgb(var(--uib-color-fg), 0.5); */\n            box-shadow: inset 2px 2px 3px rgba(255,255,255, .3),\n                        inset -2px -2px 3px rgba(0,0,0, .3);\n        }\n        button:hover, input[type=\"button\" i]:hover {\n            background-color: rgb(var(--uib-color-info), .5);\n        }\n        \n        button:focus, input[type=\"button\" i]:focus {\n            outline: 1px solid rgb(var(--uib-color-fg));\n            outline-offset: -4px;\n        }\n        \n        button:active, input[type=\"button\" i]:active {\n            transform: scale(0.97);\n        }\n    </style>\n    <button type=\"button\">\n        <span><slot></slot></span>\n    </button>\n`\n\n/** Namespace\n * @namespace Beta\n */\n\n/** A Zero dependency button web component that sends a msg or a document event when clicked.\n *  Contains relevant data from data-*, topic and payload attributes (or properties),\n *  includes a _meta object showing whether any modifier keys were used, the element id/name\n *\n * @class\n * @extends TiBaseComponent\n * @description Define a new zero dependency custom web component ECMA module that can be used as an HTML tag\n *\n * @element button-send\n * @memberOf Beta\n\n * METHODS FROM BASE:\n * @method config Update runtime configuration, return complete config\n * @method createShadowSelectors Creates the jQuery-like $ and $$ methods\n * @method deepAssign Object deep merger\n * @method doInheritStyles If requested, add link to an external style sheet\n * @method ensureId Adds a unique ID to the tag if no ID defined.\n * @method _uibMsgHandler Not yet in use\n * @method _event(name,data) Standardised custom event dispatcher\n\n * OTHER METHODS:\n * None\n\n * @fires button-send:connected - When an instance of the component is attached to the DOM. `evt.details` contains the details of the element.\n * @fires button-send:ready - Alias for connected. The instance can handle property & attribute changes\n * @fires button-send:disconnected - When an instance of the component is removed from the DOM. `evt.details` contains the details of the element.\n * @fires button-send:attribChanged - When a watched attribute changes. `evt.details` contains the details of the change.\n * @fires button-send:click - Document object event. evt.details contains the data\n * @fires uibuilder.send {function} - Sends a msg back to Node-RED if uibuilder available. topic, payload and _meta props may all be set.\n * NOTE that listeners can be attached either to the `document` or to the specific element instance.\n\n * Standard watched attributes (common across all my components):\n * @attr {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n * @attr {string} name - Optional. HTML name attribute. Included in output _meta prop.\n\n * Other watched attributes:\n * @attr {string} topic - Optional. Topic string to use. Mostly for node-red messages\n * @attr {string} payload - Optional. Payload string. Mostly for node-red messages. For non-string payload, see props below\n\n * Standard props (common across all my components):\n * @prop {boolean} uib True if UIBUILDER for Node-RED is loaded. In base class\n * @prop {function(string): Element} $ jQuery-like shadow dom selector. In base class\n * @prop {function(string): NodeList} $$  jQuery-like shadow dom multi-selector. In base class\n * @prop {number} _iCount The component version string (date updated). In base class\n * @prop {object} opts This components controllable options - get/set using the `config()` method. In base class\n *\n * @prop {string} version Static. The component version string (date updated). Also has a getter that returns component and base version strings.\n\n * Other props:\n * @prop {any|string} payload - Can be an attribute or property. If used as property, must not use payload attribute in html, aAllows any data to be attached to payload. As an attribute, allows a string only.\n * By default, all attributes are also created as properties\n\n * @slot default - Button label. Allows text, inline and most block tags to be included (unlike the standard button tag which only allows inline tags).\n\n * @csspart button - Uses the uib-styles.css uibuilder master for variables where available.\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass ButtonSend extends TiBaseComponent {\n    /** Component version */\n    static componentVersion = '2024-10-06'\n\n    sendEvents = true\n    /** The topic to include in the output\n     * @type {string|undefined} */\n    topic\n    /** The payload to include in the output\n     * @type {any} */\n    payload\n    /** Standard _ui object to include in msgs */\n    _ui = {\n        type: 'button-send',\n        event: undefined,\n        id: undefined,\n        name: undefined,\n        // data: undefined, // All of the data-* attributes as an object\n    }\n\n    /** The output msg @type {object} */\n    _msg = {}\n\n    /** Makes HTML attribute change watched\n     * @returns {Array<string>} List of all of the html attribs (props) listened to\n     */\n    static get observedAttributes() {\n        return [\n            // Standard watched attributes:\n            'inherit-style', 'name',\n            // Other watched attributes:            \n            'topic', 'payload',\n        ]\n    }\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n        // Only attach the shadow dom if code and style isolation is needed - comment out if shadow dom not required\n        this._construct(template.content.cloneNode(true))\n\n        // const mydata = { ...this.dataset }\n\n        /** The output msg @type {object} */\n        this._setMsg('component load')\n\n        // if ( this.uib && this.sendEvents ) window.uibuilder.send({_ui: {...this._ui}})\n    } // --- end of constructor --- //\n\n    /** Runs when an instance is added to the DOM */\n    connectedCallback() {\n        this._connect() // Keep at start.\n\n        /** Listen for the button click */\n        this.addEventListener('click', this.handleClick)\n\n        /** Instance registration event @type {CustomEvent} */\n        // this._setMsg('instance load')\n        // document.dispatchEvent( new CustomEvent('button-send:instanceAdded', {'detail': this._msg._ui}) )\n        // if ( window.uibuilder && this.sendEvents ) window.uibuilder.send({_ui: {...this._ui}})\n\n        this._ready() // Keep at end. Let everyone know that a new instance of the component has been connected & is ready\n    }\n\n    /** Runs when an instance is removed from the DOM */\n    disconnectedCallback() {\n        this.removeEventListener('click', this.handleClick)\n\n        this._disconnect() // Keep at end.\n    }\n\n    /** Runs when an observed attribute changes - Note: values are always strings\n     * @param {string} attrib Name of watched attribute that has changed\n     * @param {string} oldVal The previous attribute value\n     * @param {string} newVal The new attribute value\n     */\n    attributeChangedCallback(attrib, oldVal, newVal) {\n        /** Optionally ignore attrib changes until instance is fully connected\n         * Otherwise this can fire BEFORE everthing is fully connected.\n         */\n        // if (!this.connected) return\n\n        // Don't bother if the new value same as old\n        if ( oldVal === newVal ) return\n        // Create a property from the value - WARN: Be careful with name clashes\n        this[attrib] = newVal\n\n        // Add other dynamic attribute processing here.\n        // If attribute processing doesn't need to be dynamic, process in connectedCallback as that happens earlier in the lifecycle\n\n        this._setMsg('attribute change')\n\n        if ( window['uibuilder'] && this.sendEvents ) { window['uibuilder'].send( {\n            payload: { name: attrib, oldVal: oldVal, newVal: newVal },\n            _ui: { ...this._ui }\n        } ) }\n\n        // Keep at end. Let everyone know that an attribute has changed for this instance of the component\n        this._event('attribChanged', { attribute: attrib, newVal: newVal, oldVal: oldVal })\n    }\n\n    _setMsg(evtName) {\n        const mydata = { ...this.dataset }\n        this._msg.topic = this.topic\n        this._msg.payload = this.payload ? this.payload : mydata\n        this._msg._ui = { ...this._ui }\n        if (evtName) this._msg._ui.event = evtName\n        if ( this.id !== '') this._msg._ui.id = this.id\n        const n = this.getAttribute('name')\n        if ( n !== null ) this._msg._ui.name = n\n        // this._msg._ui.data = mydata // All of the data-* attributes as an object\n    }\n\n    /** fn to run when the button is clicked\n     * @param {PointerEvent} evt The event object\n     */\n    handleClick(evt) {\n        const uibLib = window?.['uibuilder']\n\n        evt.preventDefault()\n        this._setMsg('click')\n\n        const _ui = this._msg._ui\n        const target = /** @type {Element} */ (evt.currentTarget)\n\n        // Get target properties - only shows custom props not element default ones\n        const props = {}\n        const ignoreProps = ['name', 'sendEvents', 'payload', '$', '_ui', '_msg']\n        Object.keys(target).forEach( key => {\n            if ( !ignoreProps.includes(key) ) props[key] = target[key]\n        })\n\n        const ignoreAttribs = ['class', 'id', 'name']\n        const attribs = Object.assign({},\n            ...Array.from(target.attributes,\n                ( { name, value } ) => {\n                    if ( !ignoreAttribs.includes(name) ) {\n                        return ({ [name]: value })\n                    }\n                    return undefined\n                }\n            )\n        )\n\n        _ui.slotText = target.textContent !== '' ? target.textContent?.substring(0, 255) : undefined\n\n        _ui.props = props\n        _ui.attribs = attribs\n        // @ts-ignore\n        _ui.dataset = {...target.dataset}\n        _ui.classes = Array.from(target.classList)\n\n        _ui.altKey = evt.altKey\n        _ui.ctrlKey = evt.ctrlKey\n        _ui.shiftKey = evt.shiftKey\n        _ui.metaKey = evt.metaKey\n\n        _ui.pointerType = evt.pointerType\n        _ui.nodeName = target.nodeName\n        if ( uibLib ) {\n            _ui.clientId = uibLib.clientId\n            _ui.pageName = uibLib.pageName\n            _ui.tabId = uibLib.tabId\n        }\n\n        /** Output a custom document event `button-send:click`, data is in evt.details */\n        document.dispatchEvent( new CustomEvent(`${this.localName}:click`, {\n            bubbles: true,\n            composed: true,\n            'detail': this._msg\n        }) )\n\n        /** Send a message to uibuilder with the output data */\n        if (uibLib) uibLib.send(this._msg)\n        // if (uibLib) uibLib.eventSend(evt)\n        // else console.debug('[ButtonSend:handleClick] uibuilder not available, cannot send')\n    }\n} // ---- End of class definition ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default ButtonSend\n\n/** Self register the class to global\n * Enables new data lists to be dynamically added via JS\n * and lets the static methods be called\n */\nwindow['ButtonSend'] = ButtonSend\n\n// Add the class as a new Custom Element to the window object\ncustomElements.define('button-send', ButtonSend)\n"],
  "mappings": "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",
  "names": ["TiBaseComponent", "_TiBaseComponent", "url", "linkEl", "config", "target", "sources", "source", "k", "vs", "vt", "evt", "name", "data", "template", "shadowOpts", "ti_base_component_default", "template", "ButtonSend", "ti_base_component_default", "attrib", "oldVal", "newVal", "evtName", "mydata", "n", "evt", "uibLib", "_ui", "target", "props", "ignoreProps", "key", "ignoreAttribs", "attribs", "name", "value", "button_send_default"]
}
