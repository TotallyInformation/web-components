{
  "version": 3,
  "sources": ["../libs/ti-base-component.js", "../src/collapsible-headings.js"],
  "sourcesContent": ["/** Define the base component extensions for other components in this package.\n * Used to ensure that standard properties and methods are available in every component.\n *\n * Version: See the class code\n *\n */\n/** Copyright (c) 2024-2025 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Namespace\n * @namespace Library\n */\n\n/**\n * @class\n * @augments HTMLElement\n * @description Define the base component extensions for other components in this package.\n *\n * @element ti-base-component\n * @memberOf Library\n\n * STANDARD METHODS:\n  * @function config Update runtime configuration, return complete config\n  * @function createShadowSelectors Creates the jQuery-like $ and $$ methods\n  * @function deepAssign Object deep merger\n  * @function doInheritStyles If requested, add link to an external style sheet\n  * @function ensureId Adds a unique ID to the tag if no ID defined.\n  * @function uibSend Send a message to the Node-RED server via uibuilder if available.\n  * @function _uibMsgHandler Not yet in use\n  * @function _event (name,data) Standardised custom event dispatcher\n  * @function _ready Call from end of connectedCallback. Sets connected prop and outputs events\n\n * Standard watched attributes (common across all my components):\n  * @property {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n\n * Standard props (common across all my components):\n  * @property {string} baseVersion Static. The component version string (date updated). Also has a getter.\n  * @property {number} _iCount Static. The count of instances of this component that weren't given an id. Creates a unique id as needed.\n  * @property {boolean} uib True if UIBUILDER for Node-RED is loaded\n  * @property {object} uibuilder Reference to loaded UIBUILDER for Node-RED client library if loaded (else undefined)\n  * @property {function(string): Element} $ jQuery-like shadow dom selector\n  * @property {function(string): NodeList} $$  jQuery-like shadow dom multi-selector\n  * @property {boolean} connected False until connectedCallback finishes\n  * @property {string} name Placeholder for the optional name attribute\n  * @property {object} opts This components controllable options - get/set using the `config()` method\n  *\n  * @property {string} version Getter that returns the class version & baseVersion static strings.\n\n * Other props:\n  * By default, all attributes are also created as properties\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass TiBaseComponent extends HTMLElement {\n    /** Component version */\n    static baseVersion = '2025-05-30'\n\n    /** Holds a count of how many instances of this component are on the page that don't have their own id\n     * Used to ensure a unique id if needing to add one dynamically\n     */\n    static _iCount = 0\n\n    /** Is UIBUILDER for Node-RED loaded? */\n    uib = !!window['uibuilder']\n    uibuilder = window['uibuilder']\n\n    /** Mini jQuery-like shadow dom selector (see constructor)\n     * @type {function(string): Element}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {Element} The first element that matches the specified selector.\n     */\n    $\n    /** Mini jQuery-like shadow dom multi-selector (see constructor)\n     * @type {function(string): NodeList}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {NodeList} A STATIC list of all shadow dom elements that match the selector.\n     */\n    $$\n\n    /** True when instance finishes connecting.\n     * Allows initial calls of attributeChangedCallback to be\n     * ignored if needed.\n     */\n    connected = false\n\n    /** Placeholder for the optional name attribute @type {string} */\n    name\n\n    /** Runtime configuration settings @type {object} */\n    opts = {}\n\n    /** Report the current component version string\n     * @returns {string} The component version & base version as a string\n     */\n    static get version() {\n        // @ts-ignore\n        return `${this.componentVersion} (Base: ${this.baseVersion})`\n    }\n\n    // get id() {\n    //     return this.id\n    // }\n\n    // set id(value) {\n    //     // this.id = value\n    //     console.log('>> SETTING ID:', value, this.id, this.getAttribute('id'))\n    // }\n\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n    }\n\n    /** Optionally apply an external linked style sheet (called from connectedCallback)\n     * param {*} url The URL for the linked style sheet\n     */\n    async doInheritStyles() {\n        if (!this.shadowRoot) return\n        if (!this.hasAttribute('inherit-style')) return\n\n        let url = this.getAttribute('inherit-style')\n        if (!url) url = './index.css'\n\n        const linkEl = document.createElement('link')\n        linkEl.setAttribute('type', 'text/css')\n        linkEl.setAttribute('rel', 'stylesheet')\n        linkEl.setAttribute('href', url)\n        this.shadowRoot.appendChild(linkEl)\n\n        console.info(`[${this.localName}] Inherit-style requested. Loading: \"${url}\"`)\n    }\n\n    /** OPTIONAL. Update runtime configuration, return complete config\n     * @param {object|undefined} config If present, partial or full set of options. If undefined, fn returns the current full option settings\n     * @returns {object} The full set of options\n     */\n    config(config) {\n        // Merge config but ensure that default states always present\n        // if (config) this.opts = { ...this.opts, ...config }\n        if (config) this.opts = TiBaseComponent.deepAssign(this.opts, config)\n        return this.opts\n    }\n\n    /** Utility object deep merge fn\n     * @param {object} target Merge target object\n     * @param  {...object} sources 1 or more source objects to merge\n     * @returns {object} Deep merged object\n     */\n    static deepAssign(target, ...sources) {\n        for (let source of sources) { // eslint-disable-line prefer-const\n            for (let k in source) { // eslint-disable-line prefer-const\n                const vs = source[k]\n                const vt = target[k]\n                if (Object(vs) == vs && Object(vt) === vt) {\n                    target[k] = TiBaseComponent.deepAssign(vt, vs)\n                    continue\n                }\n                target[k] = source[k]\n            }\n        }\n        return target\n    }\n\n    /** Ensure that the component instance has a unique ID & check again if uib loaded */\n    ensureId() {\n        // Check again if UIBUILDER for Node-RED is loaded\n        this.uib = !!window['uibuilder']\n\n        if (!this.id) {\n            // if (!this.name) this.name = this.getAttribute('name')\n            // if (this.name) this.id = this.name.toLowerCase().replace(/\\s/g, '_')\n            // else this.id = `${this.localName}-${++this.constructor._iCount}`\n            // @ts-ignore\n            this.id = `${this.localName}-${++this.constructor._iCount}`\n        }\n    }\n\n    /** Creates the $ and $$ fns that do css selections against the shadow dom */\n    createShadowSelectors() {\n        this.$ = this.shadowRoot?.querySelector.bind(this.shadowRoot)\n        this.$$ = this.shadowRoot?.querySelectorAll.bind(this.shadowRoot)\n    }\n\n    /** Handle a `${this.localName}::${this.id}` custom event\n     * Each prop in the msg.payload is set as a prop on the component instance.\n     * @param {object} msg A uibuilder message object\n     */\n    _uibMsgHandler(msg) {\n        // if msg.payload is not an object, ignore\n        if (typeof msg.payload !== 'object') {\n            console.warn(`[${this.localName}] Ignoring msg, payload is not an object:`, msg)\n            return\n        }\n\n        // set properties from the msg\n        Object.keys(msg.payload).forEach(key => {\n            if (key.startsWith('_')) return\n            this[key] = msg.payload[key]\n        })\n    }\n\n    /** Custom event dispacher `component-name:name` with detail data\n     * @example\n     *   this._event('ready')\n     * @example\n     *   this._event('ready', {age: 42, type: 'android'})\n     *\n     * @param {string} evtName A name to give the event, added to the component-name separated with a :\n     * @param {*=} data Optional data object to pass to event listeners via the evt.detail property\n     */\n    _event(evtName, data) {\n        this.dispatchEvent(new CustomEvent(`${this.localName}:${evtName}`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name,\n                data: data,\n            },\n        } ) )\n    }\n\n    /** Send a message to the Node-RED server via uibuilder if available\n     * NB: These web components are NEVER dependent on Node-RED or uibuilder.\n     * @param {string} evtName The event name to send\n     * @param {*} data The data to send\n     */\n    uibSend(evtName, data){\n        if (this.uib) {\n            if (this.uibuilder.ioConnected) {\n                this.uibuilder.send({\n                    topic: `${this.localName}:${evtName}`,\n                    payload: data,\n                    id: this.id,\n                    name: this.name,\n                })\n            } else {\n                console.warn(`[${this.localName}] uibuilder not connected to server, cannot send:`, evtName, data)\n            }\n        }\n    }\n\n    /** Standardised constructor. Keep after call to super()\n     * @param {Node|string} template Nodes/string content that will be cloned into the shadow dom\n     * @param {{mode:'open'|'closed',delegatesFocus:boolean}=} shadowOpts Options passed to attachShadow\n     */\n    _construct(template, shadowOpts) {\n        if (!template) return\n        if (!shadowOpts) shadowOpts = { mode: 'open', delegatesFocus: true, }\n        // Only attach the shadow dom if code and style isolation is needed\n        this.attachShadow(shadowOpts)\n            .append(template)\n\n        // jQuery-like selectors but for the shadow. NB: Returns are STATIC not dynamic lists\n        this.createShadowSelectors()  // in base class\n    }\n\n    /** Standardised connection. Call from the start of connectedCallback fn */\n    _connect() {\n        // Make sure instance has an ID. Create an id from name or calculation if needed\n        this.ensureId()  // in base class\n        // Apply parent styles from a stylesheet if required - only required if using an applied template\n        this.doInheritStyles()  // in base class\n\n        // Listen for a uibuilder msg that is targetted at this instance of the component\n        if (this.uib) this.uibuilder.onTopic(`${this.localName}::${this.id}`, this._uibMsgHandler.bind(this) )\n    }\n\n    /** Standardised disconnection. Call from the END of disconnectedCallback fn */\n    _disconnect() {\n        // @ts-ignore Remove optional uibuilder event listener\n        document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler )\n\n        // Keep at end. Let everyone know that an instance of the component has been disconnected\n        this._event('disconnected')\n    }\n\n    /** Call from end of connectedCallback */\n    _ready() {\n        this.connected = true\n        this._event('connected')\n        this._event('ready')\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default TiBaseComponent\n\n// This is a library class so don't self-register, it is only for inclusion in actual components\n", "/** Define a new zero dependency custom web component ECMA module that can be used as an HTML tag\n *\n * Version: See the class code\n *\n */\n/** Copyright (c) 2024-2024 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** TODO\n * - Make deep dynamic additions work (currently only works on initial load)\n * - Add a host attrib or class to allow sections to be pre-hidden (add to the hx tag?)\n *   - sub-option to store collapsed sections in browser storage (probably needs ID's to be added to all heads and wrappers)\n * - Maybe add another option to make headings auto-numbered?\n * - Add option for an icon\n * - How to ignore outer div (as delivered by uib-element) - maybe something with observer?\n */\n\nimport TiBaseComponent from '../libs/ti-base-component'\n\n/** Only use a template if you want to isolate the code and CSS */\nconst template = document.createElement('template')\ntemplate.innerHTML = /*html*/`\n    <style>\n        :host {\n            display: block;   /* default is inline */\n            contain: content; /* performance boost */\n        }\n    </style>\n    <slot></slot>\n`\n\n/** Namespace\n * @namespace Beta\n */\n\n/**\n * @class\n * @augments TiBaseComponent\n * @description Wraps around HTML text with headings h1-h4 making the headings a collapsible hierarchy.\n *\n * @element collapsible-headings\n * @memberOf Beta\n\n * METHODS FROM BASE: (see TiBaseComponent)\n * STANDARD METHODS:\n  * @function attributeChangedCallback Called when an attribute is added, removed, updated or replaced\n  * @function connectedCallback Called when the element is added to a document\n  * @function constructor Construct the component\n  * @function disconnectedCallback Called when the element is removed from a document\n\n * OTHER METHODS:\n  * None\n\n * CUSTOM EVENTS:\n  * \"component-template:connected\" - When an instance of the component is attached to the DOM. `evt.details` contains the details of the element.\n  * \"component-template:ready\" - Alias for connected. The instance can handle property & attribute changes\n  * \"component-template:disconnected\" - When an instance of the component is removed from the DOM. `evt.details` contains the details of the element.\n  * \"component-template:attribChanged\" - When a watched attribute changes. `evt.details.data` contains the details of the change.\n  * NOTE that listeners can be attached either to the `document` or to the specific element instance.\n\n * Standard watched attributes (common across all my components):\n * @property {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n * @property {string} name - Optional. HTML name attribute. Included in output _meta prop.\n\n * Other watched attributes:\n * @property {string} levels - Optional. Default='h2, h3, h4, h5'. A single string detailing the heading levels to make collapsible.\n\n * PROPS FROM BASE: (see TiBaseComponent)\n * OTHER STANDARD PROPS:\n  * @property {string} componentVersion Static. The component version string (date updated). Also has a getter that returns component and base version strings.\n\n * Other props:\n  * @property {string} level Default='h2, h3, h4, h5'. A single string detailing the heading levels to make collapsible.\n  * By default, all attributes are also created as properties\n\n * @slot Container contents\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass CollapsibleHeadings extends TiBaseComponent {\n    /** Component version */\n    static componentVersion = '2025-02-25'\n\n    levels = 'h2, h3, h4, h5'\n\n    /** Makes HTML attribute change watched\n     * @returns {Array<string>} List of all of the html attribs (props) listened to\n     */\n    static get observedAttributes() {\n        return [\n            // Standard watched attributes:\n            'inherit-style', 'name',\n            // Other watched attributes:\n            'levels',\n        ]\n    }\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n        // Only attach the shadow dom if code and style isolation is needed - comment out if shadow dom not required\n        if (template && template.content) this._construct(template.content.cloneNode(true))\n    }\n\n    /** Runs when an instance is added to the DOM */\n    connectedCallback() {\n        this._connect() // Keep at start.\n\n        // Get a reference to the slot tag\n        this.shadowSlot = this.shadowRoot.querySelector('slot')\n\n        // Create a mutation observer that processes changes to the content of the slot\n        this.observer = new MutationObserver((mutations) => {\n            this.processSlotContent(mutations)\n        })\n        this.observer.observe(this, { childList: true, subtree: true, })\n\n        // Cannot use the slotchange event as it doesn't fire except for top-level changes to the slot, not deep changes.\n\n        // Do a first pass to process the initial load\n        this.processSlotContent()\n\n        this._ready() // Keep at end. Let everyone know that a new instance of the component has been connected & is ready\n    }\n\n    /** Runs when an instance is removed from the DOM */\n    disconnectedCallback() {\n        // Remove the observer\n        this.observer.disconnect()\n\n        this._disconnect() // Keep at end.\n    }\n\n    /** Runs when an observed attribute changes - Note: values are always strings\n     * @param {string} attrib Name of watched attribute that has changed\n     * @param {string} oldVal The previous attribute value\n     * @param {string} newVal The new attribute value\n     */\n    attributeChangedCallback(attrib, oldVal, newVal) {\n        /** Optionally ignore attrib changes until instance is fully connected\n         * Otherwise this can fire BEFORE everthing is fully connected.\n         */\n        // if (!this.connected) return\n\n        // Don't bother if the new value same as old\n        if ( oldVal === newVal ) return\n        // Create a property from the value - WARN: Be careful with name clashes\n        this[attrib] = newVal\n\n        // Add other dynamic attribute processing here.\n        // If attribute processing doesn't need to be dynamic, process in connectedCallback as that happens earlier in the lifecycle\n\n        // Keep at end. Let everyone know that an attribute has changed for this instance of the component\n        this._event('attribChanged', { attribute: attrib, newVal: newVal, oldVal: oldVal, })\n    }\n\n    /** Walk through slot content.\n     * Called once when connected and then every time slot content changes\n     * param {*} records Mutated records\n     * param {*} observer Reference to the observer object\n     * @param {MutationRecord[]} [mutations] Optional. The mutation records to process\n     */\n    processSlotContent(mutations) {\n        // console.log('>> Processing slot content >>', mutations, this)\n        // mutations.forEach((mutation) => {\n        //     console.log('>> Mutation >>', mutation)\n        //     mutation.addedNodes.forEach(node => {\n        //         console.log('>> Mutation:addedNode >>', node)\n        //         if (node.nodeType === Node.ELEMENT_NODE) {\n        //             // this.processElement(/** @type {HTMLElement} */ (node))\n        //         }\n        //     })\n        // })\n\n        // Get the contents of the slot\n        const assignedNodes = this.shadowSlot.assignedNodes({ flatten: true, })\n        // console.log('>> Assigned nodes >>', assignedNodes)\n        // NB: assignedElements would be better but not supported in Safari 12.1/12.2\n\n        assignedNodes.forEach(node => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                this.processElement(/** @type {HTMLElement} */ (node))\n            }\n        })\n    }\n\n    /** Process each found element node. Adds pointer cursor to the heading and wraps content in a div that can be collapsed.\n     * @param {HTMLElement} element The HTML element to process\n     */\n    processElement(element) {\n        // console.log('>> Processing element >>', element)\n\n        if (!element.matches(this.levels) || element.dataset.collapsibleProcessed) return\n\n        const level = parseInt(element.tagName[1])\n        const nextElements = []\n\n        let sibling = element.nextElementSibling\n        while (sibling) {\n            if (sibling.matches(this.levels) && parseInt(sibling.tagName[1]) <= level) {\n                break\n            }\n            nextElements.push(sibling)\n            sibling = sibling.nextElementSibling\n        }\n\n        // Create a collapsible section for content under the heading\n        const collapsibleSection = document.createElement('div')\n        collapsibleSection.classList.add('collapsible-content')\n        // @ts-ignore\n        collapsibleSection.dataset.level = level\n\n        nextElements.forEach(el => collapsibleSection.appendChild(el))\n\n        element.insertAdjacentElement('afterend', collapsibleSection)\n        element.style.cursor = 'pointer'\n\n        // Add click event to toggle collapsible section\n        element.addEventListener('click', function () {\n            const isCollapsed = collapsibleSection.style.display === 'none'\n            collapsibleSection.style.display = isCollapsed ? 'block' : 'none'\n        })\n\n        // Mark this heading as processed\n        element.dataset.collapsibleProcessed = 'true'\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default CollapsibleHeadings\n\n/** Self register the class to global\n * Enables new data lists to be dynamically added via JS\n * and lets the static methods be called\n */\nwindow['CollapsibleHeadings'] = CollapsibleHeadings\n\n// Self-register the HTML tag\ncustomElements.define('collapsible-headings', CollapsibleHeadings)\n"],
  "mappings": "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",
  "names": ["TiBaseComponent", "_TiBaseComponent", "url", "linkEl", "config", "target", "sources", "source", "k", "vs", "vt", "msg", "key", "evtName", "data", "template", "shadowOpts", "ti_base_component_default", "template", "CollapsibleHeadings", "ti_base_component_default", "mutations", "attrib", "oldVal", "newVal", "node", "element", "level", "nextElements", "sibling", "collapsibleSection", "el", "isCollapsed", "collapsible_headings_default"]
}
