{
  "version": 3,
  "sources": ["../libs/ti-base-component.js", "../src/call-out.js"],
  "sourcesContent": ["/** Define the base component extensions for other components in this package.\n * Used to ensure that standard properties and methods are available in every component.\n *\n * Version: See the class code\n *\n **/\n/** Copyright (c) 2024-2025 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\n/** Namespace\n * @namespace Library\n */\n\n/**\n * @class\n * @extends HTMLElement\n * @description Define the base component extensions for other components in this package.\n *\n * @element ti-base-component\n * @memberOf Library\n\n * STANDARD METHODS:\n  * @method config Update runtime configuration, return complete config\n  * @method createShadowSelectors Creates the jQuery-like $ and $$ methods\n  * @method deepAssign Object deep merger\n  * @method doInheritStyles If requested, add link to an external style sheet\n  * @method ensureId Adds a unique ID to the tag if no ID defined.\n  * @method uibSend Send a message to the Node-RED server via uibuilder if available.\n  * @method _uibMsgHandler Not yet in use\n  * @method _event(name,data) Standardised custom event dispatcher\n  * @method _ready Call from end of connectedCallback. Sets connected prop and outputs events\n\n * Standard watched attributes (common across all my components):\n  * @attr {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n\n * Standard props (common across all my components):\n  * @prop {string} baseVersion Static. The component version string (date updated). Also has a getter.\n  * @prop {number} _iCount Static. The count of instances of this component that weren't given an id. Creates a unique id as needed.\n  * @prop {boolean} uib True if UIBUILDER for Node-RED is loaded\n  * @prop {object} uibuilder Reference to loaded UIBUILDER for Node-RED client library if loaded (else undefined)\n  * @prop {function(string): Element} $ jQuery-like shadow dom selector\n  * @prop {function(string): NodeList} $$  jQuery-like shadow dom multi-selector\n  * @prop {boolean} connected False until connectedCallback finishes\n  * @prop {string} name Placeholder for the optional name attribute\n  * @prop {object} opts This components controllable options - get/set using the `config()` method\n  * \n  * @prop {string} version Getter that returns the class version & baseVersion static strings.\n\n * Other props:\n  * By default, all attributes are also created as properties\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass TiBaseComponent extends HTMLElement {\n    /** Component version */\n    static baseVersion = '2025-01-13'\n\n    /** Holds a count of how many instances of this component are on the page that don't have their own id\n     * Used to ensure a unique id if needing to add one dynamically\n     */\n    static _iCount = 0\n\n    /** Is UIBUILDER for Node-RED loaded? */\n    uib = !!window['uibuilder']\n    uibuilder = window['uibuilder']\n\n    /** Mini jQuery-like shadow dom selector (see constructor)\n     * @type {function(string): Element}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {Element} The first element that matches the specified selector.\n     */\n    $\n    /** Mini jQuery-like shadow dom multi-selector (see constructor)\n     * @type {function(string): NodeList}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {NodeList} A STATIC list of all shadow dom elements that match the selector.\n     */\n    $$\n\n    /** True when instance finishes connecting.\n     * Allows initial calls of attributeChangedCallback to be\n     * ignored if needed. */\n    connected = false\n\n    /** Placeholder for the optional name attribute @type {string} */\n    name\n\n    /** Runtime configuration settings @type {object} */\n    opts = {}\n\n    /** Report the current component version string */\n    static get version() {\n        // @ts-ignore\n        return `${this.componentVersion} (Base: ${this.baseVersion})`\n    }\n\n    // get id() {\n    //     return this.id\n    // }\n\n    // set id(value) {\n    //     // this.id = value\n    //     console.log('>> SETTING ID:', value, this.id, this.getAttribute('id'))\n    // }\n\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n    }\n\n    /** Optionally apply an external linked style sheet (called from connectedCallback)\n     * @param {*} url The URL for the linked style sheet\n     */\n    async doInheritStyles() {\n        if (!this.hasAttribute('inherit-style')) return\n\n        let url = this.getAttribute('inherit-style')\n        if (!url) url = './index.css'\n\n        const linkEl = document.createElement('link')\n        linkEl.setAttribute('type', 'text/css')\n        linkEl.setAttribute('rel', 'stylesheet')\n        linkEl.setAttribute('href', url)\n        // @ts-ignore\n        this.shadowRoot.appendChild(linkEl)\n\n        console.info(`[${this.localName}] Inherit-style requested. Loading: \"${url}\"`)\n    }\n\n    /** OPTIONAL. Update runtime configuration, return complete config\n     * @param {object|undefined} config If present, partial or full set of options. If undefined, fn returns the current full option settings\n     */\n    config(config) {\n        // Merge config but ensure that default states always present\n        // if (config) this.opts = { ...this.opts, ...config }\n        if (config) this.opts = TiBaseComponent.deepAssign(this.opts, config)\n        return this.opts\n    }\n\n    /** Utility object deep merge fn\n     * @param {object} target Merge target object\n     * @param  {...object} sources 1 or more source objects to merge\n     * @returns {object} Deep merged object\n     */\n    static deepAssign(target, ...sources) {\n        for (let source of sources) { // eslint-disable-line prefer-const\n            for (let k in source) { // eslint-disable-line prefer-const\n                const vs = source[k]\n                const vt = target[k]\n                if (Object(vs) == vs && Object(vt) === vt) { // eslint-disable-line eqeqeq\n                    target[k] = TiBaseComponent.deepAssign(vt, vs)\n                    continue\n                }\n                target[k] = source[k]\n            }\n        }\n        return target\n    }\n\n    /** Ensure that the component instance has a unique ID & check again if uib loaded */\n    ensureId() {\n        // Check again if UIBUILDER for Node-RED is loaded\n        this.uib = !!window['uibuilder']\n\n        if (!this.id) {\n            // if (!this.name) this.name = this.getAttribute('name')\n            // if (this.name) this.id = this.name.toLowerCase().replace(/\\s/g, '_')\n            // else this.id = `${this.localName}-${++this.constructor._iCount}`\n            // @ts-ignore\n            this.id = `${this.localName}-${++this.constructor._iCount}`\n        }\n    }\n\n    /** Creates the $ and $$ fns that do css selections against the shadow dom */\n    createShadowSelectors() {\n        this.$ = this.shadowRoot?.querySelector.bind(this.shadowRoot)\n        this.$$ = this.shadowRoot?.querySelectorAll.bind(this.shadowRoot)\n    }\n\n    /** Handle a `${this.localName}::${this.id}` custom event\n     * Each prop in the msg.payload is set as a prop on the component instance.\n     * @param {object} msg A uibuilder message object\n     */\n    _uibMsgHandler(msg) {\n        // if msg.payload is not an object, ignore\n        if (typeof msg.payload !== 'object') {\n            console.warn(`[${this.localName}] Ignoring msg, payload is not an object:`, msg)\n            return\n        }\n\n        // set properties from the msg\n        Object.keys(msg.payload).forEach(key => {\n            if (key.startsWith('_')) return\n            this[key] = msg.payload[key]\n        })\n    }\n\n    /** Custom event dispacher `component-name:name` with detail data\n     * @example\n     *   this._event('ready')\n     * @example\n     *   this._event('ready', {age: 42, type: 'android'})\n     *\n     * @param {string} evtName A name to give the event, added to the component-name separated with a :\n     * @param {*=} data Optional data object to pass to event listeners via the evt.detail property\n     */\n    _event(evtName, data) {\n        this.dispatchEvent(new CustomEvent(`${this.localName}:${evtName}`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name,\n                data: data,\n            },\n        } ) )\n    }\n\n    /** Send a message to the Node-RED server via uibuilder if available\n     * NB: These web components are NEVER dependent on Node-RED or uibuilder.\n     * @param {string} evtName The event name to send\n     * @param {*} data The data to send\n     */\n    uibSend(evtName, data){\n        if (this.uib) {\n            if (this.uibuilder.ioConnected) {\n                this.uibuilder.send({\n                    topic: `${this.localName}:${evtName}`,\n                    payload: data,\n                    id: this.id,\n                    name: this.name,\n                })\n            } else {\n                console.warn(`[${this.localName}] uibuilder not connected to server, cannot send:`, evtName, data)\n            }\n        }\n    }\n\n    /** Standardised constructor. Keep after call to super()\n     * @param {Node|string} template Nodes/string content that will be cloned into the shadow dom\n     * @param {{mode:'open'|'closed',delegatesFocus:boolean}=} shadowOpts Options passed to attachShadow\n     */\n    _construct(template, shadowOpts) {\n        if (!shadowOpts) shadowOpts = { mode: 'open', delegatesFocus: true }\n        // Only attach the shadow dom if code and style isolation is needed\n        this.attachShadow(shadowOpts)\n            .append(template)\n\n        // jQuery-like selectors but for the shadow. NB: Returns are STATIC not dynamic lists\n        this.createShadowSelectors()  // in base class\n    }\n\n    /** Standardised connection. Call from the start of connectedCallback fn */\n    _connect() {\n        // Make sure instance has an ID. Create an id from name or calculation if needed\n        this.ensureId()  // in base class\n        // Apply parent styles from a stylesheet if required - only required if using an applied template\n        this.doInheritStyles()  // in base class\n\n        // Listen for a uibuilder msg that is targetted at this instance of the component\n        if (this.uib) this.uibuilder.onTopic(`${this.localName}::${this.id}`, this._uibMsgHandler.bind(this) )\n    }\n\n    /** Standardised disconnection. Call from the END of disconnectedCallback fn */\n    _disconnect() {\n        // @ts-ignore Remove optional uibuilder event listener\n        document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler )\n\n        // Keep at end. Let everyone know that an instance of the component has been disconnected\n        this._event('disconnected')\n    }\n\n    /** Call from end of connectedCallback */\n    _ready() {\n        this.connected = true\n        this._event('connected')\n        this._event('ready')\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default TiBaseComponent\n\n// This is a library class so don't self-register, it is only for inclusion in actual components\n", "/** Define a new zero dependency custom web component ECMA module that can be used to show a GitHub Markdown-style callout box\n * Version: See the class code\n **/\n/** Copyright (c) 2024-2024 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\n/** TODO\n * - Use a css var for background transparency\n * - Allow for a different background in the head\n * - Use html in head, not just text.\n * - Allow for image icons\n * - use uib-brand css variables with fallbacks\n * - Consider backgrounds matching the color but with transparency\n * + Move initial processing to connected callback, add setters for type/icon/title and may changes dynamically, change attrib chg to dynamic upds\n */\n\nimport TiBaseComponent from '../libs/ti-base-component'\n\n/** Only use a template if you want to isolate the code and CSS */\n// const template = document.createElement('template')\n// template.innerHTML = /*html*/`\n//     <style>\n//         :host {\n//             display: block;   /* default is inline */\n//             contain: content; /* performance boost */\n//         }\n//     </style>\n//     <slot></slot>\n// `\n\n/** Namespace\n * @namespace Alpha\n */\n\n/**\n * @class\n * @extends TiBaseComponent\n * @description Define a new zero dependency custom web component that outputs a standardised callout box\n *\n * @element call-out\n * @memberOf Alpha\n\n * METHODS FROM BASE:\n * @method config Update runtime configuration, return complete config\n * @method createShadowSelectors Creates the jQuery-like $ and $$ methods\n * @method deepAssign Object deep merger\n * @method doInheritStyles If requested, add link to an external style sheet\n * @method ensureId Adds a unique ID to the tag if no ID defined.\n * @method _uibMsgHandler Not yet in use\n * @method _event(name,data) Standardised custom event dispatcher\n * @method _ready Call from end of connectedCallback. Sets connected prop and outputs events\n\n * OTHER METHODS:\n * None\n\n * @fires call-out:connected - When an instance of the component is attached to the DOM. `evt.details` contains the details of the element.\n * @fires call-out:ready - Alias for connected. The instance can handle property & attribute changes\n * @fires call-out:disconnected - When an instance of the component is removed from the DOM. `evt.details` contains the details of the element.\n * @fires call-out:attribChanged - When a watched attribute changes. `evt.details` contains the details of the change.\n * NOTE that listeners can be attached either to the `document` or to the specific element instance.\n\n * Standard watched attributes (common across all my components):\n * @attr {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n * @attr {string} name - Optional. HTML name attribute. Included in output _meta prop.\n\n * Other watched attributes:\n * @attr {string} type - Optional. If present, a title will be added above other child content\n * @attr {string} icon - Optional. If present, will override the callout title icon\n\n * Non-watched but still used attributes:\n * @attr {string} title - Optional. If present, will override the callout title text\n\n * Standard props (common across all my components):\n * @prop {number} _iCount Static. The component version string (date updated)\n * @prop {boolean} uib True if UIBUILDER for Node-RED is loaded\n * @prop {function(string): Element} $ jQuery-like shadow dom selector\n * @prop {function(string): NodeList} $$  jQuery-like shadow dom multi-selector\n * @prop {boolean} connected False until connectedCallback finishes\n * @prop {string} name Placeholder for the optional name attribute\n * @prop {object} opts This components controllable options - get/set using the `config()` method\n *\n * @prop {string} version Static. The component version string (date updated). Also has a getter that returns component and base version strings.\n\n * Other props:\n * By default, all attributes are also created as properties\n\n * @slot Container contents\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass CallOut extends TiBaseComponent {\n    /** Component version */\n    static componentVersion = '2024-10-06'\n\n    /** Makes HTML attribute change watched\n     * @returns {Array<string>} List of all of the html attribs (props) listened to\n     */\n    static get observedAttributes() {\n        return [\n            // Standard watched attributes:\n            'inherit-style', 'name',\n            // Other watched attributes:\n            'type', 'icon', 'title',\n        ]\n    }\n\n    type = ''\n    icon = ''\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n\n        // Only attach the shadow dom if code and style isolation is needed - comment out if shadow dom not required\n        // this._construct(template.content.cloneNode(true))\n\n        // Apply styles using a <style> tag in the light DOM\n        const style = document.createElement('style')\n        style.textContent = `\n        ${this.localName} {\n            --callout-color: inherit;\n            --callout-bgcolor: hsl(207.1deg 63.27% 40% /0.15);\n            --parent-color: inherit;\n            display: block;\n            border: 1px solid silver;\n            border-left: .25rem solid var(--callout-color, silver);\n            margin-bottom: 1rem;\n            padding: .75rem 1.25rem;\n            border-radius: 0.25rem;\n            background-color: var(--callout-bgcolor, inherit);\n        }\n        ${this.localName} > .co-head {\n            color: var(--callout-color, inherit);\n            font-weight: bolder;\n        }\n        `\n        // this.appendChild(style)\n        document.head.appendChild(style)\n    }\n\n    /** Runs when an instance is added to the DOM */\n    connectedCallback() {\n        this._connect() // Keep at start.\n\n        this.type = this.getAttribute('type')\n        this.icon = this.getAttribute('icon')\n\n        this.doType(this.type)\n\n        this._ready() // Keep at end. Let everyone know that a new instance of the component has been connected & is ready\n    }\n\n    /** Runs when an instance is removed from the DOM */\n    disconnectedCallback() {\n        this._disconnect() // Keep at end.\n    }\n\n    /** Runs when an observed attribute changes - Note: values are always strings\n     * @param {string} attrib Name of watched attribute that has changed\n     * @param {string} oldVal The previous attribute value\n     * @param {string} newVal The new attribute value\n     */\n    attributeChangedCallback(attrib, oldVal, newVal) {\n        /** Optionally ignore attrib changes until instance is fully connected\n         * Otherwise this can fire BEFORE everthing is fully connected.\n         */\n        if (!this.connected) return\n\n        // Don't bother if the new value same as old\n        if ( oldVal === newVal ) return\n        // Create a property from the value - WARN: Be careful with name clashes\n        this[attrib] = newVal\n\n        // Add other dynamic attribute processing here.\n        // If attribute processing doesn't need to be dynamic, process in connectedCallback as that happens earlier in the lifecycle\n        \n        if (attrib === 'type') this.doType(this.type)\n\n        // Keep at end. Let everyone know that an attribute has changed for this instance of the component\n        this._event('attribChanged', { attribute: attrib, newVal: newVal, oldVal: oldVal })\n    }\n\n    doType(type) {\n        if (!type) type = null\n        else type = type.toLowerCase()\n\n        // new element to add\n        const headEl = document.createElement('div')\n        headEl.className = 'co-head'\n\n        let headText = ''\n        let headIcon = ''\n        let headStyle = 'inherit'\n\n        switch (type) {\n            // These supported by GitHub, Typora, Docsify, Obsidian\n            case 'note': {\n                headIcon = '\u2139\uFE0F '\n                headText = 'Note'\n                headStyle = '--callout-color: hsl(188.2deg 77.78% 40.59%);'\n                break\n            }\n        \n            case 'hint':\n            case 'tip': {\n                headIcon = '\uD83D\uDCA1 '\n                headText = 'Tip'\n                headStyle = '--callout-color: hsl(133.7deg 61.35% 40.59%);'\n                break\n            }\n        \n            case 'warn':\n            case 'warning': {\n                headIcon = '\u26A0\uFE0F '\n                headText = 'Warning'\n                headStyle = '--callout-color: var(--warning-intense, hsl(35.19deg 84.38% 62.35%));'\n                break\n            }\n        \n            // These supported by GitHub, Typora, Obsidian\n            case 'important': {\n                headIcon = '\uD83D\uDD16 '\n                headText = 'Important'\n                headStyle = '--callout-color: hsl(262.44deg 89.78% 73.14%);'\n                break\n            }\n        \n            case 'caution': {\n                headIcon = '\u2757 '\n                headText = 'Caution'\n                headStyle = '--callout-color: hsl(2.74deg 92.59% 62.94%);'\n                break\n            }\n        \n            default: {\n                break\n            }\n        }\n\n        if (this.title) {\n            headText = this.title\n        }\n\n        if (this.icon) {\n            headIcon = `${this.icon} `\n        }\n\n        if (headText) {\n            headEl.textContent = `${headIcon}${headText}`\n            this.style = headStyle\n            this.prepend(headEl)\n        }\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default CallOut\n\n/** Self register the class to global\n * Enables new data lists to be dynamically added via JS\n * and lets the static methods be called\n */\nwindow['CallOut'] = CallOut\n\n// Self-register the HTML tag\ncustomElements.define('call-out', CallOut)\n"],
  "mappings": "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",
  "names": ["TiBaseComponent", "_TiBaseComponent", "url", "linkEl", "config", "target", "sources", "source", "k", "vs", "vt", "msg", "key", "evtName", "data", "template", "shadowOpts", "ti_base_component_default", "CallOut", "ti_base_component_default", "style", "attrib", "oldVal", "newVal", "type", "headEl", "headText", "headIcon", "headStyle", "call_out_default"]
}
