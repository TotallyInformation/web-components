{
  "version": 3,
  "sources": ["../libs/ti-base-component.js", "../src/data-list.js"],
  "sourcesContent": ["/** Define the base component extensions for other components in this package.\n * Used to ensure that standard properties and methods are available in every component.\n *\n * Version: See the class code\n *\n */\n/** Copyright (c) 2024-2025 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Namespace\n * @namespace Library\n */\n\n/**\n * @class\n * @augments HTMLElement\n * @description Define the base component extensions for other components in this package.\n *\n * @element ti-base-component\n * @memberOf Library\n\n * STANDARD METHODS:\n  * @function config Update runtime configuration, return complete config\n  * @function createShadowSelectors Creates the jQuery-like $ and $$ methods\n  * @function deepAssign Object deep merger\n  * @function doInheritStyles If requested, add link to an external style sheet\n  * @function ensureId Adds a unique ID to the tag if no ID defined.\n  * @function uibSend Send a message to the Node-RED server via uibuilder if available.\n  * @function _uibMsgHandler Not yet in use\n  * @function _event (name,data) Standardised custom event dispatcher\n  * @function _ready Call from end of connectedCallback. Sets connected prop and outputs events\n\n * Standard watched attributes (common across all my components):\n  * @property {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n\n * Standard props (common across all my components):\n  * @property {string} baseVersion Static. The component version string (date updated). Also has a getter.\n  * @property {number} _iCount Static. The count of instances of this component that weren't given an id. Creates a unique id as needed.\n  * @property {boolean} uib True if UIBUILDER for Node-RED is loaded\n  * @property {object} uibuilder Reference to loaded UIBUILDER for Node-RED client library if loaded (else undefined)\n  * @property {function(string): Element} $ jQuery-like shadow dom selector\n  * @property {function(string): NodeList} $$  jQuery-like shadow dom multi-selector\n  * @property {boolean} connected False until connectedCallback finishes\n  * @property {string} name Placeholder for the optional name attribute\n  * @property {object} opts This components controllable options - get/set using the `config()` method\n  *\n  * @property {string} version Getter that returns the class version & baseVersion static strings.\n\n * Other props:\n  * By default, all attributes are also created as properties\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass TiBaseComponent extends HTMLElement {\n    /** Component version */\n    static baseVersion = '2025-06-03'\n\n    /** Holds a count of how many instances of this component are on the page that don't have their own id\n     * Used to ensure a unique id if needing to add one dynamically\n     */\n    static _iCount = 0\n\n    /** Is UIBUILDER for Node-RED loaded? */\n    uib = !!window['uibuilder']\n    uibuilder = window['uibuilder']\n\n    /** Mini jQuery-like shadow dom selector (see constructor)\n     * @type {function(string): Element}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {Element} The first element that matches the specified selector.\n     */\n    $\n    /** Mini jQuery-like shadow dom multi-selector (see constructor)\n     * @type {function(string): NodeList}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {NodeList} A STATIC list of all shadow dom elements that match the selector.\n     */\n    $$\n\n    /** True when instance finishes connecting.\n     * Allows initial calls of attributeChangedCallback to be\n     * ignored if needed.\n     */\n    connected = false\n\n    /** Placeholder for the optional name attribute @type {string} */\n    name\n\n    /** Runtime configuration settings @type {object} */\n    opts = {}\n\n    /** Report the current component version string\n     * @returns {string} The component version & base version as a string\n     */\n    static get version() {\n        // @ts-ignore\n        return `${this.componentVersion} (Base: ${this.baseVersion})`\n    }\n\n    // get id() {\n    //     return this.id\n    // }\n\n    // set id(value) {\n    //     // this.id = value\n    //     console.log('>> SETTING ID:', value, this.id, this.getAttribute('id'))\n    // }\n\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n    }\n\n    /** OPTIONAL. Update runtime configuration, return complete config\n     * @param {object|undefined} config If present, partial or full set of options. If undefined, fn returns the current full option settings\n     * @returns {object} The full set of options\n     */\n    config(config) {\n        // Merge config but ensure that default states always present\n        // if (config) this.opts = { ...this.opts, ...config }\n        if (config) this.opts = TiBaseComponent.deepAssign(this.opts, config)\n        return this.opts\n    }\n\n    /** Creates the $ and $$ fns that do css selections against the shadow dom */\n    createShadowSelectors() {\n        this.$ = this.shadowRoot?.querySelector.bind(this.shadowRoot)\n        this.$$ = this.shadowRoot?.querySelectorAll.bind(this.shadowRoot)\n    }\n\n    /** Utility object deep merge fn\n     * @param {object} target Merge target object\n     * @param  {...object} sources 1 or more source objects to merge\n     * @returns {object} Deep merged object\n     */\n    static deepAssign(target, ...sources) {\n        for (let source of sources) { // eslint-disable-line prefer-const\n            for (let k in source) { // eslint-disable-line prefer-const\n                const vs = source[k]\n                const vt = target[k]\n                if (Object(vs) == vs && Object(vt) === vt) {\n                    target[k] = TiBaseComponent.deepAssign(vt, vs)\n                    continue\n                }\n                target[k] = source[k]\n            }\n        }\n        return target\n    }\n\n    /** Optionally apply an external linked style sheet for Shadow DOM (called from connectedCallback)\n     * param {*} url The URL for the linked style sheet\n     */\n    async doInheritStyles() {\n        if (!this.shadowRoot) return\n        if (!this.hasAttribute('inherit-style')) return\n\n        let url = this.getAttribute('inherit-style')\n        if (!url) url = './index.css'\n\n        const linkEl = document.createElement('link')\n        linkEl.setAttribute('type', 'text/css')\n        linkEl.setAttribute('rel', 'stylesheet')\n        linkEl.setAttribute('href', url)\n        this.shadowRoot.appendChild(linkEl)\n\n        console.info(`[${this.localName}] Inherit-style requested. Loading: \"${url}\"`)\n    }\n\n    /** Ensure that the component instance has a unique ID & check again if uib loaded */\n    ensureId() {\n        // Check again if UIBUILDER for Node-RED is loaded\n        this.uib = !!window['uibuilder']\n\n        if (!this.id) {\n            // if (!this.name) this.name = this.getAttribute('name')\n            // if (this.name) this.id = this.name.toLowerCase().replace(/\\s/g, '_')\n            // else this.id = `${this.localName}-${++this.constructor._iCount}`\n            // @ts-ignore\n            this.id = `${this.localName}-${++this.constructor._iCount}`\n        }\n    }\n\n    /** Attaches a new stylesheet before all other stylesheets in the light DOM\n     * @param {string} cssText - CSS text to inject directly\n     * @param {number} order - Optional order/priority for stylesheet placement. Lower numbers = higher priority (inserted first). Defaults to 0.\n     * @returns {Element} The created or existing style element\n     * @throws {Error} If cssText is not provided\n     * @example\n     * // Inject CSS text directly with default order\n     * dataList.prependStylesheet('.custom { color: hsl(0, 100%, 50%); }')\n     *\n     * // Inject CSS with specific order (lower number = higher priority)\n     * dataList.prependStylesheet('.base { font-size: 1rem; }', 1)\n     * dataList.prependStylesheet('.critical { color: hsl(0, 100%, 50%); }', 0)\n     */\n    prependStylesheet(cssText, order = 0) {\n        if (!cssText) {\n            throw new Error(`[${this.localName}] cssText must be provided`)\n        }\n\n        // TODO: - Add ability to append after other stylesheets (inlcuding those in the HTML head)\n\n        // Check if same stylesheet already exists\n        const existingStylesheet = this._findExistingStylesheet()\n        // If so, return existing element instead of creating duplicate\n        if (existingStylesheet) return existingStylesheet\n\n        // Create style element with direct CSS text\n        const styleElement = document.createElement('style')\n        styleElement.textContent = cssText\n        styleElement.setAttribute('data-component', this.localName)\n        styleElement.setAttribute('data-order', order.toString())\n\n        // Prepend to light DOM (document head) with order consideration\n        this._prependToDocumentHead(styleElement, order)\n        return styleElement\n    }\n\n    /** Send a message to the Node-RED server via uibuilder if available\n     * NB: These web components are NEVER dependent on Node-RED or uibuilder.\n     * @param {string} evtName The event name to send\n     * @param {*} data The data to send\n     */\n    uibSend(evtName, data){\n        if (this.uib) {\n            if (this.uibuilder.ioConnected) {\n                this.uibuilder.send({\n                    topic: `${this.localName}:${evtName}`,\n                    payload: data,\n                    id: this.id,\n                    name: this.name,\n                })\n            } else {\n                console.warn(`[${this.localName}] uibuilder not connected to server, cannot send:`, evtName, data)\n            }\n        }\n    }\n\n    // #region ---- Methods private to extended classes ----\n    // These are called from a class that extends this base class but should not be called directly by the user.\n\n    /** Standardised connection. Call from the start of connectedCallback fn */\n    _connect() {\n        // Make sure instance has an ID. Create an id from name or calculation if needed\n        this.ensureId()  // in base class\n        // Apply parent styles from a stylesheet if required - only required if using an applied template\n        this.doInheritStyles()  // in base class\n\n        // Listen for a uibuilder msg that is targetted at this instance of the component\n        if (this.uib) this.uibuilder.onTopic(`${this.localName}::${this.id}`, this._uibMsgHandler.bind(this) )\n    }\n\n    /** Standardised constructor. Keep after call to super()\n     * @param {Node|string} template Nodes/string content that will be cloned into the shadow dom\n     * @param {{mode:'open'|'closed',delegatesFocus:boolean}=} shadowOpts Options passed to attachShadow\n     */\n    _construct(template, shadowOpts) {\n        if (!template) return\n        if (!shadowOpts) shadowOpts = { mode: 'open', delegatesFocus: true, }\n        // Only attach the shadow dom if code and style isolation is needed\n        this.attachShadow(shadowOpts)\n            .append(template)\n\n        // jQuery-like selectors but for the shadow. NB: Returns are STATIC not dynamic lists\n        this.createShadowSelectors()  // in base class\n    }\n\n    /** Standardised disconnection. Call from the END of disconnectedCallback fn */\n    _disconnect() {\n        // @ts-ignore Remove optional uibuilder event listener\n        document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler )\n\n        // Keep at end. Let everyone know that an instance of the component has been disconnected\n        this._event('disconnected')\n    }\n\n    /** Custom event dispacher `component-name:name` with detail data\n     * @example\n     *   this._event('ready')\n     * @example\n     *   this._event('ready', {age: 42, type: 'android'})\n     *\n     * @param {string} evtName A name to give the event, added to the component-name separated with a :\n     * @param {*=} data Optional data object to pass to event listeners via the evt.detail property\n     */\n    _event(evtName, data) {\n        this.dispatchEvent(new CustomEvent(`${this.localName}:${evtName}`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name,\n                data: data,\n            },\n        } ) )\n    }\n\n    /** Call from end of connectedCallback */\n    _ready() {\n        this.connected = true\n        this._event('connected')\n        this._event('ready')\n    }\n\n    /** Handle a `${this.localName}::${this.id}` custom event\n     * Each prop in the msg.payload is set as a prop on the component instance.\n     * @param {object} msg A uibuilder message object\n     */\n    _uibMsgHandler(msg) {\n        // if msg.payload is not an object, ignore\n        if (typeof msg.payload !== 'object') {\n            console.warn(`[${this.localName}] Ignoring msg, payload is not an object:`, msg)\n            return\n        }\n\n        // set properties from the msg\n        Object.keys(msg.payload).forEach(key => {\n            if (key.startsWith('_')) return\n            this[key] = msg.payload[key]\n        })\n    }\n\n    // #endregion ---- Methods private to the extended classes ----\n\n    // #region ---- Methods private to the base class only ----\n\n    /** Find existing component stylesheet with the same data-component attribute value\n     * Assumes that the style element has a `data-component` attribute set to the component's local name\n     * @returns {Element|null} Existing element or null if not found\n     * @private\n     */\n    _findExistingStylesheet() {\n        const existing = document.head.querySelector(\n            `style[data-component=\"${this.localName}\"]`\n        )\n        return existing\n    }\n\n    /** Helper method to prepend a style element to the document head with order consideration\n     * @param {HTMLElement} styleElement - The style element to prepend\n     * @param {number} order - The order/priority for placement (lower numbers = higher priority)\n     * @private\n     */\n    _prependToDocumentHead(styleElement, order) {\n        const head = document.head\n\n        // Find existing injected stylesheets to determine proper insertion point\n        const existingComponentStyles = Array.from(head.querySelectorAll('style[data-component]'))\n\n        if (existingComponentStyles.length === 0) {\n            // No existing injected styles, insert at the very beginning\n            const firstChild = head.firstChild\n            if (firstChild) {\n                head.insertBefore(styleElement, firstChild)\n            } else {\n                head.appendChild(styleElement)\n            }\n            return\n        }\n\n        // Find the correct position based on order\n        let insertBefore = null\n        for (const existing of existingComponentStyles) {\n            const existingOrder = parseInt(existing.getAttribute('data-order') ?? '0', 10)\n            if (order < existingOrder) {\n                insertBefore = existing\n                break\n            }\n        }\n\n        if (insertBefore) {\n            // Insert before the found element\n            head.insertBefore(styleElement, insertBefore)\n        } else {\n            // Insert after all existing component styles but before non-component styles\n            const lastInjected = existingComponentStyles[existingComponentStyles.length - 1]\n            const nextSibling = lastInjected.nextSibling\n            if (nextSibling) {\n                head.insertBefore(styleElement, nextSibling)\n            } else {\n                head.appendChild(styleElement)\n            }\n        }\n    }\n\n    // #endregion ---- Methods private to the base class only ----\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default TiBaseComponent\n\n// This is a library class so don't self-register, it is only for inclusion in actual components\n", "/** Define a new zero dependency custom web component ECMA module that can be used as an HTML tag\n *\n * Version: See the class code\n *\n */\n/** Copyright (c) 2022-2025 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport TiBaseComponent from '../libs/ti-base-component'\n\n/**\n * TODO: Add optional footer ?\n *       topic (uib)\n */\n\nconst styles = `\n    data-list {\n        --list-style: disc; /* Default list style type */\n        --nested-indent: 40px; /* Default nested list indent - all browsers use 40px by default */\n    }\n    data-list ul {\n        list-style: var(--list-style);\n    }\n    /* Nested list indentation */\n    data-list ul ul {\n        padding-inline-start: var(--nested-indent);\n        margin-inline-start: 0;\n    }\n    data-list .nested-container {\n        /* No list bullet on an li containing a nested lists unless the key text is shown */\n        list-style: none;\n    }\n`\n/** Only use a template if you want to isolate the code and CSS */\n// const template = document.createElement('template')\n// template.innerHTML = /*html*/`\n//     <style>\n//         :host {\n//             display: block;   /* default is inline */\n//             contain: content; /* performance boost */\n//             --list-style: disc; /* Default list style type */\n//             --nested-indent: 40px; /* Default nested list indent - all browsers use 40px by default */\n//         }\n//         ul {\n//             list-style: var(--list-style);\n//         }\n//         /* Nested list indentation */\n//         ul ul {\n//             padding-inline-start: var(--nested-indent);\n//             margin-inline-start: 0;\n//         }\n//         .nested-container {\n//             /* No list bullet on an li containing a nested lists unless the key text is shown */\n//             list-style: none;\n//         }\n//     </style>\n//     <slot></slot>\n//     <!-- <ul></ul> -->\n// `\n\n/** Namespace\n * @namespace Live\n */\n\n/**\n * @class\n * @augments TiBaseComponent\n * @description Define a new zero dependency custom web component ECMA module that can be used as an HTML tag\n *\n * @element data-list\n * @memberOf Live\n\n * METHODS FROM BASE: (see TiBaseComponent)\n * STANDARD METHODS:\n  * @function attributeChangedCallback Called when an attribute is added, removed, updated or replaced\n  * @function connectedCallback Called when the element is added to a document\n  * @function constructor Construct the component\n  * @function disconnectedCallback Called when the element is removed from a document\n\n * OTHER METHODS:\n  * @function entry Dynamically ament/add a single entry. The list is rebuilt.\n\n * CUSTOM EVENTS:\n  * \"data-list:connected\" - When an instance of the component is attached to the DOM. `evt.details` contains the details of the element.\n  * \"data-list:ready\" - Alias for connected. The instance can handle property & attribute changes\n  * \"data-list:disconnected\" - When an instance of the component is removed from the DOM. `evt.details` contains the details of the element.\n  * \"data-list:attribChanged\" - When a watched attribute changes. `evt.details.data` contains the details of the change.\n  * NOTE that listeners can be attached either to the `document` or to the specific element instance.\n\n * Standard watched attributes (common across all my components):\n  * @property {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n  * @property {string} name - Optional. HTML name attribute. Included in output _meta prop.\n\n * Other watched attributes:\n  * @property {string} type - \uD83D\uDCAB Optional. The type of list to use, ul or ol. Default is ul.\n  * @property {string} listvar - \uD83D\uDCAB Optional. The global variable name to use for the list data. If not set, set the data property directly from JS.\n  * @property {string} keyvalueseparator - Optional. The separator to use between key and value in the list items when input is an object. Default is ' :: '. Set to \"NULL\" to disable key display.\n  * @property {string} liststyle - \uD83D\uDCAB Optional. The style type to use for the list. Default is `disc` for `ul` and `decimal` for `ol`. May contain any valid CSS list-style string value.\n\n * PROPS FROM BASE: (see TiBaseComponent)\n * OTHER STANDARD PROPS:\n  * @property {string} componentVersion Static. The component version string (date updated). Also has a getter that returns component and base version strings.\n\n * Other props:\n  * By default, all attributes are also created as properties\n  * @property {object} data - \uD83D\uDCAB The data to use for the list. Either set directly or via the `listvar` attribute. If an object, the key/value separator is used to separate the key and value in the list items.\n\n NB: properties marked with \uD83D\uDCAB are dynamic and have getters/setters. They will cause the list to rebuild.\n\n * @slot Container contents\n\n * @example\n  * <data-list id=\"myComponent\" type=\"ol\" inherit-style=\"./myComponent.css\"></data-list>\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass DataList extends TiBaseComponent {\n    /** Component version */\n    static componentVersion = '2025-05-31'\n\n    /** The top-level list element - this is created in the shadow DOM */\n    #list = null\n    /** The list style type to use for the list - this is set as a CSS variable */\n    #listStyle = null\n    /** The data to use for the list - this is set via the `data` property */\n    #entries = null\n    /** The type of list to use, ul or ol @type {\"ol\"|\"ul\"} */\n    #type = 'ul'\n\n    // Optional global variable name to use for the list data\n    listvar = null\n    // The separator to use between key and value in the list items\n    keyvalueseparator = ' :: '\n\n    /** Makes HTML attribute change watched\n     * @returns {Array<string>} List of all of the html attribs (props) listened to\n     */\n    static get observedAttributes() {\n        return [\n            // Standard watched attributes:\n            'inherit-style', 'name',\n            // Other watched attributes:\n            'keyvalueseparator', 'liststyle', 'listvar', 'type', 'topic',\n        ]\n    }\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n        // Only attach the shadow dom if code and style isolation is needed - comment out if shadow dom not required\n        // if (template && template.content) this._construct(template.content.cloneNode(true))\n\n        this.prependStylesheet(styles)\n    }\n\n    /** Runs when an instance is added to the DOM\n     * Runs AFTER the initial attributeChangedCallback's\n     */\n    connectedCallback() {\n        // console.info(`[DataList] ${this.id} connectedCallback (${this.tagName})`)\n        this._connect() // Keep at start.\n\n        if ( this.listvar && window[this.listvar] ) {\n            if ( window[this.listvar] ) {\n                this.data = window[this.listvar]\n                // window.dataList.instances[this.id] = window[newVal]\n                // console.log('>> listvar change >>', this.id, this.#entries, window.dataList.instances[this.id])\n                //window[newVal] = new Proxy()\n            } else {\n                console.warn(`[DataList] ${this.id} window.${this.listvar} does not exist, ignoring.`)\n            }\n\n            return\n        }\n\n        this._ready() // Keep at end. Let everyone know that a new instance of the component has been connected & is ready\n    }\n\n    /** Runs when an instance is removed from the DOM */\n    disconnectedCallback() {\n        this._disconnect() // Keep at end.\n    }\n\n    /** Runs when an observed attribute changes - Note: values are always strings\n     * NOTE: On initial startup, this is called for each watched attrib set in HTML.\n     *       and BEFORE connectedCallback is called.\n     * @param {string} attrib Name of watched attribute that has changed\n     * @param {string} oldVal The previous attribute value\n     * @param {string} newVal The new attribute value\n     */\n    attributeChangedCallback(attrib, oldVal, newVal) {\n        // console.info(`[DataList] ${this.id} attributeChangedCallback: ${attrib} changed from \"${oldVal}\" to \"${newVal}\"`)\n        /** Optionally ignore attrib changes until instance is fully connected\n         * Otherwise this can fire BEFORE everthing is fully connected.\n         */\n        // if (!this.connected) return\n\n        // Don't bother if the new value same as old\n        if ( oldVal === newVal ) return\n        // Create a property from the value - WARN: Be careful with name clashes\n        this[attrib] = newVal\n\n        // Add other dynamic attribute processing here.\n        // If attribute processing doesn't need to be dynamic, process in connectedCallback as that happens earlier in the lifecycle\n\n        // Keep at end. Let everyone know that an attribute has changed for this instance of the component\n        this._event('attribChanged', { attribute: attrib, newVal: newVal, oldVal: oldVal, })\n    }\n\n    /** Updates the list attributes based on the current type and style\n     * @param {HTMLElement} listEl The list element to update\n     * @param {\"ol\"|\"ul\"} listType The type of list to use, either 'ol' for ordered or 'ul' for unordered\n     */\n    updateListAttributes(listEl, listType) {\n        if (listEl) {\n            if (listEl) {\n                // Update CSS classes/attributes instead of recreating element\n                listEl.setAttribute('data-list-type', listType)\n\n                // Update ARIA attributes for accessibility\n                if (listType === 'ol') {\n                    this.listStyle = 'decimal'\n                    listEl.setAttribute('aria-label', 'Ordered list')\n                } else {\n                    this.listStyle = 'disc'\n                    listEl.setAttribute('aria-label', 'Unordered list')\n                }\n            }\n            if (this.#listStyle) {\n                // Update the CSS variable for the list style\n                listEl.style.setProperty('--list-style', this.#listStyle)\n            }\n        }\n    }\n\n    // Getter/setter for the `type` public property - maps to this.#type\n    set type(val) {\n        if (!['ul', 'ol'].includes(val)) {\n            console.warn(`[DataList] ${this.id} Invalid type \"${val}\" specified, defaulting to \"ul\".`)\n            val = 'ul'\n        }\n\n        this.#type = val\n\n        this.updateListAttributes(this.#list, this.#type)\n    }\n    get type() {\n        return this.#type\n    }\n\n    // Getter/setter for the `listStyle` public property - maps to this.#listStyle\n    set liststyle(val) {\n        this.#listStyle = val\n        this.updateListAttributes(this.#list, this.#type)\n    }\n    get liststyle() {\n        return this.#listStyle\n    }\n\n    // Getter/setter for the `data` public property - maps to this.#entries\n    set data(val) {\n        this.#entries = val\n\n        // If the list already exists, delete it\n        if (this.#list) this.#list.remove()\n\n        // Dynamically build the content of the ul/ol\n        // Object.keys(this.#entries).forEach( this.buildListItem.bind(this))\n        this.buildList(this.#entries, this, this.#type, 1)\n\n        this.#list = this.querySelector('ul')\n        this.updateListAttributes(this.#list, this.#type)\n\n        // Issue a custom event to notify that the data has changed\n        this._event('dataChanged', this.#entries)\n    }\n    get data() {\n        return this.#entries\n    }\n\n    /** Dynamically change/add list entries - rebuilds the list DOM element\n     * @param {string|number} key Object key or array index to change/add\n     * @param {string} val Updates/new list text (can be HTML)\n     * @example\n     * // Add a new entry to the list\n     * dataList.entry('newKey', 'New list item text')\n     * // Update an existing entry in the list\n     * dataList.entry('existingKey', 'Updated list item text')\n     */\n    entry(key, val) {\n        this.#entries[key] = val\n        this.data = this.#entries\n    }\n\n    /** Builds a list from input data\n     * @param {Array|object} listData Source data for the list, can be an array or an object\n     * @param {HTMLElement|ShadowRoot} parentEl The parent element to append the list to\n     * @param {\"ol\"|\"ul\"} type  The type of list to create, either 'ol' for ordered or 'ul' for unordered\n     * @param {number} depth  Recursion depth. Defaults to 1. Used to limit recursion depth for nested objects/arrays.\n     */\n    buildList(listData, parentEl, type, depth) {\n        if (depth === undefined) depth = 1\n        // console.log(`[DataList] ${this.id} buildList: listData=${listData}, listEl=${parentEl}, depth=${depth}`)\n\n        // Create a new list element (all lists are created as ul, numbering is done via CSS)\n        const listEl = document.createElement('ul')\n        if (depth > 1) {\n            // If this is a nested list, add a class to the list element\n            listEl.classList.add('nested-list')\n            // and add a data-depth attribute to the list element\n            listEl.setAttribute('data-depth', depth.toString())\n        }\n\n        Object.entries(listData).forEach(([key, value], i) => {\n            // Is the key a number? Keep a record\n            const keyIsNumeric = !isNaN(parseInt(key))\n\n            // Is the value an object or array?\n            if (typeof value === 'object' && value !== null) {\n                if (depth > 3) {\n                    // If depth is too high, just show the key and value as a string\n                    listEl.insertAdjacentHTML(\n                        'beforeend',\n                        this.buildLIhtml({ arrayType: Array.isArray(listData), key, value: JSON.stringify(value), i, })\n                    )\n                    console.warn(`[DataList] ${this.id} buildList: Depth limit reached for key \"${key}\", showing as string.`)\n                    return\n                }\n\n                // Create a new list item for the key\n                const li = document.createElement('li')\n\n                // If key is not numeric and if this.keyvalueseparator is not 'NULL', add key as text\n                if (!keyIsNumeric && this.keyvalueseparator !== 'NULL') {\n                    const keySpan = document.createElement('span')\n                    keySpan.textContent = `${key}${this.keyvalueseparator}`\n                    // keySpan.classList.add('nested-key')\n                    li.appendChild(keySpan)\n                } else {\n                    li.classList.add('nested-container')\n                }\n\n                // recurse to create a nested list\n                this.buildList(value, li, type, ++depth)\n                this.updateListAttributes(li, type)\n                // add the new list item to its parent element\n                listEl.appendChild(li)\n            } else {\n                // Otherwise, just create a list item with the key and value\n                // console.log(`[DataList] ${this.id} buildList: key=${key}, value=${value}, i=${i}`)\n                listEl.insertAdjacentHTML(\n                    'beforeend',\n                    this.buildLIhtml({ arrayType: Array.isArray(listData), key, value, i, })\n                )\n            }\n        })\n\n        // Attach the list as the last child of the parent element\n        parentEl.appendChild(listEl)\n    }\n\n    /** Builds a list item HTML string based on the provided options.\n     * @param {object} options Object containing options for building the list item\n     * @param {boolean} options.arrayType True if the list is an array, false if it is an object\n     * @param {string} options.key The key for the list item, used as the id and data-index\n     * @param {string} options.value The value for the list item, displayed as the text\n     * @param {number} options.i The index of the item in the list, used for data-index attribute\n     * @returns {string} The HTML string for the list item\n     */\n    buildLIhtml({ arrayType, key, value, i, }) {\n        // check if this.#entries is an array\n        if (arrayType) {\n            return `<li id=\"${this.id}-${key}\" data-index=\"${i}\">${value}</li>`\n        }\n        // If the keyvalueseparator is 'NULL', then don't show the key\n        // otherwise, show the key followed by the separator\n        return `<li id=\"${this.id}-${key}\" data-index=\"${i}\">${this.keyvalueseparator === 'NULL' ? '' : `${key}${this.keyvalueseparator}`}${value}</li>`\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default DataList\n\n/** Self register the class to global\n * Enables new data lists to be dynamically added via JS\n * and lets the static methods be called\n */\nwindow['DataList'] = DataList\n\n// Self-register the HTML tag\ncustomElements.define('data-list', DataList)\n"],
  "mappings": "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",
  "names": ["TiBaseComponent", "_TiBaseComponent", "config", "target", "sources", "source", "k", "vs", "vt", "url", "linkEl", "cssText", "order", "existingStylesheet", "styleElement", "evtName", "data", "template", "shadowOpts", "msg", "key", "head", "existingComponentStyles", "firstChild", "insertBefore", "existing", "existingOrder", "nextSibling", "ti_base_component_default", "styles", "DataList", "ti_base_component_default", "#list", "#listStyle", "#entries", "#type", "attrib", "oldVal", "newVal", "listEl", "listType", "val", "key", "listData", "parentEl", "type", "depth", "value", "i", "keyIsNumeric", "li", "keySpan", "arrayType", "data_list_default"]
}
