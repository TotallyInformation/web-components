{
  "version": 3,
  "sources": ["../libs/ti-base-component.js", "../src/visible-console.js"],
  "sourcesContent": ["/** Define the base component extensions for other components in this package.\n * Used to ensure that standard properties and methods are available in every component.\n *\n * Version: See the class code\n *\n **/\n/** Copyright (c) 2024-2025 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\n/** Namespace\n * @namespace Library\n */\n\n/**\n * @class\n * @extends HTMLElement\n * @description Define the base component extensions for other components in this package.\n *\n * @element ti-base-component\n * @memberOf Library\n\n * STANDARD METHODS:\n  * @method config Update runtime configuration, return complete config\n  * @method createShadowSelectors Creates the jQuery-like $ and $$ methods\n  * @method deepAssign Object deep merger\n  * @method doInheritStyles If requested, add link to an external style sheet\n  * @method ensureId Adds a unique ID to the tag if no ID defined.\n  * @method uibSend Send a message to the Node-RED server via uibuilder if available.\n  * @method _uibMsgHandler Not yet in use\n  * @method _event(name,data) Standardised custom event dispatcher\n  * @method _ready Call from end of connectedCallback. Sets connected prop and outputs events\n\n * Standard watched attributes (common across all my components):\n  * @attr {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n\n * Standard props (common across all my components):\n  * @prop {string} baseVersion Static. The component version string (date updated). Also has a getter.\n  * @prop {number} _iCount Static. The count of instances of this component that weren't given an id. Creates a unique id as needed.\n  * @prop {boolean} uib True if UIBUILDER for Node-RED is loaded\n  * @prop {object} uibuilder Reference to loaded UIBUILDER for Node-RED client library if loaded (else undefined)\n  * @prop {function(string): Element} $ jQuery-like shadow dom selector\n  * @prop {function(string): NodeList} $$  jQuery-like shadow dom multi-selector\n  * @prop {boolean} connected False until connectedCallback finishes\n  * @prop {string} name Placeholder for the optional name attribute\n  * @prop {object} opts This components controllable options - get/set using the `config()` method\n  * \n  * @prop {string} version Getter that returns the class version & baseVersion static strings.\n\n * Other props:\n  * By default, all attributes are also created as properties\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass TiBaseComponent extends HTMLElement {\n    /** Component version */\n    static baseVersion = '2025-01-13'\n\n    /** Holds a count of how many instances of this component are on the page that don't have their own id\n     * Used to ensure a unique id if needing to add one dynamically\n     */\n    static _iCount = 0\n\n    /** Is UIBUILDER for Node-RED loaded? */\n    uib = !!window['uibuilder']\n    uibuilder = window['uibuilder']\n\n    /** Mini jQuery-like shadow dom selector (see constructor)\n     * @type {function(string): Element}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {Element} The first element that matches the specified selector.\n     */\n    $\n    /** Mini jQuery-like shadow dom multi-selector (see constructor)\n     * @type {function(string): NodeList}\n     * @param {string} selector - A CSS selector to match the element within the shadow DOM.\n     * @returns {NodeList} A STATIC list of all shadow dom elements that match the selector.\n     */\n    $$\n\n    /** True when instance finishes connecting.\n     * Allows initial calls of attributeChangedCallback to be\n     * ignored if needed. */\n    connected = false\n\n    /** Placeholder for the optional name attribute @type {string} */\n    name\n\n    /** Runtime configuration settings @type {object} */\n    opts = {}\n\n    /** Report the current component version string */\n    static get version() {\n        // @ts-ignore\n        return `${this.componentVersion} (Base: ${this.baseVersion})`\n    }\n\n    // get id() {\n    //     return this.id\n    // }\n\n    // set id(value) {\n    //     // this.id = value\n    //     console.log('>> SETTING ID:', value, this.id, this.getAttribute('id'))\n    // }\n\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n    }\n\n    /** Optionally apply an external linked style sheet (called from connectedCallback)\n     * @param {*} url The URL for the linked style sheet\n     */\n    async doInheritStyles() {\n        if (!this.hasAttribute('inherit-style')) return\n\n        let url = this.getAttribute('inherit-style')\n        if (!url) url = './index.css'\n\n        const linkEl = document.createElement('link')\n        linkEl.setAttribute('type', 'text/css')\n        linkEl.setAttribute('rel', 'stylesheet')\n        linkEl.setAttribute('href', url)\n        // @ts-ignore\n        this.shadowRoot.appendChild(linkEl)\n\n        console.info(`[${this.localName}] Inherit-style requested. Loading: \"${url}\"`)\n    }\n\n    /** OPTIONAL. Update runtime configuration, return complete config\n     * @param {object|undefined} config If present, partial or full set of options. If undefined, fn returns the current full option settings\n     */\n    config(config) {\n        // Merge config but ensure that default states always present\n        // if (config) this.opts = { ...this.opts, ...config }\n        if (config) this.opts = TiBaseComponent.deepAssign(this.opts, config)\n        return this.opts\n    }\n\n    /** Utility object deep merge fn\n     * @param {object} target Merge target object\n     * @param  {...object} sources 1 or more source objects to merge\n     * @returns {object} Deep merged object\n     */\n    static deepAssign(target, ...sources) {\n        for (let source of sources) { // eslint-disable-line prefer-const\n            for (let k in source) { // eslint-disable-line prefer-const\n                const vs = source[k]\n                const vt = target[k]\n                if (Object(vs) == vs && Object(vt) === vt) { // eslint-disable-line eqeqeq\n                    target[k] = TiBaseComponent.deepAssign(vt, vs)\n                    continue\n                }\n                target[k] = source[k]\n            }\n        }\n        return target\n    }\n\n    /** Ensure that the component instance has a unique ID & check again if uib loaded */\n    ensureId() {\n        // Check again if UIBUILDER for Node-RED is loaded\n        this.uib = !!window['uibuilder']\n\n        if (!this.id) {\n            // if (!this.name) this.name = this.getAttribute('name')\n            // if (this.name) this.id = this.name.toLowerCase().replace(/\\s/g, '_')\n            // else this.id = `${this.localName}-${++this.constructor._iCount}`\n            // @ts-ignore\n            this.id = `${this.localName}-${++this.constructor._iCount}`\n        }\n    }\n\n    /** Creates the $ and $$ fns that do css selections against the shadow dom */\n    createShadowSelectors() {\n        this.$ = this.shadowRoot?.querySelector.bind(this.shadowRoot)\n        this.$$ = this.shadowRoot?.querySelectorAll.bind(this.shadowRoot)\n    }\n\n    /** Handle a `${this.localName}::${this.id}` custom event\n     * Each prop in the msg.payload is set as a prop on the component instance.\n     * @param {object} msg A uibuilder message object\n     */\n    _uibMsgHandler(msg) {\n        // if msg.payload is not an object, ignore\n        if (typeof msg.payload !== 'object') {\n            console.warn(`[${this.localName}] Ignoring msg, payload is not an object:`, msg)\n            return\n        }\n\n        // set properties from the msg\n        Object.keys(msg.payload).forEach(key => {\n            if (key.startsWith('_')) return\n            this[key] = msg.payload[key]\n        })\n    }\n\n    /** Custom event dispacher `component-name:name` with detail data\n     * @example\n     *   this._event('ready')\n     * @example\n     *   this._event('ready', {age: 42, type: 'android'})\n     *\n     * @param {string} evtName A name to give the event, added to the component-name separated with a :\n     * @param {*=} data Optional data object to pass to event listeners via the evt.detail property\n     */\n    _event(evtName, data) {\n        this.dispatchEvent(new CustomEvent(`${this.localName}:${evtName}`, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                id: this.id,\n                name: this.name,\n                data: data,\n            },\n        } ) )\n    }\n\n    /** Send a message to the Node-RED server via uibuilder if available\n     * NB: These web components are NEVER dependent on Node-RED or uibuilder.\n     * @param {string} evtName The event name to send\n     * @param {*} data The data to send\n     */\n    uibSend(evtName, data){\n        if (this.uib) this.uibuilder.send({\n            topic: `${this.localName}:${evtName}`,\n            payload: data,\n            id: this.id,\n            name: this.name,\n        })\n    }\n\n    /** Standardised constructor. Keep after call to super()\n     * @param {Node|string} template Nodes/string content that will be cloned into the shadow dom\n     * @param {{mode:'open'|'closed',delegatesFocus:boolean}=} shadowOpts Options passed to attachShadow\n     */\n    _construct(template, shadowOpts) {\n        if (!shadowOpts) shadowOpts = { mode: 'open', delegatesFocus: true }\n        // Only attach the shadow dom if code and style isolation is needed\n        this.attachShadow(shadowOpts)\n            .append(template)\n\n        // jQuery-like selectors but for the shadow. NB: Returns are STATIC not dynamic lists\n        this.createShadowSelectors()  // in base class\n    }\n\n    /** Standardised connection. Call from the start of connectedCallback fn */\n    _connect() {\n        // Make sure instance has an ID. Create an id from name or calculation if needed\n        this.ensureId()  // in base class\n        // Apply parent styles from a stylesheet if required - only required if using an applied template\n        this.doInheritStyles()  // in base class\n\n        // Listen for a uibuilder msg that is targetted at this instance of the component\n        if (this.uib) this.uibuilder.onTopic(`${this.localName}::${this.id}`, this._uibMsgHandler.bind(this) )\n    }\n\n    /** Standardised disconnection. Call from the END of disconnectedCallback fn */\n    _disconnect() {\n        // @ts-ignore Remove optional uibuilder event listener\n        document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`, this._uibMsgHandler )\n\n        // Keep at end. Let everyone know that an instance of the component has been disconnected\n        this._event('disconnected')\n    }\n\n    /** Call from end of connectedCallback */\n    _ready() {\n        this.connected = true\n        this._event('connected')\n        this._event('ready')\n    }\n} // ---- end of Class ---- //\n\n// Make the class the default export so it can be used elsewhere\nexport default TiBaseComponent\n\n// This is a library class so don't self-register, it is only for inclusion in actual components\n", "/** A zero dependency web component that will display JavaScript console output on-page.\n *\n * @version See Class version property\n *\n */\n/** Copyright (c) 2024-2024 Julian Knight (Totally Information)\n * https://it.knightnet.org.uk, https://github.com/TotallyInformation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\n\n/** TODO\n * - Add part transparent color backgrounds for at least warn and err\n * - std parts\n * - allow to be separate from console (via an attribute) for custom visual logging\n * - Max entry limit\n */\n\nimport TiBaseComponent from '../libs/ti-base-component'\n\n/** Only use a template if you want to isolate the code and CSS */\nconst template = document.createElement('template')\ntemplate.innerHTML = /** @type {HTMLTemplateElement} */ /*html*/`\n    <style>\n        :host {\n            display: block;   /* default is inline */\n            contain: content; /* performance boost */\n        }\n\n        .wrapper {\n            display: grid;\n            grid-template-columns: minmax(6ch, 1fr) minmax(75%, 5fr);\n            column-gap: 1rem;\n            row-gap: .3rem;\n            align-content: start;\n\n            height: 22em;\n            overflow: auto;\n            resize: vertical;\n\n            font-family: Consolas, \"ui-monospace\", \"Lucida Console\", monospace;\n            font-size: smaller;\n            /* white-space: pre; */\n            background-color:black;\n            border: 1px solid silver;\n        }\n\n        .meta {\n            /* grid-area: meta; */\n            border-right: 1px solid silver;\n            font-size: larger;\n            /* background-color:black; */\n            /* white-space: pre; */\n        }\n        \n        .data {\n            /* grid-area: content; */\n            /* color:white; */\n            /* display:block; */\n            /* background-color:black; */\n            /* padding:5px 10px; */\n            /* font-family: Consolas, \"ui-monospace\", \"Lucida Console\", monospace; */\n            /* font-size: smaller; */\n            /* white-space: pre; */\n            /* width: 99%; */\n            /* height: 22em; */\n            /* overflow: auto; */\n            /* resize: both; */\n        }\n        .key {color:#ffbf35}\n        .string {color:#5dff39;}\n        .number {color:#70aeff;}\n        .boolean {color:#b993ff;}\n        .null {color:#93ffe4;}\n        .undefined {color:#ff93c9;}\n\n        .log {color: hsl(120 100 77);}\n        .info {color: hsl(212 100 77);}\n        .warn {color: orange;}\n        .error {color: red;}\n        .data-info {background-color: hsl(192 100 42 /0.3);}\n        .data-warn {background-color: hsl(39 100 42 /0.3);}\n        .data-error {background-color: hsl(0 100 42 /0.3);}\n\n    </style>\n    <div class=\"wrapper\"></div>\n`\n\n/**\n * @namespace Beta\n */\n\n/**\n * @class\n * @extends TiBaseComponent\n * @description A zero dependency web component that will display JavaScript console output on-page.\n *\n * @element component-template\n * @memberOf Beta\n *\n * @example\n *    <visible-console></visible-console>\n\n * METHODS FROM BASE:\n * @method config Update runtime configuration, return complete config\n * @method createShadowSelectors Creates the jQuery-like $ and $$ methods\n * @method deepAssign Object deep merger\n * @method doInheritStyles If requested, add link to an external style sheet\n * @method ensureId Adds a unique ID to the tag if no ID defined.\n * @method _uibMsgHandler Not yet in use\n * @method _event(name,data) Standardised custom event dispatcher\n\n * OTHER METHODS:\n * @method redirectConsole Capture console.xxxx and write to the div\n * @method newLog Creates a new HTML log entry\n * @method checkType Find out the input JavaScript var type\n * @method createHTMLVisualizer Creates an HTML visualisation of the input\n\n * @fires visible-console:connected - When an instance of the component is attached to the DOM. `evt.details` contains the details of the element.\n * @fires component-template:ready - Alias for connected. The instance can handle property & attribute changes\n * @fires visible-console:disconnected - When an instance of the component is removed from the DOM. `evt.details` contains the details of the element.\n * @fires visible-console:attribChanged - When a watched attribute changes. `evt.details` contains the details of the change.\n * NOTE that listeners can be attached either to the `document` or to the specific element instance.\n\n * Standard watched attributes (common across all my components):\n * @attr {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.\n * @attr {string} name - Optional. HTML name attribute. Included in output _meta prop.\n * \n * Other watched attributes:\n * None\n\n * Standard props (common across all my components):\n * @prop {number} _iCount Static. The component version string (date updated)\n * @prop {boolean} uib True if UIBUILDER for Node-RED is loaded\n * @prop {function(string): Element} $ jQuery-like shadow dom selector\n * @prop {function(string): NodeList} $$  jQuery-like shadow dom multi-selector\n * @prop {string} name Placeholder for the optional name attribute\n * @prop {object} opts This components controllable options - get/set using the `config()` method\n *\n * @prop {string} version Static. The component version string (date updated). Also has a getter that returns component and base version strings.\n * \n * Other props:\n * @prop {object} colors\n * @prop {object} bgColors\n * @prop {object} icons\n\n * @slot No slot\n\n * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc\n */\nclass VisibleConsole extends TiBaseComponent {\n    /** Component version */\n    static componentVersion = '2024-10-06'\n\n    /** Makes HTML attribute change watched\n     * @returns {Array<string>} List of all of the html attribs (props) listened to\n     */\n    static get observedAttributes() {\n        return [\n            // Standard watched attributes:\n            'inherit-style', 'name'\n            // Other watched attributes:\n        ]\n    }\n\n    /** Runtime configuration settings */\n    opts = {}\n\n    colors = {\n        'log': 'green',\n        'error': 'red',\n        'warn': 'orange',\n    }\n\n    bgColors = {\n        'info': 'hsl(92, 100, 50, 0.3)',\n        'warn': 'hsl(39, 100, 50, 0.3)',\n        'error': 'hsl(0, 100, 50, 0.3)',\n    }\n\n    icons = {\n        'log': '> ',\n        'info': '\u2139\uFE0F ',\n        'debug': '\uD83E\uDEB2 ',\n        'trace': '\uD83D\uDC53 ',\n        'warn': '\u26A0\uFE0F ',\n        'error': '\u26D4 ',\n    }\n\n    //#endregion --- Class Properties ---\n\n    /** NB: Attributes not available here - use connectedCallback to reference */\n    constructor() {\n        super()\n\n        this.attachShadow({ mode: 'open', delegatesFocus: true })\n            // Only append the template if code and style isolation is needed\n            .append(template.content.cloneNode(true))\n\n        // jQuery-like selectors but for the shadow. NB: Returns are STATIC not dynamic lists\n        this.createShadowSelectors()  // in base class\n\n        // @ts-ignore\n        this.wrapper = this.shadowRoot.querySelector('.wrapper')\n\n        // Keep a COPY of the original console so we can still use it if we want\n        this.originalConsole = { ...console }\n    }\n\n    /** Runs when an instance is added to the DOM */\n    connectedCallback() {\n        // Make sure instance has an ID. Create an id from name or calculation if needed\n        this.ensureId()  // in base class\n\n        // Apply parent styles from a stylesheet if required - only required if using an applied template\n        this.doInheritStyles()  // in base class\n\n        this.redirectConsole()\n\n        // Keep at end. Let everyone know that a new instance of the component has been connected\n        this._event('connected')\n        this._event('ready')\n    }\n\n    /** Runs when an instance is removed from the DOM */\n    disconnectedCallback() {\n        // Keep at end. Let everyone know that an instance of the component has been disconnected\n        this._event('disconnected')\n    }\n\n    /** Handle watched attributes\n     * NOTE: On initial startup, this is called for each watched attrib set in HTML - BEFORE connectedCallback is called.\n     * Attribute values can only ever be strings\n     * @param {string} attrib The name of the attribute that is changing\n     * @param {string} newVal The new value of the attribute\n     * @param {string} oldVal The old value of the attribute\n     */\n    attributeChangedCallback(attrib, oldVal, newVal) {\n        // Don't bother if the new value same as old\n        if ( oldVal === newVal ) return\n        // Create a property from the value - WARN: Be careful with name clashes\n        this[attrib] = newVal\n\n        // Add other dynamic attribute processing here.\n        // If attribute processing doesn't need to be dynamic, process in connectedCallback as that happens earlier in the lifecycle\n\n        // Keep at end. Let everyone know that an attribute has changed for this instance of the component\n        this._event('attribChanged', { attribute: attrib, newVal: newVal, oldVal: oldVal })\n    }\n\n    /** Capture console.xxxx and write to the div  */\n    redirectConsole() {\n        Object.keys(this.icons).forEach( type => {\n            console[type] = (...args) => {\n                // Call the original console.log\n                this.originalConsole[type].apply(console[type], args)\n                this.newLog(type, args)\n            }\n        })\n    }\n\n    /** Creates a new HTML log entry\n     * @param {string} type The log type\n     * @param {*} args The arguments to log\n     */\n    newLog(type, args) {\n        const icon = this.icons?.[type] || ''\n\n        // TODO Use template and clone\n        // Create a new line in the output div\n        const newMeta  = document.createElement('div')\n        newMeta.className = `meta ${type}`\n        newMeta.innerHTML = `${icon} ${type}`\n        this.wrapper?.appendChild(newMeta)\n\n        // Convert args to a string\n        const message = args.map(arg => {\n            return this.createHTMLVisualizer(arg)\n        })\n\n        const newLog = document.createElement('div')\n        newLog.className = `data data-${type}`\n        message.forEach( el => {\n            newLog.appendChild(el)\n        } )\n        this.wrapper?.appendChild(newLog)\n\n        // Scroll to the bottom\n        // @ts-ignore\n        this.wrapper.scrollTop = this.wrapper?.scrollHeight\n    }\n\n    /** Find out the input JavaScript var type\n     * @param {*} input The JavaScript var to type\n     * @returns {string} The input type\n     */\n    checkType(input) {\n        if (input === null) {\n            return 'null'\n        } else if (Array.isArray(input)) {\n            return 'array'\n        } else if (typeof input === 'object') {\n            return 'object'\n        } else {\n            return typeof input\n        }\n    }\n\n    /** Creates an HTML visualisation of the input\n     * @param {*} input \n     * @returns {HTMLDivElement}\n     */\n    createHTMLVisualizer(input) {\n        const container = document.createElement('div')\n        // container.style.backgroundColor = 'black'\n        // container.style.color = 'white'\n        // container.style.fontFamily = 'monospace'\n        // container.style.padding = '10px'\n        // container.style.whiteSpace = 'pre-wrap'\n\n        const renderValue = (value, level = 0) => {\n            const wrapper = document.createElement('div')\n            wrapper.style.marginLeft = `${level * 10}px`\n\n            if (level > 10) formatPrimitive(value) // not ideal but it doesn't crash\n            else if (Array.isArray(value)) {\n                wrapper.appendChild(renderCollapsible('Array', value, level, '[', ']'))\n            } else if (value && typeof value === 'object') {\n                wrapper.appendChild(renderCollapsible('Object', value, level, '{', '}'))\n            } else {\n                wrapper.appendChild(formatPrimitive(value))\n            }\n            return wrapper\n        }\n\n        const renderCollapsible = (label, value, level, openSymbol, closeSymbol) => {\n            const container = document.createElement('div')\n            const header = document.createElement('span')\n            const content = document.createElement('div')\n            const icon = document.createElement('span')\n\n            icon.textContent = '\u25B6'  // Initial icon for collapsed state\n            header.textContent = ` ${openSymbol}${getCollapsedSummary(value)}${closeSymbol}`\n            header.style.cursor = 'pointer'\n            // header.style.color = 'lightblue'\n\n            icon.style.cursor = 'pointer'\n            // icon.style.color = 'lightblue'\n            icon.addEventListener('click', () => {\n                const isCollapsed = content.style.display === 'none'\n                content.style.display = isCollapsed ? 'block' : 'none'\n                icon.textContent = isCollapsed ? '\u25BC' : '\u25B6'\n                header.textContent = isCollapsed ? ` ${openSymbol}` : ` ${openSymbol}${getCollapsedSummary(value)}${closeSymbol}`\n            })\n\n            header.addEventListener('click', () => {\n                const isCollapsed = content.style.display === 'none'\n                content.style.display = isCollapsed ? 'block' : 'none'\n                icon.textContent = isCollapsed ? '\u25BC' : '\u25B6'\n                header.textContent = isCollapsed ? ` ${openSymbol}` : ` ${openSymbol}${getCollapsedSummary(value)}${closeSymbol}`\n            })\n\n            content.style.display = 'none'\n            content.style.marginLeft = '20px'\n\n            for (const key in value) {\n                const line = document.createElement('div')\n                line.style.marginLeft = `${level * 10}px`\n                const keySpan = document.createElement('span')\n                keySpan.style.color = 'orange'\n                keySpan.textContent = `${key}: `\n\n                const valueSpan = renderValue(value[key], level++)\n                line.appendChild(keySpan)\n                line.appendChild(valueSpan)\n                content.appendChild(line)\n            }\n\n            const closeSymbolSpan = document.createElement('span')\n            closeSymbolSpan.textContent = ` ${closeSymbol}`\n            closeSymbolSpan.style.color = 'lightblue'\n\n            container.appendChild(icon)\n            container.appendChild(header)\n            container.appendChild(content)\n            container.appendChild(closeSymbolSpan)\n\n            return container\n        }\n\n        const getCollapsedSummary = (value) => {\n            let summary = ''\n            if (Array.isArray(value)) {\n                summary = value.map(v => getPrimitiveSummary(v)).join(', ')\n            } else if (typeof value === 'object') {\n                summary = Object.keys(value).map(key => `${key}: ${getPrimitiveSummary(value[key])}`).join(', ')\n            }\n            if (summary.length > 30) {\n                summary = summary.slice(0, 30) + '...'\n            }\n            return summary\n        }\n\n        const getPrimitiveSummary = (value) => {\n            if (typeof value === 'string') {\n                return `\"${value}\"`\n            } else if (typeof value === 'number') {\n                return value\n            } else if (typeof value === 'boolean') {\n                return value\n            } else if (value === null) {\n                return 'null'\n            } else if (typeof value === 'undefined') {\n                return 'undefined'\n            } else if (typeof value === 'bigint') {\n                return `${value}n`\n            } else if (typeof value === 'function') {\n                return '[Function]'\n            } else if (Array.isArray(value)) {\n                return '[Array]'\n            } else if (typeof value === 'object') {\n                return '[Object]'\n            }\n        }\n\n        const formatPrimitive = (value) => {\n            const span = document.createElement('span')\n            if (typeof value === 'string') {\n                span.style.color = 'lightgreen'\n                span.textContent = `\"${value}\"`\n            } else if (typeof value === 'number') {\n                span.style.color = 'lightcoral'\n                // @ts-ignore\n                span.textContent = value\n            } else if (typeof value === 'boolean') {\n                span.style.color = 'lightyellow'\n                // @ts-ignore\n                span.textContent = value\n            } else if (value === null) {\n                span.style.color = 'gray'\n                span.textContent = 'null'\n            } else if (typeof value === 'undefined') {\n                span.style.color = 'gray'\n                span.textContent = 'undefined'\n            } else if (typeof value === 'bigint') {\n                span.style.color = 'lightcoral'\n                span.textContent = `${value}n`\n            } else if (typeof value === 'function') {\n                span.style.color = 'violet'\n                span.textContent = '[Function]'\n            }\n            return span\n        }\n\n        container.appendChild(renderValue(input))\n        return container\n    }\n}\n\n// Make the class the default export so it can be used elsewhere\nexport default VisibleConsole\n\n/** Self register the class to global\n * Enables new data to be dynamically added via JS\n * and lets any static methods be called\n */\nwindow['VisibleConsole'] = VisibleConsole\n\n// Add the class as a new Custom Element to the window object\ncustomElements.define('visible-console', VisibleConsole)\n"],
  "mappings": "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",
  "names": ["TiBaseComponent", "_TiBaseComponent", "url", "linkEl", "config", "target", "sources", "source", "k", "vs", "vt", "msg", "key", "evtName", "data", "template", "shadowOpts", "ti_base_component_default", "template", "VisibleConsole", "ti_base_component_default", "attrib", "oldVal", "newVal", "type", "args", "icon", "newMeta", "message", "arg", "newLog", "el", "input", "container", "renderValue", "value", "level", "wrapper", "formatPrimitive", "renderCollapsible", "label", "openSymbol", "closeSymbol", "header", "content", "getCollapsedSummary", "isCollapsed", "key", "line", "keySpan", "valueSpan", "closeSymbolSpan", "summary", "v", "getPrimitiveSummary", "span", "visible_console_default"]
}
