(()=>{var d=class c extends HTMLElement{static baseVersion="2025-09-20";static _iCount=0;uib=!!window.uibuilder;uibuilder=window.uibuilder;$;$$;connected=!1;name;opts={};static get version(){return`${this.componentVersion} (Base: ${this.baseVersion})`}constructor(){super()}config(t){return t&&(this.opts=c.deepAssign(this.opts,t)),this.opts}createShadowSelectors(){this.$=this.shadowRoot?.querySelector.bind(this.shadowRoot),this.$$=this.shadowRoot?.querySelectorAll.bind(this.shadowRoot)}static deepAssign(t,...e){for(let i of e)for(let s in i){let n=i[s],o=t[s];if(Object(n)==n&&Object(o)===o){t[s]=c.deepAssign(o,n);continue}t[s]=i[s]}return t}async doInheritStyles(){if(!this.shadowRoot||!this.hasAttribute("inherit-style"))return;let t=this.getAttribute("inherit-style");t||(t="./index.css");let e=document.createElement("link");e.setAttribute("type","text/css"),e.setAttribute("rel","stylesheet"),e.setAttribute("href",t),this.shadowRoot.appendChild(e),console.info(`[${this.localName}] Inherit-style requested. Loading: "${t}"`)}ensureId(){this.uib=!!window.uibuilder,this.id||(this.id=`${this.localName}-${++this.constructor._iCount}`)}hasSlotContent(){return this.shadowRoot.querySelector("slot").assignedNodes().some(i=>i.nodeType===Node.ELEMENT_NODE?!0:i.nodeType===Node.TEXT_NODE?i.textContent.trim().length>0:!1)}prependStylesheet(t,e=0){if(!t)throw new Error(`[${this.localName}] cssText must be provided`);let i=this._findExistingStylesheet();if(i)return i;let s=document.createElement("style");return s.textContent=t,s.setAttribute("data-component",this.localName),s.setAttribute("data-order",e.toString()),this._prependToDocumentHead(s,e),s}uibSend(t,e){this.uib&&(this.uibuilder.ioConnected?this.uibuilder.send({topic:`${this.localName}:${t}`,payload:e,id:this.id,name:this.name}):console.warn(`[${this.localName}] uibuilder not connected to server, cannot send:`,t,e))}_connect(){this.ensureId(),this.doInheritStyles(),this.uib&&this.uibuilder.onTopic(`${this.localName}::${this.id}`,this._uibMsgHandler.bind(this))}_construct(t,e){t&&(e||(e={mode:"open",delegatesFocus:!0}),this.attachShadow(e).append(t),this.createShadowSelectors())}_disconnect(){document.removeEventListener(`uibuilder:msg:_ui:update:${this.id}`,this._uibMsgHandler),this._event("disconnected")}_event(t,e){this.dispatchEvent(new CustomEvent(`${this.localName}:${t}`,{bubbles:!0,composed:!0,detail:{id:this.id,name:this.name,data:e}}))}_ready(){this.connected=!0,this._event("connected"),this._event("ready")}_uibMsgHandler(t){if(typeof t.payload!="object"){console.warn(`[${this.localName}] Ignoring msg, payload is not an object:`,t);return}Object.keys(t.payload).forEach(e=>{if(e.startsWith("_"))return;let i=e.toLowerCase();switch(i.startsWith("data-")&&(i="data"),i){case"value":{this.setAttribute("value",t.payload[e]);break}case"class":{this.className=t.payload[e];break}case"style":{this.style.cssText=t.payload[e];break}case"data":{this.dataset[e.replace("data-","")]=t.payload[e];break}default:{this[e]=t.payload[e];break}}})}_findExistingStylesheet(){return document.head.querySelector(`style[data-component="${this.localName}"]`)}_prependToDocumentHead(t,e){let i=document.head,s=Array.from(i.querySelectorAll("style[data-component]"));if(s.length===0){let o=i.firstChild;o?i.insertBefore(t,o):i.appendChild(t);return}let n=null;for(let o of s){let a=parseInt(o.getAttribute("data-order")??"0",10);if(e<a){n=o;break}}if(n)i.insertBefore(t,n);else{let a=s[s.length-1].nextSibling;a?i.insertBefore(t,a):i.appendChild(t)}}},h=d;var l=document.createElement("template");l.innerHTML=`
    <style>
        :host {
            display: block;   /* default is inline */
            contain: content; /* performance boost */
        }
        /* Apply to headings where you want a sub-title */
        .with-subtitle {
            margin-bottom: 0;
        }
        /* Add the subtitle as a div with the Aria role */
        [role="doc-subtitle"] {
            display: block;
            font-size: smaller;
            font-style: italic;
            margin-top: 0;
            margin-bottom: 1em;
        }
    </style>
    <h1></h1>
    <slot></slot>
`;var r=class extends h{static componentVersion="2025-06-09";static get observedAttributes(){return["inherit-style","name"]}constructor(){super(),l&&l.content&&this._construct(l.content.cloneNode(!0)),this.h1=this.shadowRoot.querySelector("h1")||this.querySelector("h1")}connectedCallback(){this._connect();let t=location.pathname.split("/").pop(),e=document.querySelector("title");if(e?this.h1.innerText=e.innerText||e.textContent||t:this.h1.innerText=t,this.hasSlotContent()){this.h1.classList.add("with-subtitle");let i=this.shadowRoot.querySelector("slot")||this.querySelector("slot");i&&i.setAttribute("role","doc-subtitle")}else this.h1.classList.remove("with-subtitle");this._ready()}disconnectedCallback(){this._disconnect()}attributeChangedCallback(t,e,i){e!==i&&(this[t]=i,this._event("attribChanged",{attribute:t,newVal:i,oldVal:e}))}},p=r;window.H1Title=r;customElements.define("h1-title",r);})();
/**
 * @class
 * @augments TiBaseComponent
 * @description Define a new zero dependency custom web component ECMA module that can be used as an HTML tag
 *
 * @element h1-title
 * @memberOf Live
 * @license Apache-2.0

 * METHODS FROM BASE: (see TiBaseComponent)
 * STANDARD METHODS:
  * @function attributeChangedCallback Called when an attribute is added, removed, updated or replaced
  * @function connectedCallback Called when the element is added to a document
  * @function constructor Construct the component
  * @function disconnectedCallback Called when the element is removed from a document

 * OTHER METHODS:
  * None

 * CUSTOM EVENTS:
  * "h1-title:connected" - When an instance of the component is attached to the DOM. `evt.details` contains the details of the element.
  * "h1-title:ready" - Alias for connected. The instance can handle property & attribute changes
  * "h1-title:disconnected" - When an instance of the component is removed from the DOM. `evt.details` contains the details of the element.
  * "h1-title:attribChanged" - When a watched attribute changes. `evt.details.data` contains the details of the change.
  * NOTE that listeners can be attached either to the `document` or to the specific element instance.

 * Standard watched attributes (common across all my components):
  * @property {string|boolean} inherit-style - Optional. Load external styles into component (only useful if using template). If present but empty, will default to './index.css'. Optionally give a URL to load.
  * @property {string} name - Optional. HTML name attribute. Included in output _meta prop.

 * Other watched attributes:
  * None

 * PROPS FROM BASE: (see TiBaseComponent)
 * OTHER STANDARD PROPS:
  * @property {string} componentVersion Static. The component version string (date updated). Also has a getter that returns component and base version strings.

 * Other props:
  * By default, all attributes are also created as properties

 NB: properties marked with ðŸ’« are dynamic and have getters/setters.

 * @slot Container contents

 * @example
  * <h1-title name="myComponent" inherit-style="./myComponent.css"></h1-title>

 * See https://github.com/runem/web-component-analyzer?tab=readme-ov-file#-how-to-document-your-components-using-jsdoc
 */
//# sourceMappingURL=h1-title.iife.min.js.map
